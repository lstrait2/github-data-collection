[
    {
        "url": "https://api.github.com/repos/facebook/react/issues/285",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/285/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/285/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/285/events",
        "html_url": "https://github.com/facebook/react/issues/285",
        "id": 18382292,
        "number": 285,
        "title": "Declarative API for installing global DOM event handlers",
        "user": {
            "login": "sophiebits",
            "id": 6820,
            "avatar_url": "https://avatars2.githubusercontent.com/u/6820?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sophiebits",
            "html_url": "https://github.com/sophiebits",
            "followers_url": "https://api.github.com/users/sophiebits/followers",
            "following_url": "https://api.github.com/users/sophiebits/following{/other_user}",
            "gists_url": "https://api.github.com/users/sophiebits/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sophiebits/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sophiebits/subscriptions",
            "organizations_url": "https://api.github.com/users/sophiebits/orgs",
            "repos_url": "https://api.github.com/users/sophiebits/repos",
            "events_url": "https://api.github.com/users/sophiebits/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sophiebits/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 121709921,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 57,
        "created_at": "2013-08-21T21:41:26Z",
        "updated_at": "2018-03-31T02:50:35Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "#284 reminded me that one thing I've sometimes wanted is to install a handler on window for `keypress` (for keyboard shortcuts) or `scroll`. Right now I can just do `window.addEventListener` in `componentDidMount` but since React is listening already, it would be nice if there were some way for me to intercept those events. (In addition, receiving normalized synthetic events is generally more useful.)\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/427",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/427/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/427/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/427/events",
        "html_url": "https://github.com/facebook/react/issues/427",
        "id": 21044241,
        "number": 427,
        "title": "Use the right document in iframe selection events",
        "user": {
            "login": "zpao",
            "id": 8445,
            "avatar_url": "https://avatars1.githubusercontent.com/u/8445?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zpao",
            "html_url": "https://github.com/zpao",
            "followers_url": "https://api.github.com/users/zpao/followers",
            "following_url": "https://api.github.com/users/zpao/following{/other_user}",
            "gists_url": "https://api.github.com/users/zpao/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zpao/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zpao/subscriptions",
            "organizations_url": "https://api.github.com/users/zpao/orgs",
            "repos_url": "https://api.github.com/users/zpao/repos",
            "events_url": "https://api.github.com/users/zpao/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zpao/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 332720629,
                "url": "https://api.github.com/repos/facebook/react/labels/HTML",
                "name": "HTML",
                "color": "f7c6c7",
                "default": false
            },
            {
                "id": 40929151,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
                "name": "Type: Bug",
                "color": "b60205",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2013-10-15T21:01:09Z",
        "updated_at": "2016-08-03T00:49:30Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "We use `document` directly a bunch where that might not be the right thing if the event is occurring in an `iframe`. We should do it right. (split from #373)\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/1159",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/1159/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/1159/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/1159/events",
        "html_url": "https://github.com/facebook/react/issues/1159",
        "id": 28086808,
        "number": 1159,
        "title": "Provide a way to handle browser-autocompleted form values on controlled components",
        "user": {
            "login": "ericflo",
            "id": 1228,
            "avatar_url": "https://avatars0.githubusercontent.com/u/1228?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ericflo",
            "html_url": "https://github.com/ericflo",
            "followers_url": "https://api.github.com/users/ericflo/followers",
            "following_url": "https://api.github.com/users/ericflo/following{/other_user}",
            "gists_url": "https://api.github.com/users/ericflo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ericflo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ericflo/subscriptions",
            "organizations_url": "https://api.github.com/users/ericflo/orgs",
            "repos_url": "https://api.github.com/users/ericflo/repos",
            "events_url": "https://api.github.com/users/ericflo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ericflo/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 40929151,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
                "name": "Type: Bug",
                "color": "b60205",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 46,
        "created_at": "2014-02-22T02:05:11Z",
        "updated_at": "2018-05-07T07:58:40Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "body": "When there's a controlled component for form names that the user has saved in their browser (common with username/password fields), the browser will sometimes render the page with values in those fields without firing onChange events.  If the user submits the form, the component state does not reflect what is showing to the user.\n\nIn experimenting with this, it appears that the data is there on load (tested by logging this.refs.myinput.getDOMNode().value)\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/1253",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/1253/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/1253/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/1253/events",
        "html_url": "https://github.com/facebook/react/issues/1253",
        "id": 29305204,
        "number": 1253,
        "title": "iframe contents cause invariant violation",
        "user": {
            "login": "matthewwithanm",
            "id": 126263,
            "avatar_url": "https://avatars0.githubusercontent.com/u/126263?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/matthewwithanm",
            "html_url": "https://github.com/matthewwithanm",
            "followers_url": "https://api.github.com/users/matthewwithanm/followers",
            "following_url": "https://api.github.com/users/matthewwithanm/following{/other_user}",
            "gists_url": "https://api.github.com/users/matthewwithanm/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/matthewwithanm/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/matthewwithanm/subscriptions",
            "organizations_url": "https://api.github.com/users/matthewwithanm/orgs",
            "repos_url": "https://api.github.com/users/matthewwithanm/repos",
            "events_url": "https://api.github.com/users/matthewwithanm/events{/privacy}",
            "received_events_url": "https://api.github.com/users/matthewwithanm/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 40929151,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
                "name": "Type: Bug",
                "color": "b60205",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 8,
        "created_at": "2014-03-12T21:35:00Z",
        "updated_at": "2017-10-01T22:40:24Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "When using server rendering, putting an `<img>` in an `<iframe>` seems to invariably cause an invariant violation (it can't find the image).\n\nThis is related to #1252, but not identical. In both cases, the browser isn't aware of the inner elements however, in this case, it's because browsers that support iframes are actually mutating the DOM (by replacing the contents with the document specified in the `src` attribute).\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/1254",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/1254/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/1254/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/1254/events",
        "html_url": "https://github.com/facebook/react/issues/1254",
        "id": 29310891,
        "number": 1254,
        "title": "React shouldn't bind wheel or touch events to the document. ",
        "user": {
            "login": "joshduck",
            "id": 240284,
            "avatar_url": "https://avatars2.githubusercontent.com/u/240284?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/joshduck",
            "html_url": "https://github.com/joshduck",
            "followers_url": "https://api.github.com/users/joshduck/followers",
            "following_url": "https://api.github.com/users/joshduck/following{/other_user}",
            "gists_url": "https://api.github.com/users/joshduck/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/joshduck/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/joshduck/subscriptions",
            "organizations_url": "https://api.github.com/users/joshduck/orgs",
            "repos_url": "https://api.github.com/users/joshduck/repos",
            "events_url": "https://api.github.com/users/joshduck/events{/privacy}",
            "received_events_url": "https://api.github.com/users/joshduck/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 40929153,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement",
                "name": "Type: Enhancement",
                "color": "84b6eb",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 32,
        "created_at": "2014-03-12T22:41:13Z",
        "updated_at": "2017-10-04T10:34:06Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "body": "React binds touchmove, touchstart, touchend, touchcancel and wheel handlers to the document. When the user tries to scroll the browser needs to execute these event handlers to ensure event.preventDefault() was not called. This means scrolling will stall while JavaScript is executing.\n\nChrome has a fast-path that checks whether the coordinate where the touch event happens has touch listeners (https://plus.google.com/+RickByers/posts/cmzrtyBYPQc). If there are no listeners Chrome can allow the scroll to happen even if the main thread is blocked on JavaScript. \n\nWe should bind our listeners for these events directly to the node which requires it. That event handler can then dispatch the event to the standard React top level event system. Then it will bubble/capture just like everything else and be visible to all event plugins.\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/1259",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/1259/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/1259/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/1259/events",
        "html_url": "https://github.com/facebook/react/issues/1259",
        "id": 29467710,
        "number": 1259,
        "title": "Stop doing data-*, aria-*, start using dataSet",
        "user": {
            "login": "zpao",
            "id": 8445,
            "avatar_url": "https://avatars1.githubusercontent.com/u/8445?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zpao",
            "html_url": "https://github.com/zpao",
            "followers_url": "https://api.github.com/users/zpao/followers",
            "following_url": "https://api.github.com/users/zpao/following{/other_user}",
            "gists_url": "https://api.github.com/users/zpao/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zpao/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zpao/subscriptions",
            "organizations_url": "https://api.github.com/users/zpao/orgs",
            "repos_url": "https://api.github.com/users/zpao/repos",
            "events_url": "https://api.github.com/users/zpao/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zpao/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 121709921,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 21,
        "created_at": "2014-03-14T20:30:18Z",
        "updated_at": "2018-05-21T23:48:53Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "The DOM already exposes `data-*` as `dataset` but it's doing transformation from hyphenated to camelCase. [From MDN](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement.dataset):\n\n```\n<div id=\"user\" data-id=\"1234567890\" data-user=\"johndoe\" data-date-of-birth>John Doe\n</div>\n\nvar el = document.querySelector('#user');\n\n// el.id == 'user'\n// el.dataset.id === '1234567890'\n// el.dataset.user === 'johndoe'\n// el.dataset.dateOfBirth === ''\n\nel.dataset.dateOfBirth = '1960-10-03'; // set the DOB.\n\n// 'someDataAttr' in el.dataset === false\n\nel.dataset.someDataAttr = 'mydata';\n// 'someDataAttr' in el.dataset === true\n```\n\nWe should just start supporting `dataSet` (because camelCase). This will allow a couple things:\n- easier reasoning about data attributes (`Object.keys(this.props.dataSet)`)\n- easier merging (`<div dataSet={merge(this.props.dataSet, {extra: 'value', override: 'value'})} />`)\n- easier (potentially faster?) updates (just modify `node.dataset`)\n\nWe'll want to do the reverse of what the DOM is doing. eg `<div dataSet={{dateOfBirth: 'val', foo: 'bar'}} />` becomes `<div data-date-of-birth=\"val\" data-foo=\"bar\"></div>`.\n\nTo the best of my knowledge, `aria-*` doesn't have a corresponding API, but we should make it work the same way. I think `ariaSet` makes sense.\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/1350",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/1350/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/1350/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/1350/events",
        "html_url": "https://github.com/facebook/react/issues/1350",
        "id": 30813443,
        "number": 1350,
        "title": "Allow components to opt-out of ReactInputSelection handling?",
        "user": {
            "login": "nathansobo",
            "id": 1789,
            "avatar_url": "https://avatars1.githubusercontent.com/u/1789?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nathansobo",
            "html_url": "https://github.com/nathansobo",
            "followers_url": "https://api.github.com/users/nathansobo/followers",
            "following_url": "https://api.github.com/users/nathansobo/following{/other_user}",
            "gists_url": "https://api.github.com/users/nathansobo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nathansobo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nathansobo/subscriptions",
            "organizations_url": "https://api.github.com/users/nathansobo/orgs",
            "repos_url": "https://api.github.com/users/nathansobo/repos",
            "events_url": "https://api.github.com/users/nathansobo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nathansobo/received_events",
            "type": "User",
            "site_admin": true
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 121709921,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 11,
        "created_at": "2014-04-03T21:01:36Z",
        "updated_at": "2017-10-04T10:35:03Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "I'm experimenting with building a new text editor component for Atom, and I've noticed that about ~1.4 ms per keystroke are being spent in restore selection functionality. What if I could add a property to my input like `.unsafeSkipSelectionRestoration` or something along those lines to prevent the DOM access this code requires?\n\nBelow is a flame graph showing where the access happens. It's a bit confusing due to the stack depth limit in Chromium's profiler, but I've highlighted the operations in question.\n\n![screenshot_2014-04-03_14_55_17](https://cloud.githubusercontent.com/assets/1789/2609142/b8cd10e2-bb72-11e3-8330-a69fefc1795c.png)\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/1355",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/1355/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/1355/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/1355/events",
        "html_url": "https://github.com/facebook/react/issues/1355",
        "id": 30900007,
        "number": 1355,
        "title": "touchmove doesn't fire on removed element",
        "user": {
            "login": "sophiebits",
            "id": 6820,
            "avatar_url": "https://avatars2.githubusercontent.com/u/6820?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sophiebits",
            "html_url": "https://github.com/sophiebits",
            "followers_url": "https://api.github.com/users/sophiebits/followers",
            "following_url": "https://api.github.com/users/sophiebits/following{/other_user}",
            "gists_url": "https://api.github.com/users/sophiebits/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sophiebits/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sophiebits/subscriptions",
            "organizations_url": "https://api.github.com/users/sophiebits/orgs",
            "repos_url": "https://api.github.com/users/sophiebits/repos",
            "events_url": "https://api.github.com/users/sophiebits/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sophiebits/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 40929153,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement",
                "name": "Type: Enhancement",
                "color": "84b6eb",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 9,
        "created_at": "2014-04-04T22:32:30Z",
        "updated_at": "2017-10-04T10:37:36Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "If you have\n\n```\n{this.state.show &&\n  <div onTouchStart={this.hideTheDiv} onTouchMove={...} />}\n```\n\nsuch that the onTouchStart handler removes the div (and maybe replaces it with another one in the same place, useful in certain draggable interactions), the onTouchMove handler doesn't fire because the events of a detached element no longer bubble to document. We should probably bind the touchmove handler when the element receives touchstart instead of delegating to document.\n\nSort of related to #1254.\n\ncc @merbs @eater\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/1387",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/1387/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/1387/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/1387/events",
        "html_url": "https://github.com/facebook/react/issues/1387",
        "id": 31181355,
        "number": 1387,
        "title": "`render` as a function of props and state",
        "user": {
            "login": "chenglou",
            "id": 1909539,
            "avatar_url": "https://avatars2.githubusercontent.com/u/1909539?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/chenglou",
            "html_url": "https://github.com/chenglou",
            "followers_url": "https://api.github.com/users/chenglou/followers",
            "following_url": "https://api.github.com/users/chenglou/following{/other_user}",
            "gists_url": "https://api.github.com/users/chenglou/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/chenglou/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/chenglou/subscriptions",
            "organizations_url": "https://api.github.com/users/chenglou/orgs",
            "repos_url": "https://api.github.com/users/chenglou/repos",
            "events_url": "https://api.github.com/users/chenglou/events{/privacy}",
            "received_events_url": "https://api.github.com/users/chenglou/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 739777675,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Component%20API",
                "name": "Component: Component API",
                "color": "d4c5f9",
                "default": false
            },
            {
                "id": 121709921,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 30,
        "created_at": "2014-04-09T18:15:50Z",
        "updated_at": "2018-02-10T22:12:19Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "body": "This comes from my discussion with several people around animation, but I feel like it's important enough to warrant its own issue.\n\nWe already insist that `render` should be a pure function of `this.props` and `this.state`. How about taking this further and pass those in CompositeComponent? This way we can write:\n\n``` html\nrender: function(props, state) {\n  return <div>{props.something}</div>;\n}\n```\n\nWhile most of the time we'll still call `render(this.props, this.state)` internally, with this we will be able to do `render(somePrevProps, someTestState)` from React or even from the user. Being able to \"test the water\" would be very valuable in the future. For example:\n\n``` js\ncomponentWillReceiveProps: function(nextProps) {\n  var result1 = this.render(this.props, this.state);\n  var result2 = this.render(nextProps, this.state);\n  // Collection of changed stuff. Good for preparing mounting/unmounting animations or such logic.\n  React.reconciler.getDiff(result1, result2);\n  this.setState({...});\n}\n```\n\nI've heard this can also solve some problems with pendingState? Not too familiar with the issue.\n@jordwalke @sebmarkbage @petehunt \n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/1739",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/1739/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/1739/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/1739/events",
        "html_url": "https://github.com/facebook/react/issues/1739",
        "id": 36379404,
        "number": 1739,
        "title": "Support asynchronous server rendering (waiting for data before rendering)",
        "user": {
            "login": "fdecampredon",
            "id": 864201,
            "avatar_url": "https://avatars2.githubusercontent.com/u/864201?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/fdecampredon",
            "html_url": "https://github.com/fdecampredon",
            "followers_url": "https://api.github.com/users/fdecampredon/followers",
            "following_url": "https://api.github.com/users/fdecampredon/following{/other_user}",
            "gists_url": "https://api.github.com/users/fdecampredon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/fdecampredon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/fdecampredon/subscriptions",
            "organizations_url": "https://api.github.com/users/fdecampredon/orgs",
            "repos_url": "https://api.github.com/users/fdecampredon/repos",
            "events_url": "https://api.github.com/users/fdecampredon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/fdecampredon/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 739777675,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Component%20API",
                "name": "Component: Component API",
                "color": "d4c5f9",
                "default": false
            },
            {
                "id": 710332294,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Server%20Rendering",
                "name": "Component: Server Rendering",
                "color": "d4c5f9",
                "default": false
            },
            {
                "id": 121709921,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 128,
        "created_at": "2014-06-24T12:36:38Z",
        "updated_at": "2018-02-06T20:05:45Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "It would seriously ease the process of building something isomorphic if componentWillMount could return a promise and that react would delay rendering until that promise is resolved. I have seen attempt of doing something like that in react-router and rrouter, however giving this responsibility to each component instead of a router module would make more sense for me.\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/1791",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/1791/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/1791/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/1791/events",
        "html_url": "https://github.com/facebook/react/issues/1791",
        "id": 37201374,
        "number": 1791,
        "title": "Add api for focus management",
        "user": {
            "login": "bmeck",
            "id": 234659,
            "avatar_url": "https://avatars1.githubusercontent.com/u/234659?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bmeck",
            "html_url": "https://github.com/bmeck",
            "followers_url": "https://api.github.com/users/bmeck/followers",
            "following_url": "https://api.github.com/users/bmeck/following{/other_user}",
            "gists_url": "https://api.github.com/users/bmeck/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bmeck/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bmeck/subscriptions",
            "organizations_url": "https://api.github.com/users/bmeck/orgs",
            "repos_url": "https://api.github.com/users/bmeck/repos",
            "events_url": "https://api.github.com/users/bmeck/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bmeck/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 121709921,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 12,
        "created_at": "2014-07-05T16:05:32Z",
        "updated_at": "2017-10-04T10:38:28Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "There are currently a couple of problems with focus management in React.\n## current problems\n- `this.getDOMElement().focus()`\n\ndoes not guarantee the node is on a document/visible. visibility can be hard to detect due to other components firing render().\n- `this.refs.x.getDOMElement().focus()`\n\ndoes not guarantee that x has finished any pending renders. if `x` renders, focus is lost.\n- `componentDidUpdate`\n\nthis fires on the child nodes before parents so in the case of:\n\n```\n<ul style=\"display:none\">\n  <li><button>can't focus</button></li>\n</ul>\n```\n\nif we want to show the `<ul/>` and focus the button.\n\nthe component of the `<button/>` focusing during componentDidUpdate has no affect because the `<ul/>` is still hidden.\n## discussion\n\nif looks like some of the PRs to react are using raf or timeouts to achieve fixes to the problems listed. This can cause race conditions, and can be fixed with a lifeCycle addition, or just a hidden lifeCycle purely for focus management.\n\nThe issue comes down to not having a lifecycle able to fire a function after _all_ rendering is done, not just an individual component.\n\nI would suggest we add a simple API of component.blur()/component.focus() that queues the requests and fires them after all rendering is done. The fix is fairly simple, but I wonder how people feel about this.\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/1881",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/1881/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/1881/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/1881/events",
        "html_url": "https://github.com/facebook/react/issues/1881",
        "id": 38233034,
        "number": 1881,
        "title": "Support !important for styles?",
        "user": {
            "login": "syranide",
            "id": 1714255,
            "avatar_url": "https://avatars1.githubusercontent.com/u/1714255?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/syranide",
            "html_url": "https://github.com/syranide",
            "followers_url": "https://api.github.com/users/syranide/followers",
            "following_url": "https://api.github.com/users/syranide/following{/other_user}",
            "gists_url": "https://api.github.com/users/syranide/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/syranide/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/syranide/subscriptions",
            "organizations_url": "https://api.github.com/users/syranide/orgs",
            "repos_url": "https://api.github.com/users/syranide/repos",
            "events_url": "https://api.github.com/users/syranide/events{/privacy}",
            "received_events_url": "https://api.github.com/users/syranide/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 121709921,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 41,
        "created_at": "2014-07-19T13:05:50Z",
        "updated_at": "2018-02-07T23:53:12Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "body": "We currently don't support `!important` as it has to be set using `style.setProperty(name, value, priority)`. This should be trivially easy to implement if it's something want to support, although I'm not sure about the performance implications (**EDIT:** #1886), although I can't imagine it would be measurable as we would be doing the string test ourselves and those are cheap.\n\nhttp://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleDeclaration\n\n~~OK... apparently IE8 doesn't support this _at all_, it might still be worth implementing, for the future and for those who don't care about IE8.~~ ~~After further experimentation, apparently it is! `style.setAttribute(name, value)` (priority is part of the value).~~ But apparently that was wrong as well, the only way to set it seems to be with `cssText`, an acceptable work-around may be to just use `cssText` when we detect an `!important` style, which should be seldom enough that performance is a non-issue.\n\nAn important consideration is that we _already_ support this for the initial render, but subsequent updates will _fail_ as `!important` isn't recognized for properties.\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/1940",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/1940/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/1940/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/1940/events",
        "html_url": "https://github.com/facebook/react/issues/1940",
        "id": 38827558,
        "number": 1940,
        "title": "Unnecessary reflow due to setState in componentWillReceiveProps",
        "user": {
            "login": "univerio",
            "id": 1037172,
            "avatar_url": "https://avatars3.githubusercontent.com/u/1037172?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/univerio",
            "html_url": "https://github.com/univerio",
            "followers_url": "https://api.github.com/users/univerio/followers",
            "following_url": "https://api.github.com/users/univerio/following{/other_user}",
            "gists_url": "https://api.github.com/users/univerio/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/univerio/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/univerio/subscriptions",
            "organizations_url": "https://api.github.com/users/univerio/orgs",
            "repos_url": "https://api.github.com/users/univerio/repos",
            "events_url": "https://api.github.com/users/univerio/events{/privacy}",
            "received_events_url": "https://api.github.com/users/univerio/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 40929153,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement",
                "name": "Type: Enhancement",
                "color": "84b6eb",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 3,
        "created_at": "2014-07-26T22:24:07Z",
        "updated_at": "2017-10-26T23:47:31Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "See [mailing list post](https://groups.google.com/d/msg/reactjs/pKxD3JY_Y84/zc59P2T5IP4J), reproduced below for convenience:\n\nThe following reduced test case ([jsfiddle](http://jsfiddle.net/Tn83a/)) has an unnecessary reflow:\n\n``` javascript\nvar Input = React.createClass({\n    getInitialState: function () {\n        return {\n            text: this.props.text + \"...\"\n        };\n    },\n    componentWillReceiveProps: function (nextProps) {\n        this.setState({\n            text: nextProps.text + \"...\"\n        });\n    },\n    render: function () {\n        return React.DOM.div(null, this.state.text);\n    }\n});\n\nvar App = React.createClass({\n    getInitialState: function () {\n        return {\n            value: \"foo\"\n        };\n    },\n    render: function () {\n        var that = this;\n        return React.DOM.div(null,\n            React.DOM.input({\n                value: this.state.value,\n                onChange: function (e) {\n                    that.setState({\n                        value: e.target.value\n                    });\n                }\n            }),\n            Input({\n                text: this.state.value\n            }));\n    }\n});\n\nReact.renderComponent(App(null), document.body);\n```\n\nAnd a screenshot from the Timeline tab in Chrome Dev Tools showing the reflow:\n\n![reflow](https://cloud.githubusercontent.com/assets/1037172/3712415/33574b9e-1513-11e4-9dca-cecc3233353a.png)\n\nAn equivalent implementation ([jsfiddle](http://jsfiddle.net/EG7hL/)) not using `setState` in `componentWillReceiveProps` does not have the same reflow:\n\n``` javascript\nvar Input = React.createClass({\n    render: function () {\n        return React.DOM.div(null, this.props.text + \"...\");\n    }\n});\n\nvar App = React.createClass({\n    getInitialState: function () {\n        return {\n            value: \"foo\"\n        };\n    },\n    render: function () {\n        var that = this;\n        return React.DOM.div(null,\n            React.DOM.input({\n                value: this.state.value,\n                onChange: function (e) {\n                    that.setState({\n                        value: e.target.value\n                    });\n                }\n            }),\n            Input({\n                text: this.state.value\n            }));\n    }\n});\n\nReact.renderComponent(App(null), document.body);\n```\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/1964",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/1964/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/1964/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/1964/events",
        "html_url": "https://github.com/facebook/react/issues/1964",
        "id": 39132053,
        "number": 1964,
        "title": "Don't add top-level events for uncontrolled inputs",
        "user": {
            "login": "nathansobo",
            "id": 1789,
            "avatar_url": "https://avatars1.githubusercontent.com/u/1789?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nathansobo",
            "html_url": "https://github.com/nathansobo",
            "followers_url": "https://api.github.com/users/nathansobo/followers",
            "following_url": "https://api.github.com/users/nathansobo/following{/other_user}",
            "gists_url": "https://api.github.com/users/nathansobo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nathansobo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nathansobo/subscriptions",
            "organizations_url": "https://api.github.com/users/nathansobo/orgs",
            "repos_url": "https://api.github.com/users/nathansobo/repos",
            "events_url": "https://api.github.com/users/nathansobo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nathansobo/received_events",
            "type": "User",
            "site_admin": true
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 40929153,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement",
                "name": "Type: Enhancement",
                "color": "84b6eb",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 9,
        "created_at": "2014-07-30T20:13:02Z",
        "updated_at": "2017-10-04T10:38:40Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "The document-wide handlers for native events that perform synthetic event dispatch execute in 0.2-0.7 milliseconds on my machine. I realize this doesn't seem like much time, but we're really trying to shave off any non-essential source of latency for typing and cursor movement in Atom, and every little bit helps. Disabling synthetic events on `keydown` and `textinput` is saving about 1ms of latency for a keystroke.\n\nIn our fork, I've added the ability to add a `reactSkipEventDispatch` property to the native event to opt out of synthetic dispatch, but I'd be interested in a more official mechanism for opting out of this feature for certain event types. Even better, perhaps React could maintain a cache of what event types are actually being listened for and bail out as soon as possible if handling an event.\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/2043",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/2043/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/2043/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/2043/events",
        "html_url": "https://github.com/facebook/react/issues/2043",
        "id": 40292965,
        "number": 2043,
        "title": "Attach event per react container root, rather than on the document",
        "user": {
            "login": "chenglou",
            "id": 1909539,
            "avatar_url": "https://avatars2.githubusercontent.com/u/1909539?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/chenglou",
            "html_url": "https://github.com/chenglou",
            "followers_url": "https://api.github.com/users/chenglou/followers",
            "following_url": "https://api.github.com/users/chenglou/following{/other_user}",
            "gists_url": "https://api.github.com/users/chenglou/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/chenglou/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/chenglou/subscriptions",
            "organizations_url": "https://api.github.com/users/chenglou/orgs",
            "repos_url": "https://api.github.com/users/chenglou/repos",
            "events_url": "https://api.github.com/users/chenglou/events{/privacy}",
            "received_events_url": "https://api.github.com/users/chenglou/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 40929153,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement",
                "name": "Type: Enhancement",
                "color": "84b6eb",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": {
            "login": "chenglou",
            "id": 1909539,
            "avatar_url": "https://avatars2.githubusercontent.com/u/1909539?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/chenglou",
            "html_url": "https://github.com/chenglou",
            "followers_url": "https://api.github.com/users/chenglou/followers",
            "following_url": "https://api.github.com/users/chenglou/following{/other_user}",
            "gists_url": "https://api.github.com/users/chenglou/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/chenglou/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/chenglou/subscriptions",
            "organizations_url": "https://api.github.com/users/chenglou/orgs",
            "repos_url": "https://api.github.com/users/chenglou/repos",
            "events_url": "https://api.github.com/users/chenglou/events{/privacy}",
            "received_events_url": "https://api.github.com/users/chenglou/received_events",
            "type": "User",
            "site_admin": false
        },
        "assignees": [
            {
                "login": "chenglou",
                "id": 1909539,
                "avatar_url": "https://avatars2.githubusercontent.com/u/1909539?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/chenglou",
                "html_url": "https://github.com/chenglou",
                "followers_url": "https://api.github.com/users/chenglou/followers",
                "following_url": "https://api.github.com/users/chenglou/following{/other_user}",
                "gists_url": "https://api.github.com/users/chenglou/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/chenglou/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/chenglou/subscriptions",
                "organizations_url": "https://api.github.com/users/chenglou/orgs",
                "repos_url": "https://api.github.com/users/chenglou/repos",
                "events_url": "https://api.github.com/users/chenglou/events{/privacy}",
                "received_events_url": "https://api.github.com/users/chenglou/received_events",
                "type": "User",
                "site_admin": false
            }
        ],
        "milestone": null,
        "comments": 7,
        "created_at": "2014-08-14T20:00:09Z",
        "updated_at": "2018-04-02T15:07:18Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "body": "@nathansobo will that help your event perf issues a bit? I'm not familiar with atom's plugin infrastructure, But this'll help if you have `<Editor/><Plugin1/>` (two `renderComponent`s). Doesn't help if you have `<Editor><Plugin1/></Editor>` though, but I have some ideas to optimize events a bit more.\n\nThis is nonetheless an ok idea, I think.\n@spicyj \n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/2193",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/2193/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/2193/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/2193/events",
        "html_url": "https://github.com/facebook/react/issues/2193",
        "id": 42741069,
        "number": 2193,
        "title": "getEventKey implementation inconsistent with DOM3 spec / Firefox implementation",
        "user": {
            "login": "Daniel15",
            "id": 91933,
            "avatar_url": "https://avatars2.githubusercontent.com/u/91933?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Daniel15",
            "html_url": "https://github.com/Daniel15",
            "followers_url": "https://api.github.com/users/Daniel15/followers",
            "following_url": "https://api.github.com/users/Daniel15/following{/other_user}",
            "gists_url": "https://api.github.com/users/Daniel15/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Daniel15/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Daniel15/subscriptions",
            "organizations_url": "https://api.github.com/users/Daniel15/orgs",
            "repos_url": "https://api.github.com/users/Daniel15/repos",
            "events_url": "https://api.github.com/users/Daniel15/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Daniel15/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 40929151,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
                "name": "Type: Bug",
                "color": "b60205",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 5,
        "created_at": "2014-09-15T04:41:21Z",
        "updated_at": "2016-08-03T00:49:30Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "There are some inconsistencies between `getEventKey` and the DOM3 keyboard event spec (as well as what Firefox has implemented):\n- `key` property is not correctly set for printable characters on `keydown` and `keyup` events. This works properly in Firefox, and my interpretation of the standard is that Firefox's behaviour is correct here. From the spec: _If the key generates a printable character, and there exists an appropriate Unicode code point, then the KeyboardEvent.key attribute must be a string consisting of the char value of that character._\n- Enter key only fires keydown in Firefox, but fires both keydown and keypress in Chrome. This should be consistent across browsers\n- CapsLock key only fires keydown when it is toggled on. When caps lock is toggled from on to off, no keydown event is fired (this may be a browser limitation in Chrome)\n\nRepro: Test this page in Firefox and compare the result to Chrome: http://jsfiddle.net/63ycmLhe/1/\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/2548",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/2548/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/2548/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/2548/events",
        "html_url": "https://github.com/facebook/react/issues/2548",
        "id": 49147612,
        "number": 2548,
        "title": "Provide a way to specify what parts of react server markup can be reused on client",
        "user": {
            "login": "Vijar",
            "id": 759766,
            "avatar_url": "https://avatars1.githubusercontent.com/u/759766?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Vijar",
            "html_url": "https://github.com/Vijar",
            "followers_url": "https://api.github.com/users/Vijar/followers",
            "following_url": "https://api.github.com/users/Vijar/following{/other_user}",
            "gists_url": "https://api.github.com/users/Vijar/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Vijar/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Vijar/subscriptions",
            "organizations_url": "https://api.github.com/users/Vijar/orgs",
            "repos_url": "https://api.github.com/users/Vijar/repos",
            "events_url": "https://api.github.com/users/Vijar/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Vijar/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 710332294,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Server%20Rendering",
                "name": "Component: Server Rendering",
                "color": "d4c5f9",
                "default": false
            },
            {
                "id": 121709921,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 3,
        "created_at": "2014-11-17T21:27:55Z",
        "updated_at": "2018-01-02T13:20:13Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "body": "It would be great to be able to have a custom checksum validator that can ignore certain branches of the DOM-tree when attempting to reuse markup.\n\nThe use case is for rendering static components. For static components that only need to be rendered once, we can just do the rendering on the server, and not have to render again on the client. Currently we have to pass down both the react markup AND the props used to generate the static markup. However, it is a waste to send those props down, if this component doesn't need to be rendered client-side.\n\nOne of the major performance concerns for using React is that apps not only have to send down markup but props as well, usually duplicating the data sent down to the client. \n\nBeing able to specify certain components as not needing a client side re-render, thus skipping check-sum, would save k-weight of the initial page load.\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/2585",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/2585/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/2585/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/2585/events",
        "html_url": "https://github.com/facebook/react/issues/2585",
        "id": 49703089,
        "number": 2585,
        "title": "Handle browser autofill gracefully when server-side rendering",
        "user": {
            "login": "iest",
            "id": 1926464,
            "avatar_url": "https://avatars2.githubusercontent.com/u/1926464?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/iest",
            "html_url": "https://github.com/iest",
            "followers_url": "https://api.github.com/users/iest/followers",
            "following_url": "https://api.github.com/users/iest/following{/other_user}",
            "gists_url": "https://api.github.com/users/iest/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/iest/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/iest/subscriptions",
            "organizations_url": "https://api.github.com/users/iest/orgs",
            "repos_url": "https://api.github.com/users/iest/repos",
            "events_url": "https://api.github.com/users/iest/events{/privacy}",
            "received_events_url": "https://api.github.com/users/iest/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 710332294,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Server%20Rendering",
                "name": "Component: Server Rendering",
                "color": "d4c5f9",
                "default": false
            },
            {
                "id": 40929153,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement",
                "name": "Type: Enhancement",
                "color": "84b6eb",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 5,
        "created_at": "2014-11-21T14:38:49Z",
        "updated_at": "2017-10-04T11:11:55Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "I'm rendering my React app at the document root, with server-side rendering.\nI've got an email and password login form. It renders on the server without any state (both fields empty).\nWhen the browser loads the page, the email and password are autofilled by the browser.\n\nThis happens before React bootstraps, and when it loads, it wipes out that state. So the user sees the inputs being autofilled then being emptied. Not ideal.\n\nI tried using `componentWillMount` to grab the raw DOM node value and `setState` before render, but react complains that the checksum is invalid.\n\nI realise this is a case where the DOM is being modified before react bootstraps on the client, but it would be good to be able to do this kinda stuff...\n\n**Update:** A workaround I used was to pull the values out of the `<input>`s inside `componentWillMount`, then `setState` to those values inside `componentDidMount`. Would still be nice to handle this cleanly though...\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/2676",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/2676/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/2676/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/2676/events",
        "html_url": "https://github.com/facebook/react/issues/2676",
        "id": 51318750,
        "number": 2676,
        "title": "Normalize event.dataTransfer for drag and drop events",
        "user": {
            "login": "erikbrannstrom",
            "id": 272101,
            "avatar_url": "https://avatars2.githubusercontent.com/u/272101?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/erikbrannstrom",
            "html_url": "https://github.com/erikbrannstrom",
            "followers_url": "https://api.github.com/users/erikbrannstrom/followers",
            "following_url": "https://api.github.com/users/erikbrannstrom/following{/other_user}",
            "gists_url": "https://api.github.com/users/erikbrannstrom/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/erikbrannstrom/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/erikbrannstrom/subscriptions",
            "organizations_url": "https://api.github.com/users/erikbrannstrom/orgs",
            "repos_url": "https://api.github.com/users/erikbrannstrom/repos",
            "events_url": "https://api.github.com/users/erikbrannstrom/events{/privacy}",
            "received_events_url": "https://api.github.com/users/erikbrannstrom/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 121709921,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": {
            "login": "aweary",
            "id": 6886061,
            "avatar_url": "https://avatars2.githubusercontent.com/u/6886061?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/aweary",
            "html_url": "https://github.com/aweary",
            "followers_url": "https://api.github.com/users/aweary/followers",
            "following_url": "https://api.github.com/users/aweary/following{/other_user}",
            "gists_url": "https://api.github.com/users/aweary/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/aweary/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/aweary/subscriptions",
            "organizations_url": "https://api.github.com/users/aweary/orgs",
            "repos_url": "https://api.github.com/users/aweary/repos",
            "events_url": "https://api.github.com/users/aweary/events{/privacy}",
            "received_events_url": "https://api.github.com/users/aweary/received_events",
            "type": "User",
            "site_admin": false
        },
        "assignees": [
            {
                "login": "aweary",
                "id": 6886061,
                "avatar_url": "https://avatars2.githubusercontent.com/u/6886061?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/aweary",
                "html_url": "https://github.com/aweary",
                "followers_url": "https://api.github.com/users/aweary/followers",
                "following_url": "https://api.github.com/users/aweary/following{/other_user}",
                "gists_url": "https://api.github.com/users/aweary/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/aweary/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aweary/subscriptions",
                "organizations_url": "https://api.github.com/users/aweary/orgs",
                "repos_url": "https://api.github.com/users/aweary/repos",
                "events_url": "https://api.github.com/users/aweary/events{/privacy}",
                "received_events_url": "https://api.github.com/users/aweary/received_events",
                "type": "User",
                "site_admin": false
            }
        ],
        "milestone": null,
        "comments": 6,
        "created_at": "2014-12-08T16:08:01Z",
        "updated_at": "2017-10-04T11:12:07Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "I'm currently implementing drag-and-drop in a React application where different kinds of data is dragged and dropped. This means I want to check for certain types on the event.dataTransfer object to see if drop should be enabled or not. Basically it looks like this:\n\n``` javascript\nonDragOver: function (event) {\n    if (event.dataTransfer.types.indexOf('application/x-custom-type') > -1) {\n        event.preventDefault();\n    }\n}\n```\n\nThis works fine in Chrome, but less so in Firefox. It turns out that in Firefox the type of DataTransfer.types is DOMStringList, which does not have an `indexOf` method. According to the latest drafts of the HTML5 specification ([W3C](http://www.w3.org/html/wg/drafts/html/master/editing.html#the-datatransfer-interface), [WHATWG](https://html.spec.whatwg.org/multipage/interaction.html#dom-datatransfer-types)), returning an array like Webkit does is correct. Obviously, the fix is easy on my side (check which one of `indexOf` and `contains` is available and use that one), but I thought it might be useful to fix this in React instead, since it is at least related to the event system.\n\nI could probably take a stab at this, but I wanted to gauge the interest. Perhaps the DataTransfer object is deemed to be out of scope for the synthetic event handler.\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/3059",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/3059/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/3059/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/3059/events",
        "html_url": "https://github.com/facebook/react/issues/3059",
        "id": 56681651,
        "number": 3059,
        "title": "Support Map interface for props",
        "user": {
            "login": "swannodette",
            "id": 13516,
            "avatar_url": "https://avatars0.githubusercontent.com/u/13516?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/swannodette",
            "html_url": "https://github.com/swannodette",
            "followers_url": "https://api.github.com/users/swannodette/followers",
            "following_url": "https://api.github.com/users/swannodette/following{/other_user}",
            "gists_url": "https://api.github.com/users/swannodette/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/swannodette/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/swannodette/subscriptions",
            "organizations_url": "https://api.github.com/users/swannodette/orgs",
            "repos_url": "https://api.github.com/users/swannodette/repos",
            "events_url": "https://api.github.com/users/swannodette/events{/privacy}",
            "received_events_url": "https://api.github.com/users/swannodette/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 739777675,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Component%20API",
                "name": "Component: Component API",
                "color": "d4c5f9",
                "default": false
            },
            {
                "id": 121709921,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 35,
        "created_at": "2015-02-05T15:07:24Z",
        "updated_at": "2017-11-03T15:54:15Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "High performance Map implementations are starting to appear in modern web browsers. By supporting the Map interface users can now instead supply props as an Immutable.js or ClojureScript Map instance. This change would not even require providing an equality hook for the first pass as users can memoize props themselves.\n\nFor users embracing immutable data this is a huge change, it means that styles can be defined in code, overridden and shared efficiently. React DOM elements with memoized immutable props can be skipped over, etc.\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/3081",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/3081/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/3081/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/3081/events",
        "html_url": "https://github.com/facebook/react/issues/3081",
        "id": 56869851,
        "number": 3081,
        "title": "Automatically Object.assign when `styles` receives an Array",
        "user": {
            "login": "appsforartists",
            "id": 926648,
            "avatar_url": "https://avatars1.githubusercontent.com/u/926648?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/appsforartists",
            "html_url": "https://github.com/appsforartists",
            "followers_url": "https://api.github.com/users/appsforartists/followers",
            "following_url": "https://api.github.com/users/appsforartists/following{/other_user}",
            "gists_url": "https://api.github.com/users/appsforartists/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/appsforartists/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/appsforartists/subscriptions",
            "organizations_url": "https://api.github.com/users/appsforartists/orgs",
            "repos_url": "https://api.github.com/users/appsforartists/repos",
            "events_url": "https://api.github.com/users/appsforartists/events{/privacy}",
            "received_events_url": "https://api.github.com/users/appsforartists/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 121709921,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 4,
        "created_at": "2015-02-06T21:22:45Z",
        "updated_at": "2017-10-04T11:12:33Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "In React Native, these two styles are automatically composed:\n\n```\n<Text style={[styles.ratingValue, getStyleFromScore(criticsScore)]}>\n```\n\nCurrently, trying a similar technique in React DOM produces this:\n\n```\n<span style=\"0:[object Object];1:[object Object];\">\n```\n\nFollowing the principles of \"Learn Once, Write Everywhere\", the style prop should behave similarly across implementations.\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/3218",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/3218/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/3218/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/3218/events",
        "html_url": "https://github.com/facebook/react/issues/3218",
        "id": 58401806,
        "number": 3218,
        "title": "Warn when React DOM modified by not-React",
        "user": {
            "login": "jimfb",
            "id": 9595985,
            "avatar_url": "https://avatars3.githubusercontent.com/u/9595985?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jimfb",
            "html_url": "https://github.com/jimfb",
            "followers_url": "https://api.github.com/users/jimfb/followers",
            "following_url": "https://api.github.com/users/jimfb/following{/other_user}",
            "gists_url": "https://api.github.com/users/jimfb/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jimfb/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jimfb/subscriptions",
            "organizations_url": "https://api.github.com/users/jimfb/orgs",
            "repos_url": "https://api.github.com/users/jimfb/repos",
            "events_url": "https://api.github.com/users/jimfb/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jimfb/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 40929153,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement",
                "name": "Type: Enhancement",
                "color": "84b6eb",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 26,
        "created_at": "2015-02-20T19:52:05Z",
        "updated_at": "2018-01-05T13:56:57Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "body": "As discussed in https://github.com/facebook/react/issues/3207#issuecomment-75181038, a complementary improvement is to turn on a mutation observer in dev, and warn of someone other than React modifies the DOM and/or if dom nodes appear without a data-reactid, thus indicating an extension or some other script is doing fancy magic.\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/3227",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/3227/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/3227/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/3227/events",
        "html_url": "https://github.com/facebook/react/issues/3227",
        "id": 58488339,
        "number": 3227,
        "title": "Optimizing Compiler: Tagging ReactElements",
        "user": {
            "login": "sebmarkbage",
            "id": 63648,
            "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sebmarkbage",
            "html_url": "https://github.com/sebmarkbage",
            "followers_url": "https://api.github.com/users/sebmarkbage/followers",
            "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
            "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
            "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
            "repos_url": "https://api.github.com/users/sebmarkbage/repos",
            "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 180616330,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Optimizing%20Compiler",
                "name": "Component: Optimizing Compiler",
                "color": "bfdadc",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 6,
        "created_at": "2015-02-22T03:21:18Z",
        "updated_at": "2016-01-22T20:55:02Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "We can make more optimized reconciliation by tagging ReactElements with the \"hidden class\" of their props.\n\nFor example, this is guaranteed to always have three props: `className`, `width`, `children`.\n\n``` javascript\n<div className=\"foo\" style={{ width: w, height: 100 }}>{c}</div>\n```\n\nIf we could tag every element with these properties with a unique ID:\n\n``` javascript\n{ __t: 7, type: 'div', props: { className: 'foo', style: { width: w, height: 5 }, children: c } }\n```\n\nThen we could use the hidden class to generate an optimized diffing algorithm for these instead of iterating over the properties. Presumably, we would only need to do this for `type: <string>` since we only diff native components.\n\nBonus points if we can determine which properties are constant. Perhaps using a property descriptor object:\n\n``` javascript\n// Constant properties are annotated as 1, other properties are excluded and inferred by props.\nvar t = { className: 1, style: { height: 1 } };\n{ __t: t, type: 'div', props: { className: 'foo', style: { width: w, height: 5 }, children: c } }\n```\n\nWe would use a heuristic inside React to determine when to create an optimized differ. For example, after 10+ updates to the same component. Just like a JIT would do.\n\n``` javascript\nif (oldElement.__t === newElement.__t) {\n  numberOfUpdates++;\n} else {\n  numberOfUpdates = 0;\n}\n\nif (numberOfUpdates === 10) {\n  optimizedDiffer = generateOptimizedDiffer(newElement);\n  optimizedDiffer(oldElement, newElement);\n} else if (numberOfUpdates > 10) {\n  optimizedDiffer(oldElement, newElement);\n} else {\n  manualDiffing(oldElement, newElement);\n}\n```\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/3234",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/3234/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/3234/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/3234/events",
        "html_url": "https://github.com/facebook/react/issues/3234",
        "id": 58520681,
        "number": 3234,
        "title": "How Should Refs Work?",
        "user": {
            "login": "sebmarkbage",
            "id": 63648,
            "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sebmarkbage",
            "html_url": "https://github.com/sebmarkbage",
            "followers_url": "https://api.github.com/users/sebmarkbage/followers",
            "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
            "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
            "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
            "repos_url": "https://api.github.com/users/sebmarkbage/repos",
            "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 270986513,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Big%20Picture",
                "name": "Type: Big Picture",
                "color": "61dafb",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 5,
        "created_at": "2015-02-22T21:38:23Z",
        "updated_at": "2015-11-07T17:01:09Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "Spinoff discussion of #1373, #3128 and #3228.\n\nWe're pretty sure that we need to change the current way refs work (see above). However, the new ref callbacks are also not ideal because it relies on some imperative code and suffers from timing issues like all imperative life-cycles. It is also not very convenient without arrow functions. Even with arrow functions it might suffer from performance issues.\n\nA few things refs tries to solve:\n- Imperative access to APIs that doesn't have declarative counter-parts yet. E.g. DOM layout.\n- Fast-path down the tree to update deeply to by-pass reconciliation. Perf-optimization.\n- Get the current state of a child that you don't want to control without duplicating state (which might possibly diverge).\n- Send signals/pulses downwards.\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/3303",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/3303/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/3303/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/3303/events",
        "html_url": "https://github.com/facebook/react/issues/3303",
        "id": 59603071,
        "number": 3303,
        "title": "Add First Class Support for Immutable-js Records (or maybe Maps) in setState?",
        "user": {
            "login": "sebmarkbage",
            "id": 63648,
            "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sebmarkbage",
            "html_url": "https://github.com/sebmarkbage",
            "followers_url": "https://api.github.com/users/sebmarkbage/followers",
            "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
            "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
            "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
            "repos_url": "https://api.github.com/users/sebmarkbage/repos",
            "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 739777675,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Component%20API",
                "name": "Component: Component API",
                "color": "d4c5f9",
                "default": false
            },
            {
                "id": 121709921,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 10,
        "created_at": "2015-03-03T06:56:58Z",
        "updated_at": "2017-11-03T15:53:52Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "Seems like this is a common use case for `replaceState` which we would like to deprecate. #3236 \n\nNot quite sure how this would work with Records and mixins since they're fixed type.\n\ncc @leebyron \n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/3344",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/3344/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/3344/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/3344/events",
        "html_url": "https://github.com/facebook/react/issues/3344",
        "id": 60269689,
        "number": 3344,
        "title": "Invoking renderToStaticMarkup in render() causes refs to break",
        "user": {
            "login": "masonicboom",
            "id": 86958,
            "avatar_url": "https://avatars0.githubusercontent.com/u/86958?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/masonicboom",
            "html_url": "https://github.com/masonicboom",
            "followers_url": "https://api.github.com/users/masonicboom/followers",
            "following_url": "https://api.github.com/users/masonicboom/following{/other_user}",
            "gists_url": "https://api.github.com/users/masonicboom/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/masonicboom/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/masonicboom/subscriptions",
            "organizations_url": "https://api.github.com/users/masonicboom/orgs",
            "repos_url": "https://api.github.com/users/masonicboom/repos",
            "events_url": "https://api.github.com/users/masonicboom/events{/privacy}",
            "received_events_url": "https://api.github.com/users/masonicboom/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 139653724,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Core%20Utilities",
                "name": "Component: Core Utilities",
                "color": "c5def5",
                "default": false
            },
            {
                "id": 40929151,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
                "name": "Type: Bug",
                "color": "b60205",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 20,
        "created_at": "2015-03-08T18:33:55Z",
        "updated_at": "2017-10-04T11:14:41Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "Demonstrated at http://jsfiddle.net/xnhzvdoa/1/; open the error console and you should see this:\n\n```\nUncaught Error: Invariant Violation: addComponentAsRefTo(...): Only a ReactOwner can have refs. This usually means that you're trying to add a ref to a component that doesn't have an owner (that is, was not created inside of another component's `render` method). Try rendering this component inside of a new top-level component which will hold the ref.\n```\n\n---\n\n``` js\nvar Bug = React.createClass({\n    render: function() {\n        var html = React.renderToStaticMarkup(React.DOM.img());\n        return React.DOM.div({ ref: 'ref' }, html);\n    }\n});\nBug = React.createFactory(Bug);\n\nReact.render(Bug(), document.body);\n```\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/3398",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/3398/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/3398/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/3398/events",
        "html_url": "https://github.com/facebook/react/issues/3398",
        "id": 60965610,
        "number": 3398,
        "title": "Implement Sideways Data Loading",
        "user": {
            "login": "sebmarkbage",
            "id": 63648,
            "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sebmarkbage",
            "html_url": "https://github.com/sebmarkbage",
            "followers_url": "https://api.github.com/users/sebmarkbage/followers",
            "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
            "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
            "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
            "repos_url": "https://api.github.com/users/sebmarkbage/repos",
            "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 739777675,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Component%20API",
                "name": "Component: Component API",
                "color": "d4c5f9",
                "default": false
            },
            {
                "id": 270986513,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Big%20Picture",
                "name": "Type: Big Picture",
                "color": "61dafb",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 135,
        "created_at": "2015-03-13T02:37:05Z",
        "updated_at": "2017-12-14T01:52:27Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "This is a first-class API for sideways data loading of stateless (although potentially memoized) data from a global store/network/resource, potentially using props/state as input.\n\n``` js\ntype RecordOfObservables = { [key:string]: Observable<mixed> };\n\nclass Foo {\n\n  observe(): RecordOfObservables {\n    return {\n      myContent: xhr(this.props.url)\n    };\n  }\n\n  render() {\n    var myContent : ?string = this.data.myContent;\n    return <div>{myContent}</div>;\n  }\n\n}\n```\n\nobserve() executes after componentWillMount/componentWillUpdate but before render.\n\nFor each key/value in the record. Subscribe to the Observable in the value.\n\n``` js\nsubscription = observable.subscribe({ onNext: handleNext });\n```\n\nWe allow onNext to be synchronously invoked from subscribe. If it is, we set:\n\n``` js\nthis.data[key] = nextValue;\n```\n\nOtherwise we leave it as undefined for the initial render. (Maybe we set it to null?)\n\nThen render proceeds as usual.\n\nEvery time onNext gets invoked, we schedule a new \"this.data[key]\" which effectively triggers a forcedUpdate on this component. If this is the only change, then observe is not reexecuted (componentWillUpdate -> render -> componentDidUpdate).\n\nIf props / state changed (i.e. an update from recieveProps or setState), then observe() is reexecuted (during reconciliation).\n\nAt this point we loop over the new record, and subscribe to all the new Observables.\n\nAfter that, unsubscribe to the previous Observables.\n\n``` js\nsubscription.dispose();\n```\n\nThis ordering is important since it allows the provider of data to do reference counting of their cache. I.e. I can cache data for as long as nobody listens to it. If I unsubscribed immediately, then the reference count would go down to zero before I subscribe to the same data again.\n\nWhen a component is unmounted, we automatically unsubscribe from all the active subscriptions.\n\nIf the new subscription didn't immediately call onNext, then we will keep using the previous value.\n\nSo if my `this.props.url` from my example changes, and I'm subscribing to a new URL, myContent will keep showing the content of the previous url until the next url has fully loaded.\n\nThis has the same semantics as the `<img />` tag. We've seen that, while this can be confusing and lead to inconsistencies it is a fairly sane default, and it is easier to make it show a spinner than it would be to have the opposite default.\n\nBest practice might be to immediately send a \"null\" value if you don't have the data cached. Another alternative is for an Observable to provide both the URL (or ID) and the content in the result.\n\n``` js\nclass Foo {\n\n  observe() {\n    return {\n      user: loadUser(this.props.userID)\n    };\n  }\n\n  render() {\n    if (this.data.user.id !== this.props.userID) {\n      // Ensure that we never show inconsistent userID / user.name combinations.\n      return <Spinner />;\n    }\n    return <div>Hello, {this.data.user.name} [{this.props.userID}]!</div>;\n  }\n\n}\n```\n\nWe should use the RxJS contract of Observable since that is more in common use and allows synchronous execution, but once @jhusain's proposal is in more common use, we'll switch to that contract instead.\n\n``` js\nvar subscription = observable.subscribe({ onNext, onError, onCompleted });\nsubscription.dispose();\n```\n\nWe can add more life-cycle hooks that respond to these events if necessary.\n\nNote: This concept allows sideways data to behave like \"behaviors\" - just like props. This means that we don't have to overload the notion state for these things. It allows for optimizations such as throwing away the data only to resubscribe later. It is restorable.\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/3751",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/3751/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/3751/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/3751/events",
        "html_url": "https://github.com/facebook/react/issues/3751",
        "id": 71134278,
        "number": 3751,
        "title": "React's blur may not have relatedTarget in IE 9-11 where it is supported.",
        "user": {
            "login": "dantman",
            "id": 53399,
            "avatar_url": "https://avatars2.githubusercontent.com/u/53399?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dantman",
            "html_url": "https://github.com/dantman",
            "followers_url": "https://api.github.com/users/dantman/followers",
            "following_url": "https://api.github.com/users/dantman/following{/other_user}",
            "gists_url": "https://api.github.com/users/dantman/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dantman/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dantman/subscriptions",
            "organizations_url": "https://api.github.com/users/dantman/orgs",
            "repos_url": "https://api.github.com/users/dantman/repos",
            "events_url": "https://api.github.com/users/dantman/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dantman/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 40929151,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
                "name": "Type: Bug",
                "color": "b60205",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 7,
        "created_at": "2015-04-26T23:20:12Z",
        "updated_at": "2018-04-27T14:09:52Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "body": "ReactBrowserEventEmitter has some handling for `onBlur` and `onFocus`.\n\nSee:\nhttps://github.com/facebook/react/blob/94a3b0f8a304202bb7c4cc32286e404ac3cc9464/src/browser/ReactBrowserEventEmitter.js#L262-L293\n\nReact will first check if it can trap `focus` with a capturing event using `addEventListener`. If it can't and the browser supports `focusin` then it will use `focusin`.\n\nHowever there is a problem with this pattern. Internet Explorer implements `relatedTarget` on `focusin` and `focusout` but it does not implement it in `focus` and `blur`. As of IE 9, IE supports addEventListener and trapping capturing events.\n\nThis means that IE 8 and before React will have `relatedTarget` on `onFocus` and `onBlur` handlers. But in IE 9-11 `relatedTarget` will be null in React's `onFocus` and `onBlur` handlers even though IE would support it if `focusin` and `focusout` had been used.\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/3760",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/3760/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/3760/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/3760/events",
        "html_url": "https://github.com/facebook/react/issues/3760",
        "id": 71418687,
        "number": 3760,
        "title": "Make ReactShallowRenderer.render act more similar to React",
        "user": {
            "login": "gaearon",
            "id": 810438,
            "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gaearon",
            "html_url": "https://github.com/gaearon",
            "followers_url": "https://api.github.com/users/gaearon/followers",
            "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
            "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
            "organizations_url": "https://api.github.com/users/gaearon/orgs",
            "repos_url": "https://api.github.com/users/gaearon/repos",
            "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gaearon/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 204945357,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Shallow%20Renderer",
                "name": "Component: Shallow Renderer",
                "color": "eb6420",
                "default": false
            },
            {
                "id": 121709921,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 7,
        "created_at": "2015-04-27T22:23:53Z",
        "updated_at": "2017-10-04T11:16:20Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "In my opinion,\n- `render` should return a component instance\n- calling `render` second time should unmount the previously mounted component if type or key is different\n\nDoes this make sense?\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/3789",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/3789/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/3789/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/3789/events",
        "html_url": "https://github.com/facebook/react/issues/3789",
        "id": 72081827,
        "number": 3789,
        "title": "TestUtils.renderIntoDocument doesn't function as expected in all browsers",
        "user": {
            "login": "ezequiel",
            "id": 368069,
            "avatar_url": "https://avatars3.githubusercontent.com/u/368069?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ezequiel",
            "html_url": "https://github.com/ezequiel",
            "followers_url": "https://api.github.com/users/ezequiel/followers",
            "following_url": "https://api.github.com/users/ezequiel/following{/other_user}",
            "gists_url": "https://api.github.com/users/ezequiel/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ezequiel/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ezequiel/subscriptions",
            "organizations_url": "https://api.github.com/users/ezequiel/orgs",
            "repos_url": "https://api.github.com/users/ezequiel/repos",
            "events_url": "https://api.github.com/users/ezequiel/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ezequiel/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 139734344,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Test%20Utils",
                "name": "Component: Test Utils",
                "color": "eb6420",
                "default": false
            },
            {
                "id": 121709921,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 9,
        "created_at": "2015-04-30T07:04:19Z",
        "updated_at": "2018-04-12T19:27:56Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "Hi,\n\nHere is my program ([jsfiddle](http://jsfiddle.net/w9dphLfc/2/)):\n\n``` jsx\nvar Input = React.createClass({\n    render: function() {\n        return (\n            <input \n                {...this.props}\n            />\n        );\n    }\n});\n\nvar TestUtils = React.addons.TestUtils;\nvar inputInstance = \n        TestUtils.renderIntoDocument(\n            <Input\n                value='abc'\n            />\n        );\n\nvar inputDOMNode = React.findDOMNode(inputInstance);\n\ninputDOMNode.focus();\n\n// Place cursor at the end.\ninputDOMNode.setSelectionRange(3, 3);\n\n// Should log 3 twice.\nconsole.log(inputDOMNode.selectionStart);\nconsole.log(inputDOMNode.selectionEnd);\n```\n\n**Problem**: `0` is logged twice in Chrome and Firefox.\n**What I expected**: `3` is logged twice. We see this in Safari.\n\nThe interesting part is if we use `React.render(..., document.body)` instead of `TestUtils.renderIntoDocument` the program works as expected. \n\nI am using:\n- Chrome 42.0.2311.135\n- Firefox 37.0.2\n- Safari  8.0.5 (10600.5.17)\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/3879",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/3879/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/3879/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/3879/events",
        "html_url": "https://github.com/facebook/react/issues/3879",
        "id": 76405731,
        "number": 3879,
        "title": "Unnecessary encoding of element text content",
        "user": {
            "login": "mikecardwell",
            "id": 330908,
            "avatar_url": "https://avatars3.githubusercontent.com/u/330908?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mikecardwell",
            "html_url": "https://github.com/mikecardwell",
            "followers_url": "https://api.github.com/users/mikecardwell/followers",
            "following_url": "https://api.github.com/users/mikecardwell/following{/other_user}",
            "gists_url": "https://api.github.com/users/mikecardwell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mikecardwell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mikecardwell/subscriptions",
            "organizations_url": "https://api.github.com/users/mikecardwell/orgs",
            "repos_url": "https://api.github.com/users/mikecardwell/repos",
            "events_url": "https://api.github.com/users/mikecardwell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mikecardwell/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 332720629,
                "url": "https://api.github.com/repos/facebook/react/labels/HTML",
                "name": "HTML",
                "color": "f7c6c7",
                "default": false
            },
            {
                "id": 40929153,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement",
                "name": "Type: Enhancement",
                "color": "84b6eb",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 3,
        "created_at": "2015-05-14T16:03:19Z",
        "updated_at": "2017-10-04T11:24:01Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "Given the following piece of code:\n\n``` javascript\nlet some_text = 'Hello\"<>&\\'World';\nReact.render(<div>{some_text}</div>, somewhere);\n```\n\nReact replaces the angle brackets, quotation mark, apostrophe and ampersands with their HTML entities, ie &amp;lt; &amp;gt; &amp;quot; &amp;amp; etc. I don't believe it is necessary to replace the quotation mark or the apostrophe. They don't need escaping. They would only need escaping when used in an attribute, not when used as the text content of an element.\n\nThe reason I noticed this is because I'm trying to encode some JSON into a HTML element on the server side which can then be read back by the client side javascript. JSON contains a lot of double quotation marks and they're all being needlessly replaced by &amp;quot;'s\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/3926",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/3926/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/3926/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/3926/events",
        "html_url": "https://github.com/facebook/react/issues/3926",
        "id": 78854591,
        "number": 3926,
        "title": "Change event fires too many times when inputing Chinese characters.",
        "user": {
            "login": "chenxsan",
            "id": 1091472,
            "avatar_url": "https://avatars1.githubusercontent.com/u/1091472?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/chenxsan",
            "html_url": "https://github.com/chenxsan",
            "followers_url": "https://api.github.com/users/chenxsan/followers",
            "following_url": "https://api.github.com/users/chenxsan/following{/other_user}",
            "gists_url": "https://api.github.com/users/chenxsan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/chenxsan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/chenxsan/subscriptions",
            "organizations_url": "https://api.github.com/users/chenxsan/orgs",
            "repos_url": "https://api.github.com/users/chenxsan/repos",
            "events_url": "https://api.github.com/users/chenxsan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/chenxsan/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 40929151,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
                "name": "Type: Bug",
                "color": "b60205",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 26,
        "created_at": "2015-05-21T06:30:30Z",
        "updated_at": "2018-05-01T01:31:41Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "When I was trying this [example](https://jsfiddle.net/reactjs/n47gckhr/light/) from https://facebook.github.io/react/blog/2013/11/05/thinking-in-react.html, any Chinese characters inputted by Chinese pinyin input method would fire too many renders like:\n\n![screen shot 2015-05-21 at 14 04 36](https://cloud.githubusercontent.com/assets/1091472/7742565/2c8625b0-ffc3-11e4-8ac2-d7eb22a3aef3.png)\n\nActually I would expect those not to fire before I confirm the Chinese character.\n\nThen I tried another kind of input method - wubi input method, I got this:\n\n![screen shot 2015-05-21 at 14 17 15](https://cloud.githubusercontent.com/assets/1091472/7742657/42c27bac-ffc4-11e4-8a3a-7d4550e88a59.png)\n\nIt's weird too. So I did a test [in jQuery](http://jsbin.com/yepogahobo/1/edit?html,js,console,output):\n\n![screen shot 2015-05-21 at 14 05 12](https://cloud.githubusercontent.com/assets/1091472/7742591/71da6842-ffc3-11e4-9d7a-a8438721029c.png)\n\nOnly after I press the space bar to confirm the character, the `keyup` event would fire.\n\nI know it might be different between the implementation of jQuery `keyup` and react `onChange` , but I would expect the way how jQuery `keyup` handles Chinese characters instead of react's `onChange`.\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/3951",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/3951/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/3951/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/3951/events",
        "html_url": "https://github.com/facebook/react/issues/3951",
        "id": 80383680,
        "number": 3951,
        "title": "ReactTestUtils: rename find*/scry* pairs to findOne*/findAll* or similar?",
        "user": {
            "login": "jamesmanning",
            "id": 225626,
            "avatar_url": "https://avatars1.githubusercontent.com/u/225626?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jamesmanning",
            "html_url": "https://github.com/jamesmanning",
            "followers_url": "https://api.github.com/users/jamesmanning/followers",
            "following_url": "https://api.github.com/users/jamesmanning/following{/other_user}",
            "gists_url": "https://api.github.com/users/jamesmanning/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jamesmanning/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jamesmanning/subscriptions",
            "organizations_url": "https://api.github.com/users/jamesmanning/orgs",
            "repos_url": "https://api.github.com/users/jamesmanning/repos",
            "events_url": "https://api.github.com/users/jamesmanning/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jamesmanning/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 139734344,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Test%20Utils",
                "name": "Component: Test Utils",
                "color": "eb6420",
                "default": false
            },
            {
                "id": 40929153,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement",
                "name": "Type: Enhancement",
                "color": "84b6eb",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 4,
        "created_at": "2015-05-25T04:30:56Z",
        "updated_at": "2017-10-04T11:24:58Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "Outside of the [relatively unknown word \"scry\"](https://twitter.com/angustweets/status/590659867926462465) being used, it's difficult for someone to tell just by name how these differ.  \n\nThe current names seem to be based on the original JX.DOM.scry api usage based on #3278 so likely made more sense internally, but as with the person that filed #2301 it would be much more discoverable and easier to use with names that were more obvious for what they do.\n\nFor back compat reasons, renaming them and then adding the existing names as pointers with comments/jsdoc saying they're deprecated probably makes more sense, IMHO.\n\nThanks!\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/3965",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/3965/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/3965/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/3965/events",
        "html_url": "https://github.com/facebook/react/issues/3965",
        "id": 81424043,
        "number": 3965,
        "title": "Support for reparenting",
        "user": {
            "login": "dantman",
            "id": 53399,
            "avatar_url": "https://avatars2.githubusercontent.com/u/53399?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dantman",
            "html_url": "https://github.com/dantman",
            "followers_url": "https://api.github.com/users/dantman/followers",
            "following_url": "https://api.github.com/users/dantman/following{/other_user}",
            "gists_url": "https://api.github.com/users/dantman/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dantman/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dantman/subscriptions",
            "organizations_url": "https://api.github.com/users/dantman/orgs",
            "repos_url": "https://api.github.com/users/dantman/repos",
            "events_url": "https://api.github.com/users/dantman/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dantman/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 739777675,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Component%20API",
                "name": "Component: Component API",
                "color": "d4c5f9",
                "default": false
            },
            {
                "id": 121709921,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 24,
        "created_at": "2015-05-27T12:14:07Z",
        "updated_at": "2018-03-12T09:25:12Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "body": "When writing a component that contains a set of large subtrees that stay relatively the same, but are simply moved around such that React's virtual DOM diffing can't detect the movement, React will end up recreating huge trees it should simply be moving.\n\nFor example, pretend `blockA` and `blockB` are very large structures. They may be made of several levels of children and components. For example one could be the entire page contents and the other the sidebar, while this `render()` is the page root.\n\n``` jsx\nrender() {\n    var blockA = <div>AAA</div>,\n        blockB = <div>BBB</div>;\n\n    if ( this.props.layoutA ) {\n        return <div>\n            <div className=\"something\">{blockB}</div>\n            <div className=\"something\">{blockA}</div>\n        </div>;\n    } else {\n        return <div>\n            {blockA}\n            {blockB}\n        </div>;\n    }\n}\n```\n\nBecause the blocks aren't at the same level React cannot see the relation between these blocks and `key` cannot be used to give React any hints. As a result, when `layoutA` is changed, instead of the two blocks being moved to their new location the entire page is essentially completely unrendered and then re-rendered from scratch.\n\nI understand why this is the case. It would be far to expensive for React to be able to detect movement of nodes like this.\n\nBut I do believe we need a pattern to hint to React that this component has large blocks that may be moved around at different levels.\n\nNote that there may be a component in between the rendering component root and the block. So parent semantics scoped to the nearest component won't work. This'll need owner scoping.\n\nI understand that React is trying to eliminate the need for React.createElement to be used and owner scoping within special attributes interferes with that. So instead of a component scoped `key=\"\"` variant I think a method/object style interface kind of like `React.addons.createFragment` might work.\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/4126",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/4126/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/4126/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/4126/events",
        "html_url": "https://github.com/facebook/react/issues/4126",
        "id": 88274857,
        "number": 4126,
        "title": "Add event that behaves similar to the native `change` event",
        "user": {
            "login": "dantman",
            "id": 53399,
            "avatar_url": "https://avatars2.githubusercontent.com/u/53399?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dantman",
            "html_url": "https://github.com/dantman",
            "followers_url": "https://api.github.com/users/dantman/followers",
            "following_url": "https://api.github.com/users/dantman/following{/other_user}",
            "gists_url": "https://api.github.com/users/dantman/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dantman/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dantman/subscriptions",
            "organizations_url": "https://api.github.com/users/dantman/orgs",
            "repos_url": "https://api.github.com/users/dantman/repos",
            "events_url": "https://api.github.com/users/dantman/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dantman/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 121709921,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 3,
        "created_at": "2015-06-15T00:29:02Z",
        "updated_at": "2017-10-04T11:28:08Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "body": "Because React has repurposed `onChange` to behave like `onInput` there is no way to get actual `change` event behaviour without binding a non-delegated native event in lifecycle events.\n\n`change` event behaviour is sometimes important to have. `input`-like behaviour does make sense for what React uses `onChange` for (live updating of state associated with `value=\"\"` and anything derived from it). But other use cases, like triggering an ajax post once a user has finished with an input, require the standard behaviour of `change` for text inputs where it is only fired after a user is finished with the input.\n\nThese use cases are reasonable to support within React. If `onChange` is going to be changed to behave in a non-standard way. Then we should add another custom non-standard event name that lets React elements bind to behaviour that is closer to how `change` behaves (with React's event delegation handling).\n\nEvent name ideas:\n- onChangeCommit(ted)\n- onCommit(ted)Change\n- onValueCommit(ted)\n- onCommitValue\n- onCommit?\n\nThe idea of using \"commit\" in the name comes from the HTML spec.\n\n> The change event fires when the value is committed, _[...]_\n\n~ Section [4.10.5.5 Common event behaviours](https://html.spec.whatwg.org/multipage/forms.html#event-input-input)\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/4153",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/4153/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/4153/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/4153/events",
        "html_url": "https://github.com/facebook/react/issues/4153",
        "id": 88921752,
        "number": 4153,
        "title": "Support Stateful Test Renderer",
        "user": {
            "login": "sebmarkbage",
            "id": 63648,
            "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sebmarkbage",
            "html_url": "https://github.com/sebmarkbage",
            "followers_url": "https://api.github.com/users/sebmarkbage/followers",
            "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
            "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
            "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
            "repos_url": "https://api.github.com/users/sebmarkbage/repos",
            "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 270986513,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Big%20Picture",
                "name": "Type: Big Picture",
                "color": "61dafb",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2015-06-17T06:03:11Z",
        "updated_at": "2015-10-09T18:13:39Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "The plan is to move unnecessary state out of the production renderer. Therefore there will be no public API to introspect the current state of the tree. I.e. no `_renderedChildren`, props inspection etc.\n\nThe React DevTools will maintain its own shadow tree for introspection / reflection purposes.\n\nHowever, this also means that if you use `React.render` to run deeply rendered unit tests, you will no longer be able to use various reflective APIs to inspect the state of the current React tree. Such as `ReactTestUtils.findAllInRenderedTree`, the legacy `reactComponentExpect` utils etc.\n\nOur recommended unit testing solution is shallow testing.\n\nHowever, it would be possible to create a new renderer that keeps track of the whole React tree, including props, and therefore reenables stateful unit testing. That might be a helpful upgrade path. E.g. something like `ReactTestUtils.render` which would have a forked version of the primary renderer.\n\nSee #4151\n\ncc @spicyj , @dataminr\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/4166",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/4166/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/4166/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/4166/events",
        "html_url": "https://github.com/facebook/react/issues/4166",
        "id": 89199826,
        "number": 4166,
        "title": "Use Inline Event Handlers for trapBubbledEventsLocal and the iOS Safari Click Hack",
        "user": {
            "login": "sebmarkbage",
            "id": 63648,
            "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sebmarkbage",
            "html_url": "https://github.com/sebmarkbage",
            "followers_url": "https://api.github.com/users/sebmarkbage/followers",
            "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
            "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
            "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
            "repos_url": "https://api.github.com/users/sebmarkbage/repos",
            "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 40929153,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement",
                "name": "Type: Enhancement",
                "color": "84b6eb",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2015-06-18T05:00:09Z",
        "updated_at": "2017-10-04T11:29:58Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "We currently do a lot of work at the end of mount to find all the nodes and attach listeners after the fact. This is severely impacting initial rendering performance of `<form />`, `<img />` and click handlers.\n\nInstead we can just use inline event handlers in the innerHTML string. For the iOS Safari hack it should be trivial. The handler doesn't even have to do anything.\n\nThe inline event handler would need to either redispatch the event, or call into some other event handler system. Probably a global listeners.\n\n``` js\nwindow._handleReactEvent = ...;\n```\n\n``` html\n<img onload=\"_handleReactEvent(event)\">\n```\n\nSince there could potentially be multiple Reacts, they should probably chain the handler if there already is one registered. (Although multiple Reacts in the same document is already pretty broken in this regard.)\n\nIt doesn't have to be a global. Since inline event handlers gets the element added as a `with(element)` scope around itself. It is equivalent to add it to the prototype:\n\n``` js\nElement.prototype._handleReactEvent = ...;\n```\n\nor\n\n``` js\nHTMLImgElement.prototype._handleReactEvent = ...;\n```\n\nThis makes them a bit more hidden, unobtrusive.\n\nWe still need to render this string for server-side rendering to avoid needing to change the HTML or wire up handlers after-the-fact on the client.\n\nSince these events can fire before React has loaded, we need to check for the existence of the handler before it is used.\n\n``` js\n<img onload=\"this._handleReactEvent&&_handleReactEvent(event)\">\n```\n\nIt is critical that this string is short - for innerHTML string concat performance and network performance. Yet it needs to be unlikely to collide with anything else.\n\nIs there a unicode character we could use?\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/4251",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/4251/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/4251/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/4251/events",
        "html_url": "https://github.com/facebook/react/issues/4251",
        "id": 91845283,
        "number": 4251,
        "title": "mouseenter fires on disabled inputs whereas mouseleave does not",
        "user": {
            "login": "jquense",
            "id": 339286,
            "avatar_url": "https://avatars2.githubusercontent.com/u/339286?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jquense",
            "html_url": "https://github.com/jquense",
            "followers_url": "https://api.github.com/users/jquense/followers",
            "following_url": "https://api.github.com/users/jquense/following{/other_user}",
            "gists_url": "https://api.github.com/users/jquense/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jquense/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jquense/subscriptions",
            "organizations_url": "https://api.github.com/users/jquense/orgs",
            "repos_url": "https://api.github.com/users/jquense/repos",
            "events_url": "https://api.github.com/users/jquense/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jquense/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 40929151,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
                "name": "Type: Bug",
                "color": "b60205",
                "default": false
            },
            {
                "id": 877481224,
                "url": "https://api.github.com/repos/facebook/react/labels/mentorship",
                "name": "mentorship",
                "color": "3B5998",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 29,
        "created_at": "2015-06-29T16:05:38Z",
        "updated_at": "2018-03-23T17:11:29Z",
        "closed_at": null,
        "author_association": "COLLABORATOR",
        "body": "There is an asymmetry to EnterLeave event plugin. Since `mouseenter` is created from the relativeTarget of the `mouseout` event it fires even though the target is disabled. Since the `mouseleave` is the inverse, i.e requires that the disabled element fire a mouseout, it doesn't fire a `mouseleave` for the disabled element.\n\nI am pretty sure the correct behavior here is that neither event should fire if its target is disabled, since this mirrors `mouseout`. No idea if none-chrome browsers have the same behavior for which mouse events fire on disabled elements.\n\nAdditional caveat I just realized, React is probably also not firing `mousenter` events in the case where the mouse leaves a disabled element into a non disabled element\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/4293",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/4293/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/4293/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/4293/events",
        "html_url": "https://github.com/facebook/react/issues/4293",
        "id": 93114294,
        "number": 4293,
        "title": "Apps that mount over isomorphically rendered forms aren't aware of early input",
        "user": {
            "login": "d4goxn",
            "id": 3030411,
            "avatar_url": "https://avatars1.githubusercontent.com/u/3030411?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/d4goxn",
            "html_url": "https://github.com/d4goxn",
            "followers_url": "https://api.github.com/users/d4goxn/followers",
            "following_url": "https://api.github.com/users/d4goxn/following{/other_user}",
            "gists_url": "https://api.github.com/users/d4goxn/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/d4goxn/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/d4goxn/subscriptions",
            "organizations_url": "https://api.github.com/users/d4goxn/orgs",
            "repos_url": "https://api.github.com/users/d4goxn/repos",
            "events_url": "https://api.github.com/users/d4goxn/events{/privacy}",
            "received_events_url": "https://api.github.com/users/d4goxn/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 710332294,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Server%20Rendering",
                "name": "Component: Server Rendering",
                "color": "d4c5f9",
                "default": false
            },
            {
                "id": 121709921,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 10,
        "created_at": "2015-07-05T14:09:44Z",
        "updated_at": "2017-10-04T11:32:06Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "Consider the following scenario (or [run it](https://github.com/d4goxn/iso-form-issue-repro)), in a simple isomorphic app that consists of a single-input form.\n1. A form is rendered on the server with existing data and sent to the browser, along with dehydrated state\n2. The user edits the form\n3. The browser loads the app, slowly, which rehydrates its state and bootstraps over the form\n4. The user hits a save button\n\nAt this point, React has found no reason to rerender the form or throw a warning, even though the values of the form elements have been updated by the user before the app was listening to them. As a result, app state is out of sync with form input values. The user has just re-saved their old data (app state), but sees their new data (form values). If they leave, they lose their changes even though it appears that they just successfully saved.\n\nI have decided to solve the problem by putting a ref on every form input, and copying their values into app state on `componentDidMount`. I can probably make the solution a little more DRY than that sounds at first.\n\nI'm thinking that a better solution might be to have React include input values in the checksums. Is there a technical reason why this is not how isomorphic rendering already works?\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/4302",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/4302/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/4302/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/4302/events",
        "html_url": "https://github.com/facebook/react/issues/4302",
        "id": 93296053,
        "number": 4302,
        "title": "Add hooks into the warning output for unit tests and other use cases",
        "user": {
            "login": "glenjamin",
            "id": 151272,
            "avatar_url": "https://avatars1.githubusercontent.com/u/151272?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/glenjamin",
            "html_url": "https://github.com/glenjamin",
            "followers_url": "https://api.github.com/users/glenjamin/followers",
            "following_url": "https://api.github.com/users/glenjamin/following{/other_user}",
            "gists_url": "https://api.github.com/users/glenjamin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/glenjamin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/glenjamin/subscriptions",
            "organizations_url": "https://api.github.com/users/glenjamin/orgs",
            "repos_url": "https://api.github.com/users/glenjamin/repos",
            "events_url": "https://api.github.com/users/glenjamin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/glenjamin/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 139653724,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Core%20Utilities",
                "name": "Component: Core Utilities",
                "color": "c5def5",
                "default": false
            },
            {
                "id": 121709921,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": {
            "login": "bvaughn",
            "id": 29597,
            "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bvaughn",
            "html_url": "https://github.com/bvaughn",
            "followers_url": "https://api.github.com/users/bvaughn/followers",
            "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
            "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
            "organizations_url": "https://api.github.com/users/bvaughn/orgs",
            "repos_url": "https://api.github.com/users/bvaughn/repos",
            "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bvaughn/received_events",
            "type": "User",
            "site_admin": false
        },
        "assignees": [
            {
                "login": "bvaughn",
                "id": 29597,
                "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/bvaughn",
                "html_url": "https://github.com/bvaughn",
                "followers_url": "https://api.github.com/users/bvaughn/followers",
                "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
                "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
                "organizations_url": "https://api.github.com/users/bvaughn/orgs",
                "repos_url": "https://api.github.com/users/bvaughn/repos",
                "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
                "received_events_url": "https://api.github.com/users/bvaughn/received_events",
                "type": "User",
                "site_admin": false
            }
        ],
        "milestone": null,
        "comments": 23,
        "created_at": "2015-07-06T14:43:22Z",
        "updated_at": "2018-01-02T13:59:28Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "body": "I'd like to configure my testsuite to fail if there are any react warnings triggered.\n\nI'm currently using a variant on this SO answer http://stackoverflow.com/questions/29651950/karma-and-react-have-warnings-to-cause-errors\n\n``` js\nconsole.warn = (function(warn) {\n  return function(msg) {\n\n    // Detect react warnings & error\n    if (/^Warning: /.test(msg)) {\n      throw new Error(\"React \" + msg);\n    }\n\n    return warn.apply(this, arguments);\n  };\n})(console.warn);\n```\n\nThis basically works, but has a problem because there's some global-state memoisation in the code which triggers warning to try not to trigger too often:\nhttps://github.com/facebook/react/blob/500d4c3f8779bce7c7dde129eb2fec9e901cf5ae/src/isomorphic/classic/element/ReactElementValidator.js#L46\n\nCould we provide a way to clear this state, or even better a supported API for opt-in erroring on warnings?\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/4313",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/4313/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/4313/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/4313/events",
        "html_url": "https://github.com/facebook/react/issues/4313",
        "id": 93666932,
        "number": 4313,
        "title": "Keyboard selection doesn't fire onChange for <select> in Firefox",
        "user": {
            "login": "insin",
            "id": 226692,
            "avatar_url": "https://avatars1.githubusercontent.com/u/226692?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/insin",
            "html_url": "https://github.com/insin",
            "followers_url": "https://api.github.com/users/insin/followers",
            "following_url": "https://api.github.com/users/insin/following{/other_user}",
            "gists_url": "https://api.github.com/users/insin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/insin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/insin/subscriptions",
            "organizations_url": "https://api.github.com/users/insin/orgs",
            "repos_url": "https://api.github.com/users/insin/repos",
            "events_url": "https://api.github.com/users/insin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/insin/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 40929153,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement",
                "name": "Type: Enhancement",
                "color": "84b6eb",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2015-07-08T01:17:13Z",
        "updated_at": "2017-10-04T11:32:57Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "Related bug in Bugzilla: https://bugzilla.mozilla.org/show_bug.cgi?id=126379\n\nMy [workaround for this is to use onKeyDown](https://gist.github.com/insin/c2a00a7e85ccfab0e7c7), allowing the selection to change then calling an `onChange` handler manually, but this won't bubble..\n\nIs this something `ChangeEventPlugin` could support?\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/4448",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/4448/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/4448/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/4448/events",
        "html_url": "https://github.com/facebook/react/issues/4448",
        "id": 96401594,
        "number": 4448,
        "title": "Deferred componentDidMount inside Component Tree",
        "user": {
            "login": "aleskafka",
            "id": 1120895,
            "avatar_url": "https://avatars0.githubusercontent.com/u/1120895?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/aleskafka",
            "html_url": "https://github.com/aleskafka",
            "followers_url": "https://api.github.com/users/aleskafka/followers",
            "following_url": "https://api.github.com/users/aleskafka/following{/other_user}",
            "gists_url": "https://api.github.com/users/aleskafka/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/aleskafka/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/aleskafka/subscriptions",
            "organizations_url": "https://api.github.com/users/aleskafka/orgs",
            "repos_url": "https://api.github.com/users/aleskafka/repos",
            "events_url": "https://api.github.com/users/aleskafka/events{/privacy}",
            "received_events_url": "https://api.github.com/users/aleskafka/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 739777675,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Component%20API",
                "name": "Component: Component API",
                "color": "d4c5f9",
                "default": false
            },
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 121709921,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 8,
        "created_at": "2015-07-21T19:44:10Z",
        "updated_at": "2018-01-02T13:29:17Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "**Problem:** I have DOM Elements outside of main DOM Document, where I want to render my React components. When done, some of the original elements will be mounted into main DOM Document. I need to delay `componentDidMount` and schedule it after components are inside main DOM Document.\n\n**Reason:** Mainly because I have some logic inside `componentDidMount` that works with offsets of Element (e.g. controls lazy loading of images). When invoked in seperate DOM, component have wrong idea about where it is on screen.\n\nIs it possible with current version of React (or 0.14) to achieve behaviour, where componentDidMount transaction is invoked later, after I give a signal to root Component? Or will future refactoring allow this use case?\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/4557",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/4557/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/4557/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/4557/events",
        "html_url": "https://github.com/facebook/react/issues/4557",
        "id": 99054670,
        "number": 4557,
        "title": "Support the camelCase version of webkitTransform as well",
        "user": {
            "login": "probablyup",
            "id": 570070,
            "avatar_url": "https://avatars2.githubusercontent.com/u/570070?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/probablyup",
            "html_url": "https://github.com/probablyup",
            "followers_url": "https://api.github.com/users/probablyup/followers",
            "following_url": "https://api.github.com/users/probablyup/following{/other_user}",
            "gists_url": "https://api.github.com/users/probablyup/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/probablyup/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/probablyup/subscriptions",
            "organizations_url": "https://api.github.com/users/probablyup/orgs",
            "repos_url": "https://api.github.com/users/probablyup/repos",
            "events_url": "https://api.github.com/users/probablyup/events{/privacy}",
            "received_events_url": "https://api.github.com/users/probablyup/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 121709921,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 3,
        "created_at": "2015-08-04T20:26:20Z",
        "updated_at": "2017-10-04T11:40:07Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "body": "Although `node.style.WebkitTransform` (PascalCase) does work in Safari, the actual property is `node.style.webkitTransform` (camelCase) which React doesn't support properly. Can an alias be added to handle this case, since it doesn't seem obvious?\n\nIn fact, Safari's inspector autocomplete doesn't even work for `node.style.WebkitTransform` - seems like it's a hack that it works.\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/4593",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/4593/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/4593/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/4593/events",
        "html_url": "https://github.com/facebook/react/issues/4593",
        "id": 100145359,
        "number": 4593,
        "title": "Include DevTools as Public API",
        "user": {
            "login": "sebmarkbage",
            "id": 63648,
            "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sebmarkbage",
            "html_url": "https://github.com/sebmarkbage",
            "followers_url": "https://api.github.com/users/sebmarkbage/followers",
            "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
            "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
            "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
            "repos_url": "https://api.github.com/users/sebmarkbage/repos",
            "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 270986513,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Big%20Picture",
                "name": "Type: Big Picture",
                "color": "61dafb",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 4,
        "created_at": "2015-08-10T19:13:05Z",
        "updated_at": "2015-11-13T22:37:37Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "The idea is to have a multi-version extension that allow you to attach a \"debugger\" to a running React instance. This debugger protocol injects intercepted functions into a particular version of React which exposes development hooks.\n\nEffectively this: https://github.com/facebook/react-devtools/tree/devtools-next/backend/integration\n\nThis is not intended to expose stateful reflection APIs in production use since it will negatively affect performance.\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/4594",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/4594/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/4594/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/4594/events",
        "html_url": "https://github.com/facebook/react/issues/4594",
        "id": 100158031,
        "number": 4594,
        "title": "Hibernating State (Not Necessarily Serialized)",
        "user": {
            "login": "sebmarkbage",
            "id": 63648,
            "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sebmarkbage",
            "html_url": "https://github.com/sebmarkbage",
            "followers_url": "https://api.github.com/users/sebmarkbage/followers",
            "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
            "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
            "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
            "repos_url": "https://api.github.com/users/sebmarkbage/repos",
            "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 270986513,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Big%20Picture",
                "name": "Type: Big Picture",
                "color": "61dafb",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2015-08-10T20:09:41Z",
        "updated_at": "2015-10-12T19:51:09Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "Relay and others currently abuses some internals to get some persistent identity of a component. This effectively is used to restore the state of a component after it has been temporarily unmounted. It is also common to abuse Flux stores for this use case. Basically, since this capability doesn't currently exists, you're encouraged to use Flux for everything just in case you need this capability later on.\n\nThe purpose of this issue is to discuss a public API for hibernating the state of a component and then restoring it once the component remounts.\n\nThe use cases can be broken down into three scenarios:\n- **List Item Out of View**:  E.g. Infinite scrolling (such as \"table views\") where one row eventually needs to be reclaimed to save the memory used by the tree that is out of view.\n- **Detail View**: In a master-detail view, clicking one item in the list switches the state of the detail view. When you click on the original view again.\n- **Back/Forward Button**: You want to save a snapshot of the state when you navigate. The new view can then change the state and when you hit the back button to return to a previous state, you want to restore the original state of the subtree.\n\nWe would like to support this at least in a non-serialized form. You could imagine having an API that serializes this to JSON or some other data structure too but that's a potential follow up and not necessarily part of this.\n\nOne potential API:\n\n``` js\nclass View {\n  state = { stateKeys: [{}, {}, {}] }\n  render() {\n    return <ChildView key={this.state.stateKeys[this.props.index]} />;\n  }\n}\n```\n\nBasically, an object is used as a key. Unlike the normal key semantics, the state of the subtree is kept in memory indefinitely. We use a WeakMap to keep the state. If the object ever goes away, the GC will collect the state of that subtree. This solves all three use cases.\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/4595",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/4595/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/4595/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/4595/events",
        "html_url": "https://github.com/facebook/react/issues/4595",
        "id": 100162479,
        "number": 4595,
        "title": "Umbrella: Externalize the State Tree (or alternatives)",
        "user": {
            "login": "sebmarkbage",
            "id": 63648,
            "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sebmarkbage",
            "html_url": "https://github.com/sebmarkbage",
            "followers_url": "https://api.github.com/users/sebmarkbage/followers",
            "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
            "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
            "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
            "repos_url": "https://api.github.com/users/sebmarkbage/repos",
            "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 270986513,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Big%20Picture",
                "name": "Type: Big Picture",
                "color": "61dafb",
                "default": false
            },
            {
                "id": 710615342,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Umbrella",
                "name": "Type: Umbrella",
                "color": "5319e7",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 36,
        "created_at": "2015-08-10T20:32:19Z",
        "updated_at": "2017-10-04T16:37:15Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "React provides the notion of implicitly allowing a child component to store state (using the `setState` functionality). However, it is not just used for business logic state. It is also used to remember DOM state, or tiny ephemeral state such as scroll position, text selection etc. It is also used for temporary state such as memoization.\n\nThis is kind of a magic black box in React and the implementation details are largely hidden. People tend to reinvent the wheel because of it, and invent their own state management systems. E.g. using Flux.\n\nThere is still plenty of use cases for Flux, but not all state belongs in Flux stores.\n\nManually managing the adding/removing of state nodes for all of this becomes a huge burden. So, regardless you're not going to keep doing this manually, you'll end up with your own system that does something similar. We need a convenient and standard way to handle this across components. This is not something that should be 100% in user space because then components won't be able to integrate well with each other. Even if you think you're not using it, because you're not calling setState, you still are relying on the capability being there.\n\nIt undermines the ecosystem and eventually everyone will reconverge on a single external state library anyway. We should just make sure that gets baked into React.\n\nWe designed the state tree so that the state tree data structure would be opaque so that we can optimize the internals in clever ways. It blocks many anti-patterns where external users breaks through the encapsulation boundaries to touch someone else's state. That's exactly the problem React's programming model tries to address.\n\nHowever, unfortunately this state tree is opaque to end users. This means that there are a bunch of legitimate use cases are not available to external libraries. E.g. undo/redo, reclaiming memory, restoring state between sessions, debugging tools, hot reloading, moving state from server to the client and more.\n\nWe could provide a standard externalized state-tree. E.g. using an immutable-js data structure. However, that might make clever optimizations and future features more difficult to adopt. It also isn't capable of fully encapsulating the true state of the tree which may include DOM state, it may be ok to treat this state differently as a heuristic but the API need to account for it. It also doesn't allow us to enforce a certain level of encapsulation between components.\n\nAnother approach is to try to add support for more use cases to React, one-by-one until the external state tree doesn't become useful anymore. I've created separate issues for the ones we we're already planning on supporting:\n#4593 Debugger Hooks as Public API\n#4594 Hibernating State (not the serialized form)\n\nWhat else do we need?\n\nPinging some stake holders:\n\n@leebyron @swannodette @gaearon @yungsters @ryanflorence\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/4672",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/4672/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/4672/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/4672/events",
        "html_url": "https://github.com/facebook/react/issues/4672",
        "id": 102243539,
        "number": 4672,
        "title": "Change event does not fire in IE and Edge under certain circumstances",
        "user": {
            "login": "iclanzan",
            "id": 1806943,
            "avatar_url": "https://avatars1.githubusercontent.com/u/1806943?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/iclanzan",
            "html_url": "https://github.com/iclanzan",
            "followers_url": "https://api.github.com/users/iclanzan/followers",
            "following_url": "https://api.github.com/users/iclanzan/following{/other_user}",
            "gists_url": "https://api.github.com/users/iclanzan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/iclanzan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/iclanzan/subscriptions",
            "organizations_url": "https://api.github.com/users/iclanzan/orgs",
            "repos_url": "https://api.github.com/users/iclanzan/repos",
            "events_url": "https://api.github.com/users/iclanzan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/iclanzan/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 40929151,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
                "name": "Type: Bug",
                "color": "b60205",
                "default": false
            },
            {
                "id": 877481224,
                "url": "https://api.github.com/repos/facebook/react/labels/mentorship",
                "name": "mentorship",
                "color": "3B5998",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 3,
        "created_at": "2015-08-20T21:40:35Z",
        "updated_at": "2018-03-23T17:12:12Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "I have put together this [simple example](http://jsbin.com/cimirozeje/edit?js,console,output) to demonstrate the issue.\n\nThe problem is happening on `select` elements. If there are any mouse event listeners attached that would trigger a render, the `onChange` handler never gets called.\n\nIt looks like unlike other browsers, **IE** and **Edge** trigger mouse events on the `select` element when clicking on the options, but that should not prevent the `change` event from triggering.\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/4751",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/4751/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/4751/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/4751/events",
        "html_url": "https://github.com/facebook/react/issues/4751",
        "id": 104171157,
        "number": 4751,
        "title": "Play Nicely with The DOM Event System (because it's legacy anyway)",
        "user": {
            "login": "sebmarkbage",
            "id": 63648,
            "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sebmarkbage",
            "html_url": "https://github.com/sebmarkbage",
            "followers_url": "https://api.github.com/users/sebmarkbage/followers",
            "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
            "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
            "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
            "repos_url": "https://api.github.com/users/sebmarkbage/repos",
            "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 270986513,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Big%20Picture",
                "name": "Type: Big Picture",
                "color": "61dafb",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 11,
        "created_at": "2015-09-01T02:25:32Z",
        "updated_at": "2015-10-09T18:13:40Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "Currently React implements its own plugin system and event bubbling rules. This is important for systems like the responder system since the DOM event system is incapable of implementing proper event negotiation support.\n\nHowever, on desktop, we don't really take full advantage of our custom event system other than to polyfill mouseenter/leave and implement more bubbling.\n\nThere are plenty of other things that are wrong with the DOM but instead of patching it, maybe it would be better to build a new view system on top of the DOM that integrates with the custom event system. Similarly to how React Native handles things.\n\nThat way, the lowest level could just do what the DOM would do, however broken it may be.\n\nQuestion though: How do we handle things like onChange?\n\ncc @spicyj and @syranide since I know you always wanted this.\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/4854",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/4854/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/4854/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/4854/events",
        "html_url": "https://github.com/facebook/react/issues/4854",
        "id": 106091133,
        "number": 4854,
        "title": "Pressing spacebar on a checked radio button only fires click in some browsers",
        "user": {
            "login": "matchu",
            "id": 59218,
            "avatar_url": "https://avatars3.githubusercontent.com/u/59218?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/matchu",
            "html_url": "https://github.com/matchu",
            "followers_url": "https://api.github.com/users/matchu/followers",
            "following_url": "https://api.github.com/users/matchu/following{/other_user}",
            "gists_url": "https://api.github.com/users/matchu/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/matchu/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/matchu/subscriptions",
            "organizations_url": "https://api.github.com/users/matchu/orgs",
            "repos_url": "https://api.github.com/users/matchu/repos",
            "events_url": "https://api.github.com/users/matchu/events{/privacy}",
            "received_events_url": "https://api.github.com/users/matchu/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 40929151,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
                "name": "Type: Bug",
                "color": "b60205",
                "default": false
            },
            {
                "id": 877481224,
                "url": "https://api.github.com/repos/facebook/react/labels/mentorship",
                "name": "mentorship",
                "color": "3B5998",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": {
            "login": "aweary",
            "id": 6886061,
            "avatar_url": "https://avatars2.githubusercontent.com/u/6886061?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/aweary",
            "html_url": "https://github.com/aweary",
            "followers_url": "https://api.github.com/users/aweary/followers",
            "following_url": "https://api.github.com/users/aweary/following{/other_user}",
            "gists_url": "https://api.github.com/users/aweary/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/aweary/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/aweary/subscriptions",
            "organizations_url": "https://api.github.com/users/aweary/orgs",
            "repos_url": "https://api.github.com/users/aweary/repos",
            "events_url": "https://api.github.com/users/aweary/events{/privacy}",
            "received_events_url": "https://api.github.com/users/aweary/received_events",
            "type": "User",
            "site_admin": false
        },
        "assignees": [
            {
                "login": "aweary",
                "id": 6886061,
                "avatar_url": "https://avatars2.githubusercontent.com/u/6886061?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/aweary",
                "html_url": "https://github.com/aweary",
                "followers_url": "https://api.github.com/users/aweary/followers",
                "following_url": "https://api.github.com/users/aweary/following{/other_user}",
                "gists_url": "https://api.github.com/users/aweary/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/aweary/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aweary/subscriptions",
                "organizations_url": "https://api.github.com/users/aweary/orgs",
                "repos_url": "https://api.github.com/users/aweary/repos",
                "events_url": "https://api.github.com/users/aweary/events{/privacy}",
                "received_events_url": "https://api.github.com/users/aweary/received_events",
                "type": "User",
                "site_admin": false
            }
        ],
        "milestone": null,
        "comments": 2,
        "created_at": "2015-09-11T20:48:01Z",
        "updated_at": "2018-04-13T13:57:49Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "body": "http://jsbin.com/yiyusuwuco/1/edit?js,console,output\n1. Focus the textbox.\n2. Press shift-tab to move focus into the radio button group.\n3. Press spacebar to check the radio button.\n   - Observe a click event in the console.\n4. Press spacebar to redundantly check the radio button.\n   - In Chrome 45.0.2454.85 (64-bit, OSX), observe no additional click event in the console.\n   - In Firefox 40.0.3 (OSX), observe an additional click event in the console.\n\nThis is entirely the browsers' fault, but, since React's Synthetic Event system is trying to fully normalize inconsistencies like this, here's an obscure one for the list :/\n\nI, at least, prefer Firefox's behavior: I expect real clicks and synthetic (keyboard-originated) clicks to have the same conditions for firing.\n\n(Incidentally, this feels to me like it might've been an accident in Chrome rather than an explicit decision. Is there some place to file this bug with them? I feel like that's pretty pie-in-the-sky, though ;P)\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/4867",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/4867/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/4867/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/4867/events",
        "html_url": "https://github.com/facebook/react/issues/4867",
        "id": 106363480,
        "number": 4867,
        "title": "[Children] filter null values in map function",
        "user": {
            "login": "yordis",
            "id": 4237280,
            "avatar_url": "https://avatars0.githubusercontent.com/u/4237280?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/yordis",
            "html_url": "https://github.com/yordis",
            "followers_url": "https://api.github.com/users/yordis/followers",
            "following_url": "https://api.github.com/users/yordis/following{/other_user}",
            "gists_url": "https://api.github.com/users/yordis/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/yordis/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/yordis/subscriptions",
            "organizations_url": "https://api.github.com/users/yordis/orgs",
            "repos_url": "https://api.github.com/users/yordis/repos",
            "events_url": "https://api.github.com/users/yordis/events{/privacy}",
            "received_events_url": "https://api.github.com/users/yordis/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 139653724,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Core%20Utilities",
                "name": "Component: Core Utilities",
                "color": "c5def5",
                "default": false
            },
            {
                "id": 121709921,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 10,
        "created_at": "2015-09-14T15:11:04Z",
        "updated_at": "2017-10-04T11:41:36Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "Currently I am implementing some `Dropdown` component and I have something like this.\n\n``` jsx\nreturn (\n  <div className={classnames(classes)} tabIndex=\"-1\">\n    {Children.map(children, this.render_child)}\n  </div>\n)\n\n...\n\n@autobind\nrender_child(element, index) {\n  return cloneElement(element, {\n    key: element.key || index,\n    selected: this.props.selected,\n    onClick: this.click_handler\n  })\n}\n```\n\nThe business requirement put me in this situation. I created the list of item of the `Dropdown` component.\n\n``` jsx\n// this is using map from some array so I will return an array.\nrender_menu_item(key) {\n  if(!key) { //whatever checking\n    return\n  }\n\n  return (\n    <MenuItem value={key}>{text}</MenuItem>\n  )\n}\n```\n\nNow, because I use `element.key` in some case `element` could be `null` so give me an error. I propose to remove the `null` or `undefined` from the `Children.map` because then I will be filtering all the time the `null` values whenever I have this situation. \n\nI understand I can `forEach` but I think is not the best implementation, in the end you change the `map` function alright so\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/5053",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/5053/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/5053/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/5053/events",
        "html_url": "https://github.com/facebook/react/issues/5053",
        "id": 109851571,
        "number": 5053,
        "title": "componentWasMounted/componentWasUpdated (formerly componentDidDisplay)",
        "user": {
            "login": "sebmarkbage",
            "id": 63648,
            "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sebmarkbage",
            "html_url": "https://github.com/sebmarkbage",
            "followers_url": "https://api.github.com/users/sebmarkbage/followers",
            "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
            "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
            "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
            "repos_url": "https://api.github.com/users/sebmarkbage/repos",
            "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 739777675,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Component%20API",
                "name": "Component: Component API",
                "color": "d4c5f9",
                "default": false
            },
            {
                "id": 121709921,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 22,
        "created_at": "2015-10-05T17:56:33Z",
        "updated_at": "2017-11-03T15:53:22Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "Proposal: New life-cycle that fires after `componentDidMount` and after the event-loop has returned but before any other reconciliation has started.\n\nEffectively, this give you a `componentDidMount` that doesn't block the visual output. It could be a good place to set up timers, subscriptions etc.\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/5090",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/5090/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/5090/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/5090/events",
        "html_url": "https://github.com/facebook/react/issues/5090",
        "id": 110426989,
        "number": 5090,
        "title": "Custom element can't render `children` and `childNodes` independently",
        "user": {
            "login": "jimfb",
            "id": 9595985,
            "avatar_url": "https://avatars3.githubusercontent.com/u/9595985?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jimfb",
            "html_url": "https://github.com/jimfb",
            "followers_url": "https://api.github.com/users/jimfb/followers",
            "following_url": "https://api.github.com/users/jimfb/following{/other_user}",
            "gists_url": "https://api.github.com/users/jimfb/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jimfb/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jimfb/subscriptions",
            "organizations_url": "https://api.github.com/users/jimfb/orgs",
            "repos_url": "https://api.github.com/users/jimfb/repos",
            "events_url": "https://api.github.com/users/jimfb/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jimfb/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 121709921,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2015-10-08T11:16:10Z",
        "updated_at": "2017-10-04T11:42:07Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "body": "Also, it should be possible to specify a component that sets the children attribute and the components child nodes independently.\n\nexample:\n\n```\n<my-web-component children=\"2\">\n    <div>myChild</div>\n    <div>myOtherChild</div>\n</my-web-component>\n```\n\nThis is related to (a superset of) https://github.com/facebook/react/issues/5088.  This might be another motivation to reconsider #4694, which I've wanted for a while.\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/5272",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/5272/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/5272/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/5272/events",
        "html_url": "https://github.com/facebook/react/issues/5272",
        "id": 113167187,
        "number": 5272,
        "title": "Immutable.KeyedIterable as children",
        "user": {
            "login": "jareware",
            "id": 560055,
            "avatar_url": "https://avatars2.githubusercontent.com/u/560055?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jareware",
            "html_url": "https://github.com/jareware",
            "followers_url": "https://api.github.com/users/jareware/followers",
            "following_url": "https://api.github.com/users/jareware/following{/other_user}",
            "gists_url": "https://api.github.com/users/jareware/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jareware/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jareware/subscriptions",
            "organizations_url": "https://api.github.com/users/jareware/orgs",
            "repos_url": "https://api.github.com/users/jareware/repos",
            "events_url": "https://api.github.com/users/jareware/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jareware/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 739777675,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Component%20API",
                "name": "Component: Component API",
                "color": "d4c5f9",
                "default": false
            },
            {
                "id": 121709921,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 14,
        "created_at": "2015-10-24T15:28:25Z",
        "updated_at": "2017-11-03T15:54:56Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "I'm aware of the [Iterable support for children](https://jsfiddle.net/aneo4nhk/), but is there any timetable for supporting [KeyedIterable](https://facebook.github.io/immutable-js/docs/#/KeyedIterable) from Immutable.js, specifically for [automatically providing keys to children](https://github.com/facebook/react/blob/ac5e5d789f022f0d13107e54653f13a8ede0330b/src/shared/utils/traverseAllChildren.js#L154-L159)?\n\nSample use case:\n\n``` js\nvar myItems = Immutable.Map({ // extends KeyedIterable\n  one: 111,\n  two: 222\n});\nvar renderedItems = (\n  <ul>{myItems.map(item => (\n    <li>{item}</li>\n  ))}</ul>\n);\n```\n\nThat is, the first item would end up the equivalent of `<li key=\"one\">111</li>`.\n\nIf such support isn't on the roadmap, can I somehow avoid having to use `React.cloneElement()` (which will have performance implications) if I write a helper function that does this?\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/5700",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/5700/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/5700/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/5700/events",
        "html_url": "https://github.com/facebook/react/issues/5700",
        "id": 123311150,
        "number": 5700,
        "title": "DataTransfer's dropEffect not working on IE/Edge with not minified version react.js",
        "user": {
            "login": "srayuws",
            "id": 1182836,
            "avatar_url": "https://avatars1.githubusercontent.com/u/1182836?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/srayuws",
            "html_url": "https://github.com/srayuws",
            "followers_url": "https://api.github.com/users/srayuws/followers",
            "following_url": "https://api.github.com/users/srayuws/following{/other_user}",
            "gists_url": "https://api.github.com/users/srayuws/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/srayuws/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/srayuws/subscriptions",
            "organizations_url": "https://api.github.com/users/srayuws/orgs",
            "repos_url": "https://api.github.com/users/srayuws/repos",
            "events_url": "https://api.github.com/users/srayuws/events{/privacy}",
            "received_events_url": "https://api.github.com/users/srayuws/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 69105383,
                "url": "https://api.github.com/repos/facebook/react/labels/Browser:%20IE",
                "name": "Browser: IE",
                "color": "c7def8",
                "default": false
            },
            {
                "id": 40929151,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
                "name": "Type: Bug",
                "color": "b60205",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 5,
        "created_at": "2015-12-21T16:28:31Z",
        "updated_at": "2016-07-05T10:05:11Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "code exmaple: [Non-minified version](https://jsfiddle.net/sy7eja68/) and [Minified version](https://jsfiddle.net/sy7eja68/1/)\n\nBoth have the same code, html and js, the only difference is referenced to different version of react.js files.\n\nThere are three boxes.  Dragging the \"**drag me**\" box will show a \"**start**\" at the top, then show a \"**over**\" if it is dragged over either \"**normal drop**\" or \"**drop react**\" box, and show a \"**end**\" with a drop to the two drop boxes.\n\nEverything works fine on my Firefox(43.0.1), and the the [Minified version](https://jsfiddle.net/sy7eja68/1/) works fine on my IE 11, and Edge(13).\n\nThe only thing dose not work is the  [Non-minified version](https://jsfiddle.net/sy7eja68/) on IE/Edge.\n\nWhen dragging over the  \"**drop react**\" box, there shows **NO** \"over\".  In the F12 console, I can see lines of \"`SCRIPT16389: Unspecified error.`\". And with `console.log(ev.dataTransfer)`, I get this result: \n\n```\n[object DataTransfer] {\n   dropEffect: <Permission denied>,\n   effectAllowed: \"all\",\n   files: FileList {...}, \n   items: DataTransferItemList {...}, \n   types: DOMStringList {...}\n}\n```\n\nI thought the `dropEffect` should also be accessible on IE/Edge with non-minified version react.js files?\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/5739",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/5739/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/5739/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/5739/events",
        "html_url": "https://github.com/facebook/react/issues/5739",
        "id": 124036987,
        "number": 5739,
        "title": "MouseEnter event bubbling happens in reverse order?",
        "user": {
            "login": "vbarbarosh",
            "id": 352973,
            "avatar_url": "https://avatars1.githubusercontent.com/u/352973?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vbarbarosh",
            "html_url": "https://github.com/vbarbarosh",
            "followers_url": "https://api.github.com/users/vbarbarosh/followers",
            "following_url": "https://api.github.com/users/vbarbarosh/following{/other_user}",
            "gists_url": "https://api.github.com/users/vbarbarosh/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vbarbarosh/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vbarbarosh/subscriptions",
            "organizations_url": "https://api.github.com/users/vbarbarosh/orgs",
            "repos_url": "https://api.github.com/users/vbarbarosh/repos",
            "events_url": "https://api.github.com/users/vbarbarosh/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vbarbarosh/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 588833528,
                "url": "https://api.github.com/repos/facebook/react/labels/Difficulty:%20medium",
                "name": "Difficulty: medium",
                "color": "fbca04",
                "default": false
            },
            {
                "id": 40929151,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
                "name": "Type: Bug",
                "color": "b60205",
                "default": false
            },
            {
                "id": 725156255,
                "url": "https://api.github.com/repos/facebook/react/labels/good%20first%20issue%20(taken)",
                "name": "good first issue (taken)",
                "color": "b60205",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 6,
        "created_at": "2015-12-28T08:52:54Z",
        "updated_at": "2018-01-25T04:56:47Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "I expect **mouseenter** event will bubble from very top element down to very bottom, the same way **onclick** event does. Contrary it is bubbles from very bottom element to the very top element.\n\nIn Chrome, FF, IE10, and IE11 native **mouseenter** bubbling works as expected (from top to bottom)... Also **mouseover** bubbles from top to bottom, as expected, either in native or in React.\n\nhttps://jsfiddle.net/69z2wepo/25483/\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/5765",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/5765/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/5765/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/5765/events",
        "html_url": "https://github.com/facebook/react/issues/5765",
        "id": 124545647,
        "number": 5765,
        "title": "Dynamically added unmount handlers",
        "user": {
            "login": "dantman",
            "id": 53399,
            "avatar_url": "https://avatars2.githubusercontent.com/u/53399?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dantman",
            "html_url": "https://github.com/dantman",
            "followers_url": "https://api.github.com/users/dantman/followers",
            "following_url": "https://api.github.com/users/dantman/following{/other_user}",
            "gists_url": "https://api.github.com/users/dantman/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dantman/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dantman/subscriptions",
            "organizations_url": "https://api.github.com/users/dantman/orgs",
            "repos_url": "https://api.github.com/users/dantman/repos",
            "events_url": "https://api.github.com/users/dantman/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dantman/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 121709921,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 5,
        "created_at": "2016-01-01T13:59:20Z",
        "updated_at": "2017-10-03T23:15:30Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "body": "React components could use some way to dynamically add a handler to be called on unmount. Either some event handler like way (`this.addUnmountHandler`) or some other way to register a 'destructor'/destroy method for an object that a component is holding on to.\n\n`componentWillUnmount` exists but it does not scale well.\n- Every time you hold on to something you have to maintain two sections of code, with the cleanup code being separate from the rest of the code.\n- If you try to cleanup your code using helpers adding the cleanup code could be done in the very same function. But `componentWillUnmount` doesn't allow that.\n- Sometimes you end up adding a `this._fooSomethingProp` to a component you wouldn't normally need, just so that you can hold on to the destructor for use in `componentWillUnmount` because you can't add the cleanup code in the same closure you set it up in.\n\n---\n\nHere's one sample use case of mine for unmount handlers.\n\nReact is discouraging the use of mixins so I've been trying to move towards alternative patterns in new code. Some helpers only make sense on a component itself and wont work as a special component or a higher-order component.\n\nFor some of these needs I've come up with a pattern that involves passing the component to a helper function that will mutate the component and provide some sort of service which is linked to the component.\n\nTwo examples from my codebase:\n\n`ctxApi` provides a component with a version of my internal api which is 'scoped' to the component so that if the component is unmounted all of the api requests' HTTP requests are aborted.\n\n`setPending` adds a key to a pending state set and returns a `pending.cleanup` that will unset it, which is intended to be passed to a `.finally` handler. This pattern provides my buttons, etc... with pending text and spinners while waiting for HTTP requests.\n\n``` js\nresendConfirmation(email) {\n    var pending = setPending(this, `${email}:resendConfirmation`);\n\n    ctxApi(this)\n        .then((api) => api.post('/self/resendConfirmationEmail', {email}))\n        .then(() => alertifyjs.notify(\"Confirmation message sent\"))\n        .fin(pending.cleanup)\n        .catch(ignoreAbort)\n        .catch(notifyOnError)\n        .done();\n}\n```\n\nThe problem is that these helpers often need cleanup on unmount. `ctxApi` needs to abort requests on unmount. And `setPending` needs to break references so `setState` isn't called and it doesn't prevent gc. And while I can require that a call to a cleanup function be placed into `componentWillUnmount`. That is unnecessary boilerplate and easy to forget.\n\nIt would be much preferable for these helpers to be able to register an unmount handler on the component instance so they can implicitly clean themselves up.\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/5785",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/5785/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/5785/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/5785/events",
        "html_url": "https://github.com/facebook/react/issues/5785",
        "id": 125079138,
        "number": 5785,
        "title": "`onSelectionChange` event",
        "user": {
            "login": "devongovett",
            "id": 19409,
            "avatar_url": "https://avatars0.githubusercontent.com/u/19409?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/devongovett",
            "html_url": "https://github.com/devongovett",
            "followers_url": "https://api.github.com/users/devongovett/followers",
            "following_url": "https://api.github.com/users/devongovett/following{/other_user}",
            "gists_url": "https://api.github.com/users/devongovett/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/devongovett/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/devongovett/subscriptions",
            "organizations_url": "https://api.github.com/users/devongovett/orgs",
            "repos_url": "https://api.github.com/users/devongovett/repos",
            "events_url": "https://api.github.com/users/devongovett/events{/privacy}",
            "received_events_url": "https://api.github.com/users/devongovett/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 121709921,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": {
            "login": "flarnie",
            "id": 1114467,
            "avatar_url": "https://avatars2.githubusercontent.com/u/1114467?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/flarnie",
            "html_url": "https://github.com/flarnie",
            "followers_url": "https://api.github.com/users/flarnie/followers",
            "following_url": "https://api.github.com/users/flarnie/following{/other_user}",
            "gists_url": "https://api.github.com/users/flarnie/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/flarnie/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/flarnie/subscriptions",
            "organizations_url": "https://api.github.com/users/flarnie/orgs",
            "repos_url": "https://api.github.com/users/flarnie/repos",
            "events_url": "https://api.github.com/users/flarnie/events{/privacy}",
            "received_events_url": "https://api.github.com/users/flarnie/received_events",
            "type": "User",
            "site_admin": false
        },
        "assignees": [
            {
                "login": "flarnie",
                "id": 1114467,
                "avatar_url": "https://avatars2.githubusercontent.com/u/1114467?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/flarnie",
                "html_url": "https://github.com/flarnie",
                "followers_url": "https://api.github.com/users/flarnie/followers",
                "following_url": "https://api.github.com/users/flarnie/following{/other_user}",
                "gists_url": "https://api.github.com/users/flarnie/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/flarnie/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/flarnie/subscriptions",
                "organizations_url": "https://api.github.com/users/flarnie/orgs",
                "repos_url": "https://api.github.com/users/flarnie/repos",
                "events_url": "https://api.github.com/users/flarnie/events{/privacy}",
                "received_events_url": "https://api.github.com/users/flarnie/received_events",
                "type": "User",
                "site_admin": false
            },
            {
                "login": "aweary",
                "id": 6886061,
                "avatar_url": "https://avatars2.githubusercontent.com/u/6886061?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/aweary",
                "html_url": "https://github.com/aweary",
                "followers_url": "https://api.github.com/users/aweary/followers",
                "following_url": "https://api.github.com/users/aweary/following{/other_user}",
                "gists_url": "https://api.github.com/users/aweary/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/aweary/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aweary/subscriptions",
                "organizations_url": "https://api.github.com/users/aweary/orgs",
                "repos_url": "https://api.github.com/users/aweary/repos",
                "events_url": "https://api.github.com/users/aweary/events{/privacy}",
                "received_events_url": "https://api.github.com/users/aweary/received_events",
                "type": "User",
                "site_admin": false
            }
        ],
        "milestone": null,
        "comments": 6,
        "created_at": "2016-01-05T23:49:46Z",
        "updated_at": "2018-03-28T01:15:21Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "The `onSelect` event does not fire while the user is dragging the mouse, only after they release. It would be nice to have an event that fired immediately whenever the selection changed, including while dragging the mouse. This is useful, for example, when syncing selections between multiple collaborators, ala google docs.\n\nThe native [selectionchange](https://developer.mozilla.org/en-US/docs/Web/Events/selectionchange) event is supported cross browser, way back in IE, Chrome, and Safari, and recently in Firefox 43. Is this something React could polyfill and expose to components?\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/6003",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/6003/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/6003/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/6003/events",
        "html_url": "https://github.com/facebook/react/issues/6003",
        "id": 132323057,
        "number": 6003,
        "title": "Defer Execution of Unmount Life Cycle Hooks",
        "user": {
            "login": "sebmarkbage",
            "id": 63648,
            "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sebmarkbage",
            "html_url": "https://github.com/sebmarkbage",
            "followers_url": "https://api.github.com/users/sebmarkbage/followers",
            "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
            "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
            "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
            "repos_url": "https://api.github.com/users/sebmarkbage/repos",
            "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 739777675,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Component%20API",
                "name": "Component: Component API",
                "color": "d4c5f9",
                "default": false
            },
            {
                "id": 739761016,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Reconciler",
                "name": "Component: Reconciler",
                "color": "f9a798",
                "default": false
            },
            {
                "id": 121709921,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 6,
        "created_at": "2016-02-09T03:35:58Z",
        "updated_at": "2018-01-02T14:08:20Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "Unmounting can take significant and unbounded time when we traverse the tree and call the life-cycles. This is the smallest problem of incremental reconciliation (out of: mount at arbitrary location > update a boundary > mount a boundary > unmount).\n\nThe theory is that we can remove the node from the tree first and then call the life-cycles later on during idle time. This means that the refs won't have access to nodes that are in the document anymore so reading any such information would no longer work.\n\nThis problem space might also be related to animations. Exit animations want a component/node to exist in the tree for as long as it needs to finish its animation offscreen, asynchronously get deleted from the tree and eventually get cleaned up by calling the unmount life-cycles.\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/6088",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/6088/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/6088/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/6088/events",
        "html_url": "https://github.com/facebook/react/issues/6088",
        "id": 135501460,
        "number": 6088,
        "title": "TestUtils - cannot search for a custom component within a DOM element",
        "user": {
            "login": "vladimir-rovensky",
            "id": 10760126,
            "avatar_url": "https://avatars3.githubusercontent.com/u/10760126?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vladimir-rovensky",
            "html_url": "https://github.com/vladimir-rovensky",
            "followers_url": "https://api.github.com/users/vladimir-rovensky/followers",
            "following_url": "https://api.github.com/users/vladimir-rovensky/following{/other_user}",
            "gists_url": "https://api.github.com/users/vladimir-rovensky/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vladimir-rovensky/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vladimir-rovensky/subscriptions",
            "organizations_url": "https://api.github.com/users/vladimir-rovensky/orgs",
            "repos_url": "https://api.github.com/users/vladimir-rovensky/repos",
            "events_url": "https://api.github.com/users/vladimir-rovensky/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vladimir-rovensky/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 139734344,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Test%20Utils",
                "name": "Component: Test Utils",
                "color": "eb6420",
                "default": false
            },
            {
                "id": 40929151,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
                "name": "Type: Bug",
                "color": "b60205",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2016-02-22T18:29:41Z",
        "updated_at": "2017-10-03T23:23:30Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "This is the old issue with \"Invariant Violation: findAllInRenderedTree(...): instance must be a composite component\". I know this was brought up before and it was somehow declared ok, but it keeps causing trouble in my tests, so I thought I'd give this one more shot.\n\nThe problem: You cannot search for a custom component within a DOM node. I made a [sample](http://codepen.io/anon/pen/pgXGbe) to illustrate the problem.\n\nThe sample is a simplified version of a real problem I'm facing - I have a DataGrid component that renders a bunch of Row components, which in turn render a bunch of Cell components. Each Cell can either render some readonly text, or some custom component passed via props (custom editor). \nI want to turn the Cell into a functional stateless component for better performance. \n\nNow I have a problem in my tests  - for a given Row, how can I find the custom editor in Cell with given index? Previously (React v <=0.13 I think) it was possible to find the div rendered by given Cell and within this div, find the custom editor. That is no longer possible. Also, since Cell is a stateless functional component, you cannot locate it using the Test API at all.\n\nI really believe that the testing API is incomplete right now, is there any change you guys could take another look at this?\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/6190",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/6190/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/6190/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/6190/events",
        "html_url": "https://github.com/facebook/react/issues/6190",
        "id": 138602096,
        "number": 6190,
        "title": "Proposal: Get rid of pooling in synthetic event system",
        "user": {
            "login": "zpao",
            "id": 8445,
            "avatar_url": "https://avatars1.githubusercontent.com/u/8445?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zpao",
            "html_url": "https://github.com/zpao",
            "followers_url": "https://api.github.com/users/zpao/followers",
            "following_url": "https://api.github.com/users/zpao/following{/other_user}",
            "gists_url": "https://api.github.com/users/zpao/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zpao/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zpao/subscriptions",
            "organizations_url": "https://api.github.com/users/zpao/orgs",
            "repos_url": "https://api.github.com/users/zpao/repos",
            "events_url": "https://api.github.com/users/zpao/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zpao/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 121709921,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 6,
        "created_at": "2016-03-04T22:17:12Z",
        "updated_at": "2017-10-04T11:44:54Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "After staring at the confusing mess that is the synthetic event system today and talking with @sebmarkbage, we're no longer confident that we need the pooling that the system currently uses. GCs have gotten pretty good so we may be experiencing diminishing returns at this point, or maybe losing out on some benefits. We do have to consider that we still support some older browsers who's GCs don't have the benefit of the last several years worth of innovations so it might be premature, but it's probably worth investigating.\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/6217",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/6217/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/6217/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/6217/events",
        "html_url": "https://github.com/facebook/react/issues/6217",
        "id": 139359988,
        "number": 6217,
        "title": "onResponderGrant called before onResponderTerminate",
        "user": {
            "login": "aleclarson",
            "id": 1925840,
            "avatar_url": "https://avatars2.githubusercontent.com/u/1925840?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/aleclarson",
            "html_url": "https://github.com/aleclarson",
            "followers_url": "https://api.github.com/users/aleclarson/followers",
            "following_url": "https://api.github.com/users/aleclarson/following{/other_user}",
            "gists_url": "https://api.github.com/users/aleclarson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/aleclarson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/aleclarson/subscriptions",
            "organizations_url": "https://api.github.com/users/aleclarson/orgs",
            "repos_url": "https://api.github.com/users/aleclarson/repos",
            "events_url": "https://api.github.com/users/aleclarson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/aleclarson/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 40929151,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
                "name": "Type: Bug",
                "color": "b60205",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 18,
        "created_at": "2016-03-08T18:46:34Z",
        "updated_at": "2017-11-21T14:12:50Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "When a responder captures the active responder, it seems that `onResponderTerminate` is not called until after `onResponderGrant`. This seems like the wrong thing to do. Are there reasons for this behavior?\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/6284",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/6284/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/6284/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/6284/events",
        "html_url": "https://github.com/facebook/react/issues/6284",
        "id": 141576362,
        "number": 6284,
        "title": "Form input name='nodeName' breaks onSubmit event handling",
        "user": {
            "login": "insonifi",
            "id": 3122135,
            "avatar_url": "https://avatars1.githubusercontent.com/u/3122135?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/insonifi",
            "html_url": "https://github.com/insonifi",
            "followers_url": "https://api.github.com/users/insonifi/followers",
            "following_url": "https://api.github.com/users/insonifi/following{/other_user}",
            "gists_url": "https://api.github.com/users/insonifi/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/insonifi/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/insonifi/subscriptions",
            "organizations_url": "https://api.github.com/users/insonifi/orgs",
            "repos_url": "https://api.github.com/users/insonifi/repos",
            "events_url": "https://api.github.com/users/insonifi/events{/privacy}",
            "received_events_url": "https://api.github.com/users/insonifi/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 40929151,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
                "name": "Type: Bug",
                "color": "b60205",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 8,
        "created_at": "2016-03-17T12:58:47Z",
        "updated_at": "2018-05-03T02:52:27Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "It happened that I stumbled on following edge case. If you add `name='nodeName'` attribute to form's _input_, at some point of React event handling (`ChangeEventPlugin.js: shouldUseChangeEvent()`) it will call: `elem.nodeName && elem.nodeName.toLowerCase()`, but coincidentally `nodeName` property refers to _input_ and invocation fails.\n\nHere's a [jsFiddle example](https://jsfiddle.net/tLd7xvwc/)\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/6325",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/6325/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/6325/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/6325/events",
        "html_url": "https://github.com/facebook/react/issues/6325",
        "id": 143089134,
        "number": 6325,
        "title": "Consider Special Casing Certain DOM Attributes to Accept Elements",
        "user": {
            "login": "sebmarkbage",
            "id": 63648,
            "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sebmarkbage",
            "html_url": "https://github.com/sebmarkbage",
            "followers_url": "https://api.github.com/users/sebmarkbage/followers",
            "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
            "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
            "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
            "repos_url": "https://api.github.com/users/sebmarkbage/repos",
            "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 121709921,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2016-03-23T21:52:14Z",
        "updated_at": "2017-10-04T11:46:22Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "The use case is for example, translation components rendering string content.\n\nThe HTML spec has some unfortunate attributes that behave kind of like content. It seems like they should be able to accept React elements. If I were to design a similar React component I would allow it to accept React elements.\n\nSince we normalize usage we could in theory have it built-in to React that certain attributes like `placeholder`, `aria-label`, etc. could accept React components that render into strings.\n\nThat would probably have to go in after we figure out a way to render strings at the root of a React composite component.\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/6348",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/6348/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/6348/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/6348/events",
        "html_url": "https://github.com/facebook/react/issues/6348",
        "id": 143737674,
        "number": 6348,
        "title": "Warn when using overlapping styles (e.g. border and borderBottom)",
        "user": {
            "login": "gaearon",
            "id": 810438,
            "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gaearon",
            "html_url": "https://github.com/gaearon",
            "followers_url": "https://api.github.com/users/gaearon/followers",
            "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
            "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
            "organizations_url": "https://api.github.com/users/gaearon/orgs",
            "repos_url": "https://api.github.com/users/gaearon/repos",
            "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gaearon/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 332720629,
                "url": "https://api.github.com/repos/facebook/react/labels/HTML",
                "name": "HTML",
                "color": "f7c6c7",
                "default": false
            },
            {
                "id": 40929151,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
                "name": "Type: Bug",
                "color": "b60205",
                "default": false
            },
            {
                "id": 725156255,
                "url": "https://api.github.com/repos/facebook/react/labels/good%20first%20issue%20(taken)",
                "name": "good first issue (taken)",
                "color": "b60205",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 11,
        "created_at": "2016-03-26T18:25:22Z",
        "updated_at": "2018-05-24T19:47:06Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "# This \"good first bug\" is taken by @supertinou. Don't work on it unless that's you!\r\n\r\nThis has been discussed a few times before but I don\u2019t think there was any conclusion, and PRs intending to solve the issue were not merged for various reasons.\r\n\r\nI would like to close those PRs as outdated, and reboot the discussion about this.\r\nPerformance considered, the conclusion from @sebmarkbage and @syranide seems to be:\r\n\r\n> We should consider not allowing conflicting style rules at all.\r\n\r\n\u2014 https://github.com/facebook/react/pull/2013#issuecomment-57338177\r\n\r\n> IMHO, all things considered it's better to just disallow overlapping and warn in dev.\r\n\r\n\u2014 https://github.com/facebook/react/pull/4661#issuecomment-132996649\r\n\r\nRadium by @ianobermiller came to the same conclusion in https://github.com/FormidableLabs/radium/issues/95 but there was some backlash afterwards. React Native seems to allow style expansions but only for a few attributes (e.g. `margin` and `padding`, but not `border`).\r\n\r\nI\u2019m closing old pull requests about this, and creating this issue to track implementation of the behavior we seem to agree upon: we should warn in `__DEV__` when `border` and `borderBottom` are used at the same time. We can discuss more specifics (should either be ignored? should we allow a few whitelisted properties but warn for others?) in this issue.\r\n\r\nAs a migration strategy, we can suggest people to use something like https://github.com/ActionIQ/style-builder if they really need those shortcuts. It\u2019s also something we\u2019ll need to decide upon when implementing integrated styling.\r\n\r\n---\r\n\r\nRelated issues:\r\n- #2231\r\n- #2407\r\n- #5030\r\n- https://github.com/FormidableLabs/radium/issues/95\r\n\r\nRelated PRs:\r\n- #2013\r\n- #4661\r\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/6350",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/6350/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/6350/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/6350/events",
        "html_url": "https://github.com/facebook/react/issues/6350",
        "id": 143752993,
        "number": 6350,
        "title": "Remove ReactCurrentOwner",
        "user": {
            "login": "gaearon",
            "id": 810438,
            "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gaearon",
            "html_url": "https://github.com/gaearon",
            "followers_url": "https://api.github.com/users/gaearon/followers",
            "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
            "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
            "organizations_url": "https://api.github.com/users/gaearon/orgs",
            "repos_url": "https://api.github.com/users/gaearon/repos",
            "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gaearon/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 139653724,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Core%20Utilities",
                "name": "Component: Core Utilities",
                "color": "c5def5",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": {
            "login": "sebmarkbage",
            "id": 63648,
            "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sebmarkbage",
            "html_url": "https://github.com/sebmarkbage",
            "followers_url": "https://api.github.com/users/sebmarkbage/followers",
            "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
            "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
            "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
            "repos_url": "https://api.github.com/users/sebmarkbage/repos",
            "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
            "type": "User",
            "site_admin": false
        },
        "assignees": [
            {
                "login": "sebmarkbage",
                "id": 63648,
                "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/sebmarkbage",
                "html_url": "https://github.com/sebmarkbage",
                "followers_url": "https://api.github.com/users/sebmarkbage/followers",
                "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
                "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
                "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
                "repos_url": "https://api.github.com/users/sebmarkbage/repos",
                "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
                "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
                "type": "User",
                "site_admin": false
            }
        ],
        "milestone": null,
        "comments": 0,
        "created_at": "2016-03-26T22:01:39Z",
        "updated_at": "2016-03-26T22:01:39Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "From what I remember from Twitter conversations with @sebmarkbage, it is problematic for several reasons, and we intend to remove it at some point. There are a few problems related to that. I\u2019m not sure whether we have a solution for those:\n- [ ] It is used by our warnings and profiler (even the new one) for more helpful messages\n- [ ] It is used for string refs (we need to deprecate them?)\n#4174 started work on this but it\u2019s outdated. We try to avoid stale PRs, and they don\u2019t give much context anyways, so I\u2019m creating this issue to track work on this instead.\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/6352",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/6352/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/6352/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/6352/events",
        "html_url": "https://github.com/facebook/react/issues/6352",
        "id": 143754689,
        "number": 6352,
        "title": "Make ResponderEventPlugin cross-platform",
        "user": {
            "login": "gaearon",
            "id": 810438,
            "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gaearon",
            "html_url": "https://github.com/gaearon",
            "followers_url": "https://api.github.com/users/gaearon/followers",
            "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
            "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
            "organizations_url": "https://api.github.com/users/gaearon/orgs",
            "repos_url": "https://api.github.com/users/gaearon/repos",
            "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gaearon/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 40929153,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement",
                "name": "Type: Enhancement",
                "color": "84b6eb",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2016-03-26T22:20:18Z",
        "updated_at": "2016-08-03T00:49:30Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "@dieppe worked on making `ResponderEventPlugin` work with DOM in #4303 but this was put on hold.\nAfter #6338 brings all the relevant files into React repo, we can start thinking about it again.\n\nI\u2019m creating this issue to keep track of whether we want this to happen or not, and what is our plan regarding this. If there is a consensus, we can look into rebasing #4303.\n\ncc @sebmarkbage @jordwalke \n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/6368",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/6368/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/6368/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/6368/events",
        "html_url": "https://github.com/facebook/react/issues/6368",
        "id": 144283052,
        "number": 6368,
        "title": "Input type 'email' as controlled component does not control white spaces",
        "user": {
            "login": "marcolanaro",
            "id": 1427910,
            "avatar_url": "https://avatars0.githubusercontent.com/u/1427910?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/marcolanaro",
            "html_url": "https://github.com/marcolanaro",
            "followers_url": "https://api.github.com/users/marcolanaro/followers",
            "following_url": "https://api.github.com/users/marcolanaro/following{/other_user}",
            "gists_url": "https://api.github.com/users/marcolanaro/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/marcolanaro/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/marcolanaro/subscriptions",
            "organizations_url": "https://api.github.com/users/marcolanaro/orgs",
            "repos_url": "https://api.github.com/users/marcolanaro/repos",
            "events_url": "https://api.github.com/users/marcolanaro/events{/privacy}",
            "received_events_url": "https://api.github.com/users/marcolanaro/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 40929151,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
                "name": "Type: Bug",
                "color": "b60205",
                "default": false
            },
            {
                "id": 877481224,
                "url": "https://api.github.com/repos/facebook/react/labels/mentorship",
                "name": "mentorship",
                "color": "3B5998",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 10,
        "created_at": "2016-03-29T14:34:03Z",
        "updated_at": "2018-03-23T17:13:24Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "A controlled input filed of type email behave differently from a controlled field of type text.\nIf you manage a controlled input field of type email, the actual state and the rendered DOM are different if the user digit spaces, e.g. '  '.\n\nWith an input element like this:\n`<input type=\"text\" value={'stringFromTheState'} />`\nif you try to digit letters or spaces, you will always get rendered the string 'stringFromTheState'.\n\nWith an input element like this:\n`<input type=\"email\" value={'stringFromTheState'} />`\nif you try to digit letters you will always get rendered the string 'stringFromTheState'.\nif you try to digit spaces you will get a new rendered string that compose the state with the spaces.\n\nThis is problematic is before saving the state you need to validate the field and force it to do something smart like strip the white spaces.\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/6397",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/6397/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/6397/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/6397/events",
        "html_url": "https://github.com/facebook/react/issues/6397",
        "id": 145291874,
        "number": 6397,
        "title": "Deprecate return value of `ReactDOM.render()`",
        "user": {
            "login": "jimfb",
            "id": 9595985,
            "avatar_url": "https://avatars3.githubusercontent.com/u/9595985?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jimfb",
            "html_url": "https://github.com/jimfb",
            "followers_url": "https://api.github.com/users/jimfb/followers",
            "following_url": "https://api.github.com/users/jimfb/following{/other_user}",
            "gists_url": "https://api.github.com/users/jimfb/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jimfb/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jimfb/subscriptions",
            "organizations_url": "https://api.github.com/users/jimfb/orgs",
            "repos_url": "https://api.github.com/users/jimfb/repos",
            "events_url": "https://api.github.com/users/jimfb/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jimfb/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 40929153,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement",
                "name": "Type: Enhancement",
                "color": "84b6eb",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 6,
        "created_at": "2016-04-01T21:43:34Z",
        "updated_at": "2018-05-17T20:47:50Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "body": "This is a tracking issue, because we're not ready to deprecate the return value of `ReactDOM.render()` yet.  This will likely be a longer-term objective (not immediate), but we should have an issue to reference as we start to get the ball rolling.\n\nReasoning: We are working towards a new incremental reconciler, which means that a render may not be complete prior to `ReactDOM.render()` returning.  For anyone relying on the return value of `ReactDOM.render()`, there would be a race condition where the returned instance is potentially not fully mounted.  Safe-looking code might work 99% of the time, but fail 1% of the time, at the sole discretion of the scheduler.  To be clear: this is not an issue today, but will become an issue once we start utilizing an incremental renderer, iff people rely on the return value.\n\nAs we prepare for the new reconciliation algorithm, we should start encouraging people should start avoiding the return value of `ReactDOM.render`.  People should, instead, attach a callback ref to their root component when rendering the component, thus allowing them to get a reference to the instance after mounting is complete.\n\nFirst step in this process is to update the documentation to state that the return value of `ReactDOM.render` is legacy, and that people should attach a ref instead (similar to what we did for string refs).\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/6410",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/6410/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/6410/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/6410/events",
        "html_url": "https://github.com/facebook/react/issues/6410",
        "id": 145887079,
        "number": 6410,
        "title": "onFocusIn/onFocusOut events",
        "user": {
            "login": "sophiebits",
            "id": 6820,
            "avatar_url": "https://avatars2.githubusercontent.com/u/6820?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sophiebits",
            "html_url": "https://github.com/sophiebits",
            "followers_url": "https://api.github.com/users/sophiebits/followers",
            "following_url": "https://api.github.com/users/sophiebits/following{/other_user}",
            "gists_url": "https://api.github.com/users/sophiebits/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sophiebits/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sophiebits/subscriptions",
            "organizations_url": "https://api.github.com/users/sophiebits/orgs",
            "repos_url": "https://api.github.com/users/sophiebits/repos",
            "events_url": "https://api.github.com/users/sophiebits/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sophiebits/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 121709921,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 36,
        "created_at": "2016-04-05T04:54:27Z",
        "updated_at": "2018-04-12T15:20:20Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "Like mouse enter/leave, these are almost always what you want, not the `onFocus` and `onBlur` events we currently expose. I run into this semi-frequently when actually doing product work. We should add them.\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/6424",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/6424/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/6424/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/6424/events",
        "html_url": "https://github.com/facebook/react/issues/6424",
        "id": 146346474,
        "number": 6424,
        "title": "componentDidUnmount functionality (in addition to componentWillUnmount)",
        "user": {
            "login": "hadjiada",
            "id": 2135998,
            "avatar_url": "https://avatars3.githubusercontent.com/u/2135998?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hadjiada",
            "html_url": "https://github.com/hadjiada",
            "followers_url": "https://api.github.com/users/hadjiada/followers",
            "following_url": "https://api.github.com/users/hadjiada/following{/other_user}",
            "gists_url": "https://api.github.com/users/hadjiada/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/hadjiada/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/hadjiada/subscriptions",
            "organizations_url": "https://api.github.com/users/hadjiada/orgs",
            "repos_url": "https://api.github.com/users/hadjiada/repos",
            "events_url": "https://api.github.com/users/hadjiada/events{/privacy}",
            "received_events_url": "https://api.github.com/users/hadjiada/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 739777675,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Component%20API",
                "name": "Component: Component API",
                "color": "d4c5f9",
                "default": false
            },
            {
                "id": 121709921,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 17,
        "created_at": "2016-04-06T15:18:13Z",
        "updated_at": "2017-12-14T16:24:47Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "It would be great if it was possible to run some code after the component actually unmounted. This is useful where you consider the following:\n\n```\ncomponent Parent {\n    has service Service\n    has child Child\n\n    componentWillUnmount: {\n         destroys Service\n    }\n\n    render: {\n         Service gets passed to Child as prop\n    }\n}\n\ncomponent Child {\n    componentWillMount: {\n         starts listening to Service\n    }\n\n    componentWillUnmount: {\n         stops listening to Service\n    }\n}\n\n```\n\nThe above will throw exception during Child componentWillUnmount since Parent gets unmounted first so Service is already destroyed.\n\nIf there existed componentDidUnmount the Service can be destroyed after the children are unmounted, i.e.\n\n```\ncomponent Parent {\n    has service Service\n    has child Child\n\n    componentDidUnmount: {\n         destroys Service\n    }\n\n    render: {\n         Service gets passed to Child as prop\n    }\n}\n\ncomponent Child {\n    componentWillMount: {\n         starts listening to Service\n    }\n\n    componentWillUnmount: {\n         stops listening to Service\n    }\n}\n\n```\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/6436",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/6436/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/6436/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/6436/events",
        "html_url": "https://github.com/facebook/react/issues/6436",
        "id": 146710693,
        "number": 6436,
        "title": "Support Passive Event Listeners",
        "user": {
            "login": "sebmarkbage",
            "id": 63648,
            "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sebmarkbage",
            "html_url": "https://github.com/sebmarkbage",
            "followers_url": "https://api.github.com/users/sebmarkbage/followers",
            "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
            "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
            "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
            "repos_url": "https://api.github.com/users/sebmarkbage/repos",
            "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 270986513,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Big%20Picture",
                "name": "Type: Big Picture",
                "color": "61dafb",
                "default": false
            },
            {
                "id": 121709921,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 37,
        "created_at": "2016-04-07T18:42:47Z",
        "updated_at": "2018-04-11T15:55:02Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md\n\nIt would be good to have everything be passive by default and only opt-in to active when needed. E.g. you could listen to text input events but only preventDefault or used controlled behavior when you have active listeners.\n\nSimilarly, we could unify this with React Native's threading model. E.g. one thing we could do there is synchronously block the UI thread when there are active listeners such as handling keystrokes.\n\ncc @vjeux @ide\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/6541",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/6541/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/6541/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/6541/events",
        "html_url": "https://github.com/facebook/react/issues/6541",
        "id": 149168960,
        "number": 6541,
        "title": "Iframe load event not firing in Chrome and Safari when src is 'about:blank'",
        "user": {
            "login": "pirelenito",
            "id": 6001,
            "avatar_url": "https://avatars2.githubusercontent.com/u/6001?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pirelenito",
            "html_url": "https://github.com/pirelenito",
            "followers_url": "https://api.github.com/users/pirelenito/followers",
            "following_url": "https://api.github.com/users/pirelenito/following{/other_user}",
            "gists_url": "https://api.github.com/users/pirelenito/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pirelenito/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pirelenito/subscriptions",
            "organizations_url": "https://api.github.com/users/pirelenito/orgs",
            "repos_url": "https://api.github.com/users/pirelenito/repos",
            "events_url": "https://api.github.com/users/pirelenito/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pirelenito/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 40929151,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
                "name": "Type: Bug",
                "color": "b60205",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 7,
        "created_at": "2016-04-18T14:35:13Z",
        "updated_at": "2018-01-29T18:59:51Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "See: https://jsfiddle.net/pnct6b7r/\n\nIt will not trigger the alert in Chrome and Safari, but it will work in Firefox and even IE8.\n\nIs this a React issue or Webkit issue? If it is a Webkit issue, should we \"fix it\" in React given that we want [consistent events across browsers](http://facebook.github.io/react/docs/events.html)?\n\nps: The JSFiddle was based on the isuse #5332.\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/6559",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/6559/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/6559/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/6559/events",
        "html_url": "https://github.com/facebook/react/issues/6559",
        "id": 149922010,
        "number": 6559,
        "title": "Add comments/attribute indicating which component was rendered",
        "user": {
            "login": "jimfb",
            "id": 9595985,
            "avatar_url": "https://avatars3.githubusercontent.com/u/9595985?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jimfb",
            "html_url": "https://github.com/jimfb",
            "followers_url": "https://api.github.com/users/jimfb/followers",
            "following_url": "https://api.github.com/users/jimfb/following{/other_user}",
            "gists_url": "https://api.github.com/users/jimfb/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jimfb/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jimfb/subscriptions",
            "organizations_url": "https://api.github.com/users/jimfb/orgs",
            "repos_url": "https://api.github.com/users/jimfb/repos",
            "events_url": "https://api.github.com/users/jimfb/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jimfb/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 121709921,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 7,
        "created_at": "2016-04-21T00:25:26Z",
        "updated_at": "2017-10-04T11:48:05Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "body": "As per the discussion today...\n\nSometimes you are developing on a platform that doesn't have devtools (safari, etc).  The problem is that you are looking at a whole pile of markup, and can't tell which components rendered it.  Without devtools, the output markup is really hard to navigate.  It would be cool if we had comment nodes (or a `data-reactcomponent` attribute) that helps users navigate the output.\n\nThese nodes would be rendered only in dev mode or with some flag turned on or something.\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/6627",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/6627/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/6627/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/6627/events",
        "html_url": "https://github.com/facebook/react/issues/6627",
        "id": 151282625,
        "number": 6627,
        "title": "Introduce __PROFILE__ build",
        "user": {
            "login": "gaearon",
            "id": 810438,
            "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gaearon",
            "html_url": "https://github.com/gaearon",
            "followers_url": "https://api.github.com/users/gaearon/followers",
            "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
            "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
            "organizations_url": "https://api.github.com/users/gaearon/orgs",
            "repos_url": "https://api.github.com/users/gaearon/repos",
            "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gaearon/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 71502270,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Build%20Infrastructure",
                "name": "Component: Build Infrastructure",
                "color": "f9d0c4",
                "default": false
            },
            {
                "id": 121709921,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 4,
        "created_at": "2016-04-27T02:17:42Z",
        "updated_at": "2017-10-04T00:01:12Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "As discussed in #6015, we plan to add a new build configuration that does _not_ have the `__DEV__` overhead but that comes with the new `ReactPerf` enabled.\n\nThis means that developer warnings, etc, will need to be gated by `__DEV__`, but the component tree (#6549) and some other events (e.g. #6612) will need to be gated by `__PROFILE__`.\n\nI\u2019m curious how this could be implemented. Right now our system is simple:\n### Current System\n#### Variables\n- `__DEV__ = (process.env.NODE_ENV !== 'production')`\n#### Development Build (any `NODE_ENV` except `'production'`)\n- `__DEV__` is `true`\n#### Production Build (`NODE_ENV` is `'production'`)\n- `__DEV__` is `false`\n\nAs you can see, if `process.env.NODE_ENV` is omitted, we assume `__DEV__` mode. This is a sensible assumption, and not the one we want to change, as most projects today don\u2019t specify anything as `NODE_ENV` in development, and we don\u2019t want them to suddenly lose all developer warnings.\n\nTherefore, I propose the following new system:\n### Proposed System\n#### Variables\n- `__DEV__ = (process.env.NODE_ENV !== 'profile' && process.env.NODE_ENV !== 'production')`\n- `__PROFILE__ = (process.env.NODE_ENV === 'profile'`)\n#### Development Build (any `NODE_ENV` except `'profile'` or `'production'`)\n- `__DEV__` is `true`\n- `__PROFILE__` is `true`\n#### Profile Build (`NODE_ENV` is `'profile'`)\n- `__DEV__` is `false`\n- `__PROFILE__` is `true`\n#### Production Build (`NODE_ENV` is `'production'`)\n- `__DEV__` is `false`\n- `__PROFILE__` is `false`\n\nThis would let us have three separate build configurations. We can use the same pattern in other `fbjs` projects as well, if desired. I would say it\u2019s unlikely we\u2019d ever want to add a separate fourth configuration so this should cover all our needs.\n\nAny thoughts why this would be a bad idea? Should I implement this in `fbjs`?\n\ncc @facebook/react-core \n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/6656",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/6656/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/6656/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/6656/events",
        "html_url": "https://github.com/facebook/react/issues/6656",
        "id": 151945255,
        "number": 6656,
        "title": "Modernize build process / tooling",
        "user": {
            "login": "zpao",
            "id": 8445,
            "avatar_url": "https://avatars1.githubusercontent.com/u/8445?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zpao",
            "html_url": "https://github.com/zpao",
            "followers_url": "https://api.github.com/users/zpao/followers",
            "following_url": "https://api.github.com/users/zpao/following{/other_user}",
            "gists_url": "https://api.github.com/users/zpao/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zpao/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zpao/subscriptions",
            "organizations_url": "https://api.github.com/users/zpao/orgs",
            "repos_url": "https://api.github.com/users/zpao/repos",
            "events_url": "https://api.github.com/users/zpao/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zpao/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 71502270,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Build%20Infrastructure",
                "name": "Component: Build Infrastructure",
                "color": "f9d0c4",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2016-04-29T18:57:37Z",
        "updated_at": "2017-10-04T00:05:46Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "This is mostly a prereq of #6655.\n\nGoals:\n- align build tooling (right now mixing grunt & gulp - commit, probably to gulp #4927)\n- add watching, should be fast to rebuild and test changes in browser\n  - could be something like webpack hot reloading\n- move shared tooling back into fbjs (babel plugin, custom lint rule)\n\nNon-goals but things to keep in mind:\n- alternate build approaches, in particular flat bundling - it needs to be easy to swap this in\n- releasing from master - we may want to have development happen such that feature flags are used to turn on/off features. we may want the build result to be a static flag set (no runtime checks) but would need to be possible to target any flag combination easily\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/6683",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/6683/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/6683/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/6683/events",
        "html_url": "https://github.com/facebook/react/issues/6683",
        "id": 152667138,
        "number": 6683,
        "title": "RFC: Configure Warning Levels Using ENV Variable",
        "user": {
            "login": "sebmarkbage",
            "id": 63648,
            "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sebmarkbage",
            "html_url": "https://github.com/sebmarkbage",
            "followers_url": "https://api.github.com/users/sebmarkbage/followers",
            "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
            "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
            "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
            "repos_url": "https://api.github.com/users/sebmarkbage/repos",
            "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 40929153,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement",
                "name": "Type: Enhancement",
                "color": "84b6eb",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2016-05-02T23:17:24Z",
        "updated_at": "2016-07-07T19:41:58Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "Would it be feasible to specify the version of warnings you want through a static environment variable?\n\nThat would silence new warnings so that you can safely update minor versions without worrying about warning spew.\n\nDynamic configuration creates stateful shared module dependencies which we're very close to getting rid of for the isomorphic package (ReactCurrentOwner being the last one).\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/6717",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/6717/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/6717/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/6717/events",
        "html_url": "https://github.com/facebook/react/issues/6717",
        "id": 153532835,
        "number": 6717,
        "title": "<datalist> support",
        "user": {
            "login": "kevinSuttle",
            "id": 95672,
            "avatar_url": "https://avatars3.githubusercontent.com/u/95672?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/kevinSuttle",
            "html_url": "https://github.com/kevinSuttle",
            "followers_url": "https://api.github.com/users/kevinSuttle/followers",
            "following_url": "https://api.github.com/users/kevinSuttle/following{/other_user}",
            "gists_url": "https://api.github.com/users/kevinSuttle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/kevinSuttle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/kevinSuttle/subscriptions",
            "organizations_url": "https://api.github.com/users/kevinSuttle/orgs",
            "repos_url": "https://api.github.com/users/kevinSuttle/repos",
            "events_url": "https://api.github.com/users/kevinSuttle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/kevinSuttle/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 121709921,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 6,
        "created_at": "2016-05-06T20:34:52Z",
        "updated_at": "2018-03-09T07:15:24Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "body": "Not a _ton_ of browser support for this right now, but it appears to be on the horizon for Webkit. \nhttps://bugs.webkit.org/show_bug.cgi?id=98934\n\nhttp://caniuse.com/#search=datalist\n\nRight now, I'm not getting any DOM events fired from it in Chrome. Wonder if SyntheticEvent could prollyfill. \nhttps://facebook.github.io/react/docs/events.html#form-events\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/6723",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/6723/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/6723/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/6723/events",
        "html_url": "https://github.com/facebook/react/issues/6723",
        "id": 153617220,
        "number": 6723,
        "title": "support for event.movementX/Y [feature-request]",
        "user": {
            "login": "caub",
            "id": 3134574,
            "avatar_url": "https://avatars0.githubusercontent.com/u/3134574?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/caub",
            "html_url": "https://github.com/caub",
            "followers_url": "https://api.github.com/users/caub/followers",
            "following_url": "https://api.github.com/users/caub/following{/other_user}",
            "gists_url": "https://api.github.com/users/caub/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/caub/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/caub/subscriptions",
            "organizations_url": "https://api.github.com/users/caub/orgs",
            "repos_url": "https://api.github.com/users/caub/repos",
            "events_url": "https://api.github.com/users/caub/events{/privacy}",
            "received_events_url": "https://api.github.com/users/caub/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 121709921,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 9,
        "created_at": "2016-05-07T20:53:16Z",
        "updated_at": "2017-10-04T00:08:24Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "currently it seems synthetic events don't have those properties on mousemove\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/6749",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/6749/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/6749/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/6749/events",
        "html_url": "https://github.com/facebook/react/issues/6749",
        "id": 154233069,
        "number": 6749,
        "title": "Warn on inline style update with a bad value",
        "user": {
            "login": "ouchxp",
            "id": 1253729,
            "avatar_url": "https://avatars2.githubusercontent.com/u/1253729?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ouchxp",
            "html_url": "https://github.com/ouchxp",
            "followers_url": "https://api.github.com/users/ouchxp/followers",
            "following_url": "https://api.github.com/users/ouchxp/following{/other_user}",
            "gists_url": "https://api.github.com/users/ouchxp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ouchxp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ouchxp/subscriptions",
            "organizations_url": "https://api.github.com/users/ouchxp/orgs",
            "repos_url": "https://api.github.com/users/ouchxp/repos",
            "events_url": "https://api.github.com/users/ouchxp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ouchxp/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 121709921,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 3,
        "created_at": "2016-05-11T12:37:07Z",
        "updated_at": "2018-03-21T17:28:06Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "If set an inline style attribute for a component, such as `backgroundColor: 'yellow'`, and then update the state with a bad value to make the inline style like this `backgroundColor: 'non-exist-color'`. This currently takes no effect on the component, and the backgroundColor will remain yellow. (live example: https://jsfiddle.net/d6me6fca/ )\n\nI suppose this is not the correct behavior, the old value should be override by new value, even the value is non-standard, so it can fallback to use the parent style just like plain HTML. If leave the previous style as is, the behavior of component will lose connection with component state, the style will become chaotic and unpredictable.\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/6807",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/6807/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/6807/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/6807/events",
        "html_url": "https://github.com/facebook/react/issues/6807",
        "id": 155776231,
        "number": 6807,
        "title": "onMouseLeave doesn't work if the node gets detached",
        "user": {
            "login": "ghost",
            "id": 10137,
            "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ghost",
            "html_url": "https://github.com/ghost",
            "followers_url": "https://api.github.com/users/ghost/followers",
            "following_url": "https://api.github.com/users/ghost/following{/other_user}",
            "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
            "organizations_url": "https://api.github.com/users/ghost/orgs",
            "repos_url": "https://api.github.com/users/ghost/repos",
            "events_url": "https://api.github.com/users/ghost/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ghost/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 40929155,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Question",
                "name": "Type: Question",
                "color": "cc317c",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 5,
        "created_at": "2016-05-19T16:10:59Z",
        "updated_at": "2018-04-18T15:09:06Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "I have a problem with this kind of component:\n\n``` JavaScript\nclass onHover extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      bool: false,\n    }\n  }\n\n  render() {\n    return (\n      <div onMouseEnter={() => this.setState({ bool: true })} onMouseLeave={() => this.setState({ bool: false })}>\n        {\n          this.state.bool ? (\n            <span>[OPTION1] show after onMouseEnter</span>\n          ) : (\n            <div>[OPTION2] show after onMouseLeave</div>\n          )\n        }\n      </div>\n    )\n  }\n}\n```\n\nNotice that the first option1 is a `span`, option2 is a `div`.\n\nThis works fine when I move the mouse slowly.\nThough, if I \"cut\" through this with the mouse very fast, only the `onMouseEnter` event gets triggered, but not the `onMouseLeave` event.\n\nIt is always working though, if both options have the same tag (if both are `div` or both are `span`). \n\nEDIT:\nI think it has something to do with rerendering. When the components are of the same type, but I force a rerender, it causes the same issues. \n\n``` JavaScript\nclass onHover extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      bool: false,\n    }\n  }\n\n  render() {\n    return (\n      <div onMouseEnter={() => this.setState({ bool: true })} onMouseLeave={() => this.setState({ bool: false })}>\n        {\n          this.state.bool ? (\n            <div key={Math.random()}>[OPTION1] show after onMouseEnter</div>\n          ) : (\n            <div key={Math.random()}>[OPTION2] show after onMouseLeave</div>\n          )\n        }\n      </div>\n    )\n  }\n}\n```\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/6826",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/6826/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/6826/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/6826/events",
        "html_url": "https://github.com/facebook/react/issues/6826",
        "id": 156082300,
        "number": 6826,
        "title": "Unable to Use TestUtils.Simulate.change() Consecutively",
        "user": {
            "login": "lo-tp",
            "id": 6308071,
            "avatar_url": "https://avatars2.githubusercontent.com/u/6308071?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/lo-tp",
            "html_url": "https://github.com/lo-tp",
            "followers_url": "https://api.github.com/users/lo-tp/followers",
            "following_url": "https://api.github.com/users/lo-tp/following{/other_user}",
            "gists_url": "https://api.github.com/users/lo-tp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/lo-tp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/lo-tp/subscriptions",
            "organizations_url": "https://api.github.com/users/lo-tp/orgs",
            "repos_url": "https://api.github.com/users/lo-tp/repos",
            "events_url": "https://api.github.com/users/lo-tp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/lo-tp/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 139734344,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Test%20Utils",
                "name": "Component: Test Utils",
                "color": "eb6420",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2016-05-21T04:02:49Z",
        "updated_at": "2016-05-21T05:57:52Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "I'm using `jest` coupled with `Testutils` to test my `react` code.\nJust check the following code.\n\n``` js\n//All the variables surfix with Node are DOMElement\n nameFieldNode.value='tmp';    //initial value is not 'tmp'\n indexFieldNode.value='indext';    //initial value is not 'indext'\n TestUtils.Simulate.change(nameFieldNode);  \n TestUtils.Simulate.change(indexFieldNode);\n expect(nameFieldNode.value).toBe('tmp');\n expect(indexFieldNode.value).toBe('indext');\n```\n\nWith the above snippet, The second expect would fail and you can see that the value of indexFieldNode is not updated at all.\n\nSo I change the code to make it like this.\n\n``` js\n//All the variables surfix with Node are DOMElement\n nameFieldNode.value='tmp';    //initial value is not 'tmp'\n TestUtils.Simulate.change(nameFieldNode);  \n indexFieldNode.value='indext';    //initial value is not 'indext'\n TestUtils.Simulate.change(indexFieldNode);\n expect(nameFieldNode.value).toBe('tmp');\n expect(indexFieldNode.value).toBe('indext');\n```\n\nThis time, everything works properly.\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/6916",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/6916/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/6916/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/6916/events",
        "html_url": "https://github.com/facebook/react/issues/6916",
        "id": 157453871,
        "number": 6916,
        "title": "Form disappears without calling onSubmit",
        "user": {
            "login": "fritz-c",
            "id": 4413963,
            "avatar_url": "https://avatars1.githubusercontent.com/u/4413963?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/fritz-c",
            "html_url": "https://github.com/fritz-c",
            "followers_url": "https://api.github.com/users/fritz-c/followers",
            "following_url": "https://api.github.com/users/fritz-c/following{/other_user}",
            "gists_url": "https://api.github.com/users/fritz-c/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/fritz-c/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/fritz-c/subscriptions",
            "organizations_url": "https://api.github.com/users/fritz-c/orgs",
            "repos_url": "https://api.github.com/users/fritz-c/repos",
            "events_url": "https://api.github.com/users/fritz-c/events{/privacy}",
            "received_events_url": "https://api.github.com/users/fritz-c/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 40929155,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Question",
                "name": "Type: Question",
                "color": "cc317c",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2016-05-30T08:16:57Z",
        "updated_at": "2017-10-04T11:51:21Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "**Do you want to request a _feature_ or report a _bug_?**\nReport a bug\n\n**What is the current behavior?**\nWhen a form element disappears as the result of a state change (e.g., triggered by an onClick handler on the submit button), its onSubmit handler is not called. In HTML, even if a form element is removed from the DOM, its onSubmit handler is still called.\n\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template: https://jsfiddle.net/reactjs/69z2wepo/).**\nPlain JS + HTML version (expected behavior): https://jsfiddle.net/b22925dw/\nReproduced in React: https://jsfiddle.net/yaf6p0ga/1/\n_The commented-out setTimeout in the react code is a usable hack to fix it for the time being_\n\n**What is the expected behavior?**\nThe code specified in the form's onSubmit should be executed before the form disappears.\n\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\nReact 15.0.2 / Chrome 51.0.2704.63 (64-bit) / OS X 10.11.5\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/6927",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/6927/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/6927/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/6927/events",
        "html_url": "https://github.com/facebook/react/issues/6927",
        "id": 157600069,
        "number": 6927,
        "title": "Change event fires too many times when inputing Chinese characters in IE 9",
        "user": {
            "login": "suhaotian",
            "id": 6512574,
            "avatar_url": "https://avatars1.githubusercontent.com/u/6512574?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/suhaotian",
            "html_url": "https://github.com/suhaotian",
            "followers_url": "https://api.github.com/users/suhaotian/followers",
            "following_url": "https://api.github.com/users/suhaotian/following{/other_user}",
            "gists_url": "https://api.github.com/users/suhaotian/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/suhaotian/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/suhaotian/subscriptions",
            "organizations_url": "https://api.github.com/users/suhaotian/orgs",
            "repos_url": "https://api.github.com/users/suhaotian/repos",
            "events_url": "https://api.github.com/users/suhaotian/events{/privacy}",
            "received_events_url": "https://api.github.com/users/suhaotian/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 40929151,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
                "name": "Type: Bug",
                "color": "b60205",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2016-05-31T06:40:13Z",
        "updated_at": "2017-10-04T00:23:11Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "like #3926, but in ie9\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/6951",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/6951/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/6951/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/6951/events",
        "html_url": "https://github.com/facebook/react/issues/6951",
        "id": 158134290,
        "number": 6951,
        "title": "Changing state in onFocus and onChange for a select multiple element does not work in Firefox",
        "user": {
            "login": "skleeschulte",
            "id": 3659947,
            "avatar_url": "https://avatars0.githubusercontent.com/u/3659947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/skleeschulte",
            "html_url": "https://github.com/skleeschulte",
            "followers_url": "https://api.github.com/users/skleeschulte/followers",
            "following_url": "https://api.github.com/users/skleeschulte/following{/other_user}",
            "gists_url": "https://api.github.com/users/skleeschulte/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/skleeschulte/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/skleeschulte/subscriptions",
            "organizations_url": "https://api.github.com/users/skleeschulte/orgs",
            "repos_url": "https://api.github.com/users/skleeschulte/repos",
            "events_url": "https://api.github.com/users/skleeschulte/events{/privacy}",
            "received_events_url": "https://api.github.com/users/skleeschulte/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 40929151,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
                "name": "Type: Bug",
                "color": "b60205",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 7,
        "created_at": "2016-06-02T12:57:36Z",
        "updated_at": "2018-03-23T17:14:47Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "I want to use a controlled `<select multiple={true} />` component in React. In addition to the value I also want to keep the focused state of the select in the state. To do this, I update the state with `setState` in the `onChange`, `onFocus` and `onBlur` event handlers. Unfortunately there is an issue in Firefox: Firefox will only update the value on a change event after the select has gained focus. This means that a user has to click twice on the select element to change its value when it does not have focus. I would expect the select to gain focus and change the value at the same click.\n\nI created a jsFiddle to demonstrate the prolem: [React select multiple issue in Firefox demonstration](https://jsfiddle.net/fugf1kw9/2/)\n\nI only see this problem in Firefox and with select multiple. In IE and Chrome it is working as expected, and in Firefox it is working as expected for other form elements (simple select, checkbox, radio, text input, textarea).\n\nMy environment:\n- Firefox 46.0.1 under Win7 x64\n- React 15.1.0\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/6959",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/6959/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/6959/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/6959/events",
        "html_url": "https://github.com/facebook/react/issues/6959",
        "id": 158449680,
        "number": 6959,
        "title": "Should React warn when controlled <select> components have duplicate values?",
        "user": {
            "login": "jbinto",
            "id": 2664611,
            "avatar_url": "https://avatars2.githubusercontent.com/u/2664611?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jbinto",
            "html_url": "https://github.com/jbinto",
            "followers_url": "https://api.github.com/users/jbinto/followers",
            "following_url": "https://api.github.com/users/jbinto/following{/other_user}",
            "gists_url": "https://api.github.com/users/jbinto/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jbinto/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jbinto/subscriptions",
            "organizations_url": "https://api.github.com/users/jbinto/orgs",
            "repos_url": "https://api.github.com/users/jbinto/repos",
            "events_url": "https://api.github.com/users/jbinto/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jbinto/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 40929153,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement",
                "name": "Type: Enhancement",
                "color": "84b6eb",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 14,
        "created_at": "2016-06-03T20:36:36Z",
        "updated_at": "2017-10-04T00:25:44Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "Consider the following example (live at http://www.webpackbin.com/Vk0Q_FqmZ with React 15.0.1):\n\n``` js\nconst MySelect = (props) => (\n  <select value={this.props.value} onChange={this.props.onChange}>\n    <option value=\"fruit\">banana</option>\n    <option value=\"vegetable\">broccoli</option>\n    <option value=\"fruit\">orange</option>\n    <option value=\"vegetable\">tomato</option>\n  </select>\n);\n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {}\n    this.onSelectChange = this.onSelectChange.bind(this)\n  }\n\n  onSelectChange(e) {\n    this.setState({ selectedValue: e.target.value })\n  }\n\n  render() {\n    return <MySelect \n      value={this.state.selectedValue} \n      onChange={this.onSelectChange}\n    />\n  }\n}\n```\n\nHTML itself doesn't seem to have any problems with duplicate values in the `<select>` tag. As you can see in the example above, there are semantically valid reasons you might want to do this.\n\nBut this controlled component example makes it impossible to select e.g. \"orange\" or \"tomato\": the selection will be forced to the first matching value.  \n\nI thought about a solution that stores both the `selectedValue` and the `selectedIndex`, but react-dom's `<select>` does not take any sort of index prop, so I'd have to manipulate the internal DOM node, which I'm sure is bad form.  \n\nReact _could_ be enhanced to take a `selectedIndex`, but I foresee problems with single source of truth.\n\nThe fruit/vegetable example is a bit contrived, and there may not be many real-world scenarios you would want to do this in. My gut feeling is this should be a warning so developers (like me) don't paint themselves into a corner trying to support this case.  \n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/7024",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/7024/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/7024/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/7024/events",
        "html_url": "https://github.com/facebook/react/issues/7024",
        "id": 159842925,
        "number": 7024,
        "title": "<select> onChange not firing when using keyboard",
        "user": {
            "login": "iotch",
            "id": 2292500,
            "avatar_url": "https://avatars2.githubusercontent.com/u/2292500?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/iotch",
            "html_url": "https://github.com/iotch",
            "followers_url": "https://api.github.com/users/iotch/followers",
            "following_url": "https://api.github.com/users/iotch/following{/other_user}",
            "gists_url": "https://api.github.com/users/iotch/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/iotch/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/iotch/subscriptions",
            "organizations_url": "https://api.github.com/users/iotch/orgs",
            "repos_url": "https://api.github.com/users/iotch/repos",
            "events_url": "https://api.github.com/users/iotch/events{/privacy}",
            "received_events_url": "https://api.github.com/users/iotch/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 40929151,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
                "name": "Type: Bug",
                "color": "b60205",
                "default": false
            },
            {
                "id": 877481224,
                "url": "https://api.github.com/repos/facebook/react/labels/mentorship",
                "name": "mentorship",
                "color": "3B5998",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 14,
        "created_at": "2016-06-12T19:18:06Z",
        "updated_at": "2018-03-23T17:14:10Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "Hello. On Firefox (v31 and 40 at least) when changing `<select>` values from keyboard `onChange` not firing, actually it fires only on blur: https://jsfiddle.net/mh3mn8st/\nReact 15.1.0.\nthanks!\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/7091",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/7091/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/7091/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/7091/events",
        "html_url": "https://github.com/facebook/react/issues/7091",
        "id": 161290417,
        "number": 7091,
        "title": "Warn for string refs where owner != __self",
        "user": {
            "login": "jimfb",
            "id": 9595985,
            "avatar_url": "https://avatars3.githubusercontent.com/u/9595985?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jimfb",
            "html_url": "https://github.com/jimfb",
            "followers_url": "https://api.github.com/users/jimfb/followers",
            "following_url": "https://api.github.com/users/jimfb/following{/other_user}",
            "gists_url": "https://api.github.com/users/jimfb/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jimfb/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jimfb/subscriptions",
            "organizations_url": "https://api.github.com/users/jimfb/orgs",
            "repos_url": "https://api.github.com/users/jimfb/repos",
            "events_url": "https://api.github.com/users/jimfb/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jimfb/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 121709921,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 8,
        "created_at": "2016-06-20T20:46:42Z",
        "updated_at": "2017-10-04T00:41:53Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "body": "Sebastian wants to warn when `owner !== __self`, because this is the hard case to find when codemodding from string refs to callback refs.\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/7100",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/7100/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/7100/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/7100/events",
        "html_url": "https://github.com/facebook/react/issues/7100",
        "id": 161722681,
        "number": 7100,
        "title": "Expose React build mode/flags",
        "user": {
            "login": "jimfb",
            "id": 9595985,
            "avatar_url": "https://avatars3.githubusercontent.com/u/9595985?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jimfb",
            "html_url": "https://github.com/jimfb",
            "followers_url": "https://api.github.com/users/jimfb/followers",
            "following_url": "https://api.github.com/users/jimfb/following{/other_user}",
            "gists_url": "https://api.github.com/users/jimfb/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jimfb/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jimfb/subscriptions",
            "organizations_url": "https://api.github.com/users/jimfb/orgs",
            "repos_url": "https://api.github.com/users/jimfb/repos",
            "events_url": "https://api.github.com/users/jimfb/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jimfb/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 121709921,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 3,
        "created_at": "2016-06-22T16:04:08Z",
        "updated_at": "2017-10-04T00:43:46Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "body": "@kittens has expressed concern that people will forget to set the NODE_ENV when building their React application, which will result in babel producing bloated builds, due to our new dev-mode transforms.  The `__source` and `__self` should never be set in production, and having them set on every element would introduce substantial bloat that you wouldn't want in a production environment.  We probably want to be able to warn when this happens.\n\nIn this case, I think we might want to expose `React.mode = __DEV__` or something, such that the transform could add runtime checks to verify that React is in dev mode, and warn if not.  I know we're thinking about switching to real build flags for the various features, and maybe we want to expose all those individual flags.\n\nAnyway, opening the issue so we have a place to discuss and track.\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/7122",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/7122/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/7122/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/7122/events",
        "html_url": "https://github.com/facebook/react/issues/7122",
        "id": 162309671,
        "number": 7122,
        "title": "Polyfill MouseEvent.buttons for Safari",
        "user": {
            "login": "sagendejonge",
            "id": 2280035,
            "avatar_url": "https://avatars1.githubusercontent.com/u/2280035?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sagendejonge",
            "html_url": "https://github.com/sagendejonge",
            "followers_url": "https://api.github.com/users/sagendejonge/followers",
            "following_url": "https://api.github.com/users/sagendejonge/following{/other_user}",
            "gists_url": "https://api.github.com/users/sagendejonge/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sagendejonge/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sagendejonge/subscriptions",
            "organizations_url": "https://api.github.com/users/sagendejonge/orgs",
            "repos_url": "https://api.github.com/users/sagendejonge/repos",
            "events_url": "https://api.github.com/users/sagendejonge/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sagendejonge/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 121709921,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 7,
        "created_at": "2016-06-26T02:51:13Z",
        "updated_at": "2018-03-09T16:19:57Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "During mouse move event, 'e.buttons' returns 'undefined' in Safari.  Behaving correctly in Chrome.  While pressing the left mouse button and moving the mouse expect 'e.buttons' to return 1.  'e.nativeEvent.which' returns the correct result on Safari.\n\nSample Code:\n\n``` javascript\nimport React from 'react';\n\nexport default class Canvas extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  mouseDown(e) {\n    console.log(\"mouse down\", e.buttons, e.nativeEvent.which);\n  }\n\n  mouseMove(e) {\n    console.log(\"mouse move\", e.buttons, e.nativeEvent.which);\n  }\n\n  mouseUp(e) {\n    console.log(\"mouse up\", e.buttons, e.nativeEvent.which);\n  }\n\n  render() {\n    var canvasStyle = {\n      backgroundColor: 'rgba(0, 0, 255, 0.5)',\n      position: 'absolute',\n      top: '0px',\n      left: '0px',\n      width: '100%',\n      height: '100%'\n    }\n\n    return (\n      <div>\n        <canvas id=\"canvas\" style={canvasStyle}\n          onMouseDown={this.mouseDown.bind(this)}\n          onMouseMove={this.mouseMove.bind(this)}\n          onMouseUp={this.mouseUp.bind(this)}>\n        </canvas>\n      </div>\n    );\n  }\n}\n```\n\n**Versions**\nReact: 15.1.0\nSafari: 9.1.1 (11601.6.17)\n\n**OS**\nOS X El Capitan Version 10.11.5\n\n**Computer**\nModel Name: MacBook Air\nModel Identifier:   MacBookAir6,2\nProcessor Name: Intel Core i7\nProcessor Speed:    1.7 GHz\nNumber of Processors:   1\nTotal Number of Cores:  2\nL2 Cache (per Core):    256 KB\nL3 Cache:   4 MB\nMemory: 8 GB\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/7135",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/7135/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/7135/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/7135/events",
        "html_url": "https://github.com/facebook/react/issues/7135",
        "id": 162598411,
        "number": 7135,
        "title": "onMouseEnter propagation in double reactroot",
        "user": {
            "login": "dsvgit",
            "id": 9424830,
            "avatar_url": "https://avatars1.githubusercontent.com/u/9424830?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dsvgit",
            "html_url": "https://github.com/dsvgit",
            "followers_url": "https://api.github.com/users/dsvgit/followers",
            "following_url": "https://api.github.com/users/dsvgit/following{/other_user}",
            "gists_url": "https://api.github.com/users/dsvgit/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dsvgit/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dsvgit/subscriptions",
            "organizations_url": "https://api.github.com/users/dsvgit/orgs",
            "repos_url": "https://api.github.com/users/dsvgit/repos",
            "events_url": "https://api.github.com/users/dsvgit/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dsvgit/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 40929151,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
                "name": "Type: Bug",
                "color": "b60205",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 14,
        "created_at": "2016-06-28T04:08:47Z",
        "updated_at": "2017-10-05T18:01:08Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "I think it is bug\n\nNow onMouseEnter event handler calls in child element when there are several reactroots. \n\nTo reproduce - run fiddle and move mouse from white square to red and back. In console you can see log when you do it. Link - https://jsfiddle.net/47sn3j5c/ . It works wrong.\n\nExpected behavior: handler haves to call just when mouse enter to red square. See here simiar example but with one reactroot - https://jsfiddle.net/bs3rc2wp/1/ . It works right.\n\nReact 15.1.0\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/7205",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/7205/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/7205/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/7205/events",
        "html_url": "https://github.com/facebook/react/issues/7205",
        "id": 164150979,
        "number": 7205,
        "title": "Bot: comment on PRs when build size changes by some threshold",
        "user": {
            "login": "zpao",
            "id": 8445,
            "avatar_url": "https://avatars1.githubusercontent.com/u/8445?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zpao",
            "html_url": "https://github.com/zpao",
            "followers_url": "https://api.github.com/users/zpao/followers",
            "following_url": "https://api.github.com/users/zpao/following{/other_user}",
            "gists_url": "https://api.github.com/users/zpao/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zpao/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zpao/subscriptions",
            "organizations_url": "https://api.github.com/users/zpao/orgs",
            "repos_url": "https://api.github.com/users/zpao/repos",
            "events_url": "https://api.github.com/users/zpao/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zpao/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 71502270,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Build%20Infrastructure",
                "name": "Component: Build Infrastructure",
                "color": "f9d0c4",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2016-07-06T19:07:46Z",
        "updated_at": "2017-10-04T00:50:27Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "It would be nice to establish some threshold and have a bot comment on a PR when it adds some number of bytes to the UMD build size. Once that's setup we can potentially add some other metrics we want to track and have some notification about.\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/7221",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/7221/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/7221/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/7221/events",
        "html_url": "https://github.com/facebook/react/issues/7221",
        "id": 164421758,
        "number": 7221,
        "title": "Consider exposing an opaque component path somehow",
        "user": {
            "login": "sebmarkbage",
            "id": 63648,
            "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sebmarkbage",
            "html_url": "https://github.com/sebmarkbage",
            "followers_url": "https://api.github.com/users/sebmarkbage/followers",
            "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
            "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
            "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
            "repos_url": "https://api.github.com/users/sebmarkbage/repos",
            "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 270986513,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Big%20Picture",
                "name": "Type: Big Picture",
                "color": "61dafb",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2016-07-07T22:29:20Z",
        "updated_at": "2017-10-04T00:56:44Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "This is something I've thought about in regard to focus, hover and selection.\n\nIf you implement hover as a top level state value with the currently hovered root component as `hoverID: component` and currently focused component as `focusID: component`.\n\nNow anything in between gets rerendered and can respond to those things changing. However, that also means that everything gets rerendered. Not just the previous and next path.\n\nThe ideal would be that you store the path to that component, or extract the path from internal state.\n\nThat way we can quickly rerender only the previous and next path, while still letting anything in between react to focus/hover changing.\n\nMaybe this is more generally useful.\n\nSelection is a bit special because it might need to rerender anything in between two paths but that can also be optimized similarly - by checking if any child node corresponds to a start and end path and anything between is selected or unselected.\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/7249",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/7249/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/7249/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/7249/events",
        "html_url": "https://github.com/facebook/react/issues/7249",
        "id": 165043655,
        "number": 7249,
        "title": "Attributes and properties for Custom Components",
        "user": {
            "login": "edoardocavazza",
            "id": 3907295,
            "avatar_url": "https://avatars0.githubusercontent.com/u/3907295?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/edoardocavazza",
            "html_url": "https://github.com/edoardocavazza",
            "followers_url": "https://api.github.com/users/edoardocavazza/followers",
            "following_url": "https://api.github.com/users/edoardocavazza/following{/other_user}",
            "gists_url": "https://api.github.com/users/edoardocavazza/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/edoardocavazza/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/edoardocavazza/subscriptions",
            "organizations_url": "https://api.github.com/users/edoardocavazza/orgs",
            "repos_url": "https://api.github.com/users/edoardocavazza/repos",
            "events_url": "https://api.github.com/users/edoardocavazza/events{/privacy}",
            "received_events_url": "https://api.github.com/users/edoardocavazza/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 121709921,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 31,
        "created_at": "2016-07-12T10:19:46Z",
        "updated_at": "2017-10-24T15:44:38Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "**Do you want to request a _feature_ or report a _bug_?**\nFeature\n**What is the current behavior?**\nCustom component's properties are always set as attribute.\n**What is the expected behavior?**\nMaybe React should watch at the static `observedAttributes` property  for custom elements (https://w3c.github.io/webcomponents/spec/custom/) and then decide to set an attribute or an instance property. Otherwise, objects and array could be always passed as properties, in order to avoid `<custom-element prop=\"[object Object]\"></custom-element>`.\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/7281",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/7281/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/7281/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/7281/events",
        "html_url": "https://github.com/facebook/react/issues/7281",
        "id": 165596082,
        "number": 7281,
        "title": "Input onChange not triggered every time in IE11 if e.preventDefault() used",
        "user": {
            "login": "jmullo",
            "id": 7224076,
            "avatar_url": "https://avatars1.githubusercontent.com/u/7224076?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jmullo",
            "html_url": "https://github.com/jmullo",
            "followers_url": "https://api.github.com/users/jmullo/followers",
            "following_url": "https://api.github.com/users/jmullo/following{/other_user}",
            "gists_url": "https://api.github.com/users/jmullo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jmullo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jmullo/subscriptions",
            "organizations_url": "https://api.github.com/users/jmullo/orgs",
            "repos_url": "https://api.github.com/users/jmullo/repos",
            "events_url": "https://api.github.com/users/jmullo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jmullo/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 40929151,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
                "name": "Type: Bug",
                "color": "b60205",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 3,
        "created_at": "2016-07-14T15:54:47Z",
        "updated_at": "2017-10-04T11:54:32Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "Input onChange not triggered every time if e.preventDefault() is called in onChange handler.\n\nOccurs when typing fast: some characters are lost.\n\nReact 5.0.2 & IE11.\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/7287",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/7287/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/7287/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/7287/events",
        "html_url": "https://github.com/facebook/react/issues/7287",
        "id": 165836052,
        "number": 7287,
        "title": "Discussion: should state be immutable by default?",
        "user": {
            "login": "kevinSuttle",
            "id": 95672,
            "avatar_url": "https://avatars3.githubusercontent.com/u/95672?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/kevinSuttle",
            "html_url": "https://github.com/kevinSuttle",
            "followers_url": "https://api.github.com/users/kevinSuttle/followers",
            "following_url": "https://api.github.com/users/kevinSuttle/following{/other_user}",
            "gists_url": "https://api.github.com/users/kevinSuttle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/kevinSuttle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/kevinSuttle/subscriptions",
            "organizations_url": "https://api.github.com/users/kevinSuttle/orgs",
            "repos_url": "https://api.github.com/users/kevinSuttle/repos",
            "events_url": "https://api.github.com/users/kevinSuttle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/kevinSuttle/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 739777675,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Component%20API",
                "name": "Component: Component API",
                "color": "d4c5f9",
                "default": false
            },
            {
                "id": 710375792,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
                "name": "Type: Discussion",
                "color": "fef2c0",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 7,
        "created_at": "2016-07-15T17:15:49Z",
        "updated_at": "2017-11-03T15:54:44Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "body": "Taking some hard perspective from Redux, should a component's state be immutable by default, or would that be too much overhead for React? \n\nSide note, and possibly previously addressed topic: Shouldn't `setState()` be immutable by default? I realize there are [immutability helpers](https://facebook.github.io/react/docs/update.html), but _man_ that syntax is hard on the eyes. \n\nNot so much \"sugar\" as \"vinegar\". :) I also know there is a [section on Immutability.js](https://facebook.github.io/react/docs/advanced-performance.html#immutable-js-to-the-rescue) on the Advanced Performance page, but it doesn't address `setState()` directly.\n\nIt's not clear (at least to me) from [the setState() docs](https://facebook.github.io/react/docs/component-api.html#setstate) whether React already handles this. \n\n> returns an object\n> \ud83d\udc4d \n> \n> containing keys to update.\n> \u2753 \n\nSorry for the sidebar. Just wanting to get a confirmation either way. \nhttps://github.com/facebook/immutable-js/wiki/Immutable-as-React-state\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/7295",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/7295/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/7295/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/7295/events",
        "html_url": "https://github.com/facebook/react/issues/7295",
        "id": 166007697,
        "number": 7295,
        "title": "In NW.js app, the 'file' type <input> onChange event doesn't fire",
        "user": {
            "login": "zhouce",
            "id": 20296675,
            "avatar_url": "https://avatars0.githubusercontent.com/u/20296675?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zhouce",
            "html_url": "https://github.com/zhouce",
            "followers_url": "https://api.github.com/users/zhouce/followers",
            "following_url": "https://api.github.com/users/zhouce/following{/other_user}",
            "gists_url": "https://api.github.com/users/zhouce/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zhouce/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zhouce/subscriptions",
            "organizations_url": "https://api.github.com/users/zhouce/orgs",
            "repos_url": "https://api.github.com/users/zhouce/repos",
            "events_url": "https://api.github.com/users/zhouce/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zhouce/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 40929151,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
                "name": "Type: Bug",
                "color": "b60205",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 6,
        "created_at": "2016-07-18T01:48:12Z",
        "updated_at": "2017-10-04T11:53:32Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "I use react in my node webkit application. \nI just update the react and react-dom from 0.14.3 to 15.2.0, I haven't changed my code. But the onChange event not fire now, and there is no error console log.\n\nAny help will be appreciated.\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/7323",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/7323/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/7323/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/7323/events",
        "html_url": "https://github.com/facebook/react/issues/7323",
        "id": 166711553,
        "number": 7323,
        "title": "Optimizing Compiler: Component Folding",
        "user": {
            "login": "sebmarkbage",
            "id": 63648,
            "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sebmarkbage",
            "html_url": "https://github.com/sebmarkbage",
            "followers_url": "https://api.github.com/users/sebmarkbage/followers",
            "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
            "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
            "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
            "repos_url": "https://api.github.com/users/sebmarkbage/repos",
            "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 180616330,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Optimizing%20Compiler",
                "name": "Component: Optimizing Compiler",
                "color": "bfdadc",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 5,
        "created_at": "2016-07-21T00:21:56Z",
        "updated_at": "2016-07-25T09:55:28Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "This is like the final frontier for React but I never really wrote anything about it so I figured I'd create an issue.\n\nBasically, the idea is to utilize information about how React works to do [constant folding](https://en.wikipedia.org/wiki/Constant_folding) and [inlining](https://en.wikipedia.org/wiki/Inline_expansion) of components under certain conditions.\n\nExample Source:\n\n``` js\nfunction Foo(props) {\n  if (props.data.type === 'img') {\n    return <img src={props.data.src} className={props.className} alt={props.alt} />;\n  }\n  return <span>{props.data.type}</span>;\n}\nFoo.defaultProps = {\n  alt: \"An image of Foo.\"\n};\n```\n\n``` js\nvar CSSClasses = {\n  bar: 'bar'\n};\nmodule.exports = CSSClasses;\n```\n\n``` js\nvar Foo = require('Foo');\nvar Classes = require('Classes');\nfunction Bar(props) {\n  return <Foo data={{ type: 'img', src: props.src }} className={Classes.bar} />;\n}\n```\n\nBy knowing what Foo and Classes is made up of, we can turn the Bar component into this:\n\n``` js\nvar Foo = require('Foo');\nvar Classes = require('Classes');\nfunction Bar(props) {\n  return <Foo data={{ type: 'img', src: props.src }} className={Classes.bar} />;\n}\nfunction Bar_optimized(props) {\n  return <img src={props.src} className=\"Bar\" alt=\"An image of Foo.\" />;\n}\n```\n\n[Dead-code elimination](https://en.wikipedia.org/wiki/Dead_code_elimination) then strips it down to just:\n\n``` js\nfunction Bar_optimized(props) {\n  return <img src={props.src} className=\"Bar\" alt=\"An image of Foo.\" />;\n}\n```\n\nNow there are a bunch of different cases where this needs to bail out. For example, we need to know that the `CSSClasses` object and the `defaultProps` object is immutable, or we need to infer that it is immutable using [Escape analysis](https://en.wikipedia.org/wiki/Escape_analysis).\n\nWith classes these bail out cases are even more complex.\n\nThe problem is that current JS infrastructure is particularly bad at this kind of whole program or whole package linking. Node doesn't have a notion of per package private modules so anything can mutate anything by default. Transpilers such as Babel are set up to work on a single file at a time. They don't have access to the source of other files to do this analysis. [Rollup](https://github.com/rollup/rollup) is closer but is limited to a small set of static primitives.\n\nHowever, once smarter compilers become more prevalent in the JS world or we find ways to hack around the limitations, we can start building out more of these smarter compiler optimizations.\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/7324",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/7324/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/7324/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/7324/events",
        "html_url": "https://github.com/facebook/react/issues/7324",
        "id": 166713601,
        "number": 7324,
        "title": "Optimizing Compiler: Compiling to Internals",
        "user": {
            "login": "sebmarkbage",
            "id": 63648,
            "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sebmarkbage",
            "html_url": "https://github.com/sebmarkbage",
            "followers_url": "https://api.github.com/users/sebmarkbage/followers",
            "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
            "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
            "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
            "repos_url": "https://api.github.com/users/sebmarkbage/repos",
            "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 180616330,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Optimizing%20Compiler",
                "name": "Component: Optimizing Compiler",
                "color": "bfdadc",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2016-07-21T00:42:29Z",
        "updated_at": "2016-07-21T00:42:47Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "This optimization is a renderer specific optimization. It is about knowing how React will process a particular component in its internals and then inlining that internal work into the user code.\n\nIt comes in two flavors.\n# Known Host Component\n\n``` js\nfunction Foo(props) {\n  if (props.data.type === 'img') {\n    return <img src={props.data.src} className={props.className} />;\n  }\n  return <span className={props.className}>{props.children}</span>;\n}\n```\n\nInto this:\n\n``` js\nfunction Foo_optimizedMount(props) {\n  if (props.data.type === 'img') {\n    var img = document.createElement('img');\n    img.className = props.className;\n    img.src = props.data.src;\n    return {\n      node: img,\n      listeners: ReactEventListeners.trap(img, 'error', 'load')\n    };\n  }\n  var span = document.createElement('span');\n  span.className = props.className;\n  var children = ReactChildren.mountNestedChildrenIntoParent(this.props.children, span);\n  return { node: span, children };\n}\n\nfunction Foo_optimizedUpdate(instance, oldProps, newProps) {\n  if (oldProps.data.type !== newProps.data.type) {\n    Foo_optimizedUnmount(instance);\n    return Foo_optimizedMount(newProps);\n  }\n  if (props.data.type === 'img') {\n    img.className = props.className;\n    img.src = props.data.src;\n    return instance;\n  }\n  span.className = props.className;\n  ReactChildren.updateNestedChildrenInParent(this.props.children, instance);\n  return instance;\n}\n\nfunction Foo_optimizedUnmount(instance) {\n  if (oldProps.data.type !== newProps.data.type) {\n    Foo_optimizedUnmount(instance);\n    return Foo_optimizedMount(newProps);\n  }\n  if (props.data.type === 'img') {\n    ReactEventListeners.release(instance.listeners);\n  }\n  ReactChildren.unmountNestedChildrenInParent(instance);\n}\n```\n# Composite Components\n\nSimilarly, composite components can pick different code branches to imperatively update its children. For example, a known constant value wouldn't be considered, and comparison of a single property can potentially bail out a tree.\n\nAlthough it is unclear if this has significant benefits over these two other optimizations:\n\nhttps://github.com/facebook/react/issues/3227\nhttps://github.com/facebook/react/issues/7323\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/7387",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/7387/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/7387/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/7387/events",
        "html_url": "https://github.com/facebook/react/issues/7387",
        "id": 168534903,
        "number": 7387,
        "title": "Attach Stack at setState Calls in DEV Mode",
        "user": {
            "login": "sebmarkbage",
            "id": 63648,
            "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sebmarkbage",
            "html_url": "https://github.com/sebmarkbage",
            "followers_url": "https://api.github.com/users/sebmarkbage/followers",
            "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
            "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
            "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
            "repos_url": "https://api.github.com/users/sebmarkbage/repos",
            "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 139653724,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Core%20Utilities",
                "name": "Component: Core Utilities",
                "color": "c5def5",
                "default": false
            },
            {
                "id": 40929153,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement",
                "name": "Type: Enhancement",
                "color": "84b6eb",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2016-07-31T19:52:24Z",
        "updated_at": "2017-10-04T12:11:43Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "We have a queue for state transitions. There is a natural place for a `new Error()` stack frame to be stored there.\n\nWe could use this information to work our way back from errors to show information about which `setState` call was the source of the error.\n\nBecause of batching, it is not always possible to make the correct attribution. It could be one of several possible sources.\n\n(Specifically I'd like to use this in Fiber when the starvation protection kicks in. We can show which state transition was kept getting deferred due to higher priority work.)\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/7412",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/7412/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/7412/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/7412/events",
        "html_url": "https://github.com/facebook/react/issues/7412",
        "id": 169116087,
        "number": 7412,
        "title": "shouldComponentUpdate doesn't work well if component accepts children",
        "user": {
            "login": "dantman",
            "id": 53399,
            "avatar_url": "https://avatars2.githubusercontent.com/u/53399?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dantman",
            "html_url": "https://github.com/dantman",
            "followers_url": "https://api.github.com/users/dantman/followers",
            "following_url": "https://api.github.com/users/dantman/following{/other_user}",
            "gists_url": "https://api.github.com/users/dantman/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dantman/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dantman/subscriptions",
            "organizations_url": "https://api.github.com/users/dantman/orgs",
            "repos_url": "https://api.github.com/users/dantman/repos",
            "events_url": "https://api.github.com/users/dantman/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dantman/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 739777675,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Component%20API",
                "name": "Component: Component API",
                "color": "d4c5f9",
                "default": false
            },
            {
                "id": 121709921,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2016-08-03T12:08:31Z",
        "updated_at": "2017-11-03T15:47:34Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "body": "React's shouldComponentUpdate based performance improvements work great for improving the performance of medium-weight components with large numbers of instances. They even work well with event handlers, as you can ignore event handler changes and instead pass a locally bound method that'll access `this.props.on*` on demand. However this all fails apart you start passing react elements to pure components.\n\n``` js\n'use strict';\nimport React, {Component, PropTypes} from 'react';\nimport ReactDOM from 'react-dom';\nimport shallowEqual from 'recompose/shallowEqual';\n// shallowEqualExcluding: Fictional function that works like shallowEqual, but ignores changes to a list of props passed as the third argument\n\nclass Button extends Component {\n    static propTypes = {\n        icon: PropTypes.node.isRequired,\n        onClick: PropTypes.func\n    };\n\n    onClick = (e) => {\n        this.props.onClick(e);\n    };\n\n    shouldComponentUpdate(nextProps) {\n        // @note Doesn't actually work\n        return shallowEqualExcluding(this.props, nextProps, ['onClick']);\n    }\n\n    render() {\n        const {icon} = this.props;\n\n        return (\n            <button onClick={this.onClick}>\n                {icon}\n                {/*React.cloneElement(icon, {ref: (icon) => this.iconRef = icon})*/}\n            </button>\n        );\n    }\n}\n\nclass Icon extends Component {\n    static propTypes = {\n        name: PropTypes.string.isRequired,\n        color: PropTypes.string\n    };\n\n    shouldComponentUpdate(nextProps) {\n        return shallowEqual(this.props, nextProps);\n    }\n\n    render() {\n        const {name, color} = this.props;\n        return getSvgIcon(name, color);\n    }\n}\n\nconst nilClick = () => {};\nReactDOM.render(<Button onClick={() => alert('Clicked!')} icon={<Icon name='done'} />, document.querySelector('#container'));\nReactDOM.render(<Button onClick={nilClick} icon={<Icon name='done'} />, document.querySelector('#container')); // 2nd invovation\nReactDOM.render(<Button onClick={nilClick} icon={<Icon name='cancel'} />, document.querySelector('#container')); // 3rd invovation\n```\n\nGiven this sample; A `<Button />` component that expects an icon to be passed as an `icon` prop and a simple `<Icon />`. Both are pure components and Button is also coded to not re-render when`onClick` is changed. Pretend that Button actually has a heavy `render()` but its props and state don't change frequently.\n\nOn the second invocation, Icon should not require any prop change or render and Button should have its `onClick` prop changed but not require a render.\nOn the third invocation, Icon should require a render while Button itself does not need to render except for the change to Icon.\n\nHowever in practice Button will always re-render, including during the second invocation when nothing changes.\n\nThis is because `<Icon />` will always result in a new instance and will never be the same.\n\nNormally you could work around this within the component itself, without telling users they have to store `<Icon />` in a variable until they think they need to change its props; for functions you could pass a function that will use `this.props.*` itself and for objects you can do a deep comparison if you know the structure of the object. But for react elements, even though `shouldComponentUpdate` allows React to know if the current component has a render dependency on a sub-component, you do not have access to this information so Button cannot tell if Icon requires a render.\n\nIn practice this can turn out to be a problem when you're writing some libraries rather than an application. Notably [Material UI](http://www.material-ui.com/) suffers from this problem in production. `EnhancedSwitch`'s `render()` is not light; `EnhancedSwitch` is used by `RadioButton` and `Checkbox`; both use a `checkedIcon` and `uncheckedIcon` React element prop; you can reasonably have 100 checkboxes on one page; even if they were pure, they cannot identify whether an icon requires an update; as a result, a render of the component containing the checkboxes to check a single checkbox will result in the `render()` of all 100 `EnhancedSwitch` instances.\n\nI can think of a few ideas on\u00a0what type of API could be added to React to solve this issue.\n## shouldComponentUpdate helper\n\nThe most obvious API would be a top-level React function that given the instance context, old ReactElement, and new ReactElement would return the result of a Component's `shouldComponentUpdate`. Then heavy parent components can use that to implement a `shouldComponentUpdate` that is aware of render dependencies in its children.\n(As a bonus, theoretically you could temporarily remember this while you're walking the current tree; then instead of calling `shouldComponentUpdate` multiple times for every (potentially nested) component the result is simply that `shouldComponentUpdate` calls are raised up to the highest level where a component is render-dependent on them)\n\n`React.shouldComponentUpdate(this, this.props.icon, nextProps.icon)`\n\nHowever I expect the problem we have with this is that `shouldComponentUpdate` is also responsible for state dependent updates and `this` is supposed to be a rendered instance, not a ReactElement instance. While you know `context` from passing the current instance, you do not have a reference to the state from either of the props.\n## ref based shouldComponentUpdate helper\n\nThe second most obvious API would be a `shouldComponentUpdate` helper that instead uses a ref.\n\n`React.shouldComponentUpdate(this.iconRef, nextProps.icon)`\n\nThe downside to this is that to get a ref for a component you didn't create, you inevitably have to use `React.cloneElement`.\n## render passthrough\n\nThe next idea I had was a render passthrough. A way during the render process for a component to say \"I do not need a render()/update, but these children of mine may\" which would tell React to skip render() and then run `shouldComponentUpdate` on the instances deeper in the tree.\n\nHowever those components only know if they need updates if you pass them the new props; so a passthrough won't work. We'd instead need a way to tell react that it should not run `render()` but do pass on an update to a specific component instance\n\n`this.renderRef(this.iconRef, nextProps.icon);`\n\nThe advantage of this over using `shouldComponentUpdate` is that instead of only allowing medium components wrapping light components to only `render()` when a child requires it; we also allow heavy components to never `render()` unless they themselves require it, while still allowing them to permit their light children to update.\n# partial renders\n\nThat `shouldComponentUpdate` based `renderRef` only applying updates to a component child feels somewhat awkward and forced though. So a more robust idea might be a partial render lifecycle that optionally runs when `shouldComponentUpdate => false` and can call for the render of a sub-tree that belongs to the current component.\n\n``` js\nclass HeavyComponent extends Component {\n    shouldComponentUpdate(nextProps) {\n        // Ignore icon and children\n        return nextProps.text !== this.props.text;\n    }\n\n    render() {\n        const {text, icon, children} = this.props;\n\n        text = doSomethingAbsurdlyCpuIntensiveAndHardToFactorOutOfThisComponent(text);\n\n        return (\n            <div>\n                <h2>\n                    {React.cloneElement(icon, {ref: (icon) => this.iconRef = icon})}\n                    {text}\n                </h2>\n                <Wrapper ref='subtree'>\n                    {children}\n                </Wrapper>\n        );\n    }\n\n    componentSkippedRender(nextProps/*, nextState*/) {\n        this.subRender(this.iconRef, React.cloneElement(icon, {ref: (icon) => this.iconRef = icon}));\n\n        this.subRender(\n            this.refs.subtree,\n            <Wrapper ref='subtree'>\n                {children}\n            </Wrapper>\n        );\n    }\n}\n```\n\nThough `this.subRender` probably has potential for conflicts, so I expect the most react-line way to name that would be something like `React.renderSubtreeIntoComponent(parentComponent, nextElement, component)` which would be invoked using `React.renderSubtreeIntoComponent(this, /* subtree */, this.refs.subtree);`.\n\nThe `<Wrapper>` I used would be a really light component that probably would just render its children. It's there because `React.renderSubtreeIntoComponent` should probably not accept dom refs; this should be part of React lifecycle/walker, not part of client side browser only react-dom like `ReactDOM.unstable_renderSubtreeIntoContainer`.\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/7415",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/7415/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/7415/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/7415/events",
        "html_url": "https://github.com/facebook/react/issues/7415",
        "id": 169199362,
        "number": 7415,
        "title": "Freeze classes and defaultProps in DEV mode",
        "user": {
            "login": "sebmarkbage",
            "id": 63648,
            "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sebmarkbage",
            "html_url": "https://github.com/sebmarkbage",
            "followers_url": "https://api.github.com/users/sebmarkbage/followers",
            "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
            "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
            "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
            "repos_url": "https://api.github.com/users/sebmarkbage/repos",
            "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 139653724,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Core%20Utilities",
                "name": "Component: Core Utilities",
                "color": "c5def5",
                "default": false
            },
            {
                "id": 40929153,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement",
                "name": "Type: Enhancement",
                "color": "84b6eb",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 5,
        "created_at": "2016-08-03T18:23:45Z",
        "updated_at": "2017-10-04T12:13:39Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "To make compiler optimizations around classes and inlining defaultProps we need to know that they don't get mutated. This escape analysis can be difficult to do in a JS compiler so we should start enforce it so we don't have to rely on escape analysis.\n\n``` js\nconst type = element.type;\nif (typeof type === 'function' && !type.wasTaggedReactComponent) {\n  Object.defineProperty(type, 'wasTaggedReactComponent', { value: true });\n  Object.defineProperty(type, 'defaultProps', { writable: false, configurable: false });\n  Object.defineProperty(type.prototype, 'render', { writable: false, configurable: false });\n  Object.defineProperty(type.prototype, 'componentDidUpdate', { writable: false, configurable: false });\n  ...\n  Object.freeze(type);\n  Object.freeze(type.defaultProps);\n  Object.freeze(type.prototype);\n}\n```\n\nWe can also make them getters/setters so that we can make nice warning messages for sets. Although we should weigh this against slowing down DEV mode.\n\nIf a property exists it should preserve its enumerability. If a property doesn't exist it is still ok to attach a getter/setter as long as it is non-enumerable.\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/7489",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/7489/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/7489/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/7489/events",
        "html_url": "https://github.com/facebook/react/issues/7489",
        "id": 170995339,
        "number": 7489,
        "title": "input element `setSelectionRange` after backspace does not work in IE10",
        "user": {
            "login": "msafi",
            "id": 4027731,
            "avatar_url": "https://avatars2.githubusercontent.com/u/4027731?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/msafi",
            "html_url": "https://github.com/msafi",
            "followers_url": "https://api.github.com/users/msafi/followers",
            "following_url": "https://api.github.com/users/msafi/following{/other_user}",
            "gists_url": "https://api.github.com/users/msafi/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/msafi/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/msafi/subscriptions",
            "organizations_url": "https://api.github.com/users/msafi/orgs",
            "repos_url": "https://api.github.com/users/msafi/repos",
            "events_url": "https://api.github.com/users/msafi/events{/privacy}",
            "received_events_url": "https://api.github.com/users/msafi/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 40929151,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
                "name": "Type: Bug",
                "color": "b60205",
                "default": false
            },
            {
                "id": 710722093,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
                "name": "Type: Needs Investigation",
                "color": "fbca04",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2016-08-13T06:07:51Z",
        "updated_at": "2018-01-05T21:14:57Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "**Do you want to request a _feature_ or report a _bug_?**\n\nReport a bug.\n\n**What is the current behavior?**\n1. Open [this demo](https://jsfiddle.net/c49bj73v/6/) in IE10\n2. Type any five character text\n3. Caret should be at position `2` (i.e. `12|345`) because it is forced there after every change with `setSelectionRange`\n4. Use arrow or mouse to move caret to position `5` (i.e. `12345|`).\n5. Press backspace\n6. Caret goes to position `4` (i.e. `1234|`)\n\n**What is the expected behavior?**\n\nCaret should obey `setSelectionRange` and go to position `2` even after backspace on IE10.\n\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\n\nThis bug started at React v15.0.0. React v14.8 did not have this problem.\n\nThis issue was reported here https://github.com/msafi/text-mask/issues/133. @Heymdall found out that if you wrap `setSelectionRange` in a `setTimeout(..., 0)`, it sets the position correctly, though the user would have to type slowly to ensure this always happens, so that is not a workaround.\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/7552",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/7552/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/7552/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/7552/events",
        "html_url": "https://github.com/facebook/react/issues/7552",
        "id": 172927927,
        "number": 7552,
        "title": "Support Symbol keys for props",
        "user": {
            "login": "zemlanin",
            "id": 711514,
            "avatar_url": "https://avatars1.githubusercontent.com/u/711514?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zemlanin",
            "html_url": "https://github.com/zemlanin",
            "followers_url": "https://api.github.com/users/zemlanin/followers",
            "following_url": "https://api.github.com/users/zemlanin/following{/other_user}",
            "gists_url": "https://api.github.com/users/zemlanin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zemlanin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zemlanin/subscriptions",
            "organizations_url": "https://api.github.com/users/zemlanin/orgs",
            "repos_url": "https://api.github.com/users/zemlanin/repos",
            "events_url": "https://api.github.com/users/zemlanin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zemlanin/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 739777675,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Component%20API",
                "name": "Component: Component API",
                "color": "d4c5f9",
                "default": false
            },
            {
                "id": 121709921,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 14,
        "created_at": "2016-08-24T11:29:59Z",
        "updated_at": "2018-01-05T20:04:18Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "**Do you want to request a _feature_ or report a _bug_?**\nI want to report a bug\n\n**What is the current behavior?**\n`render()` doesn't receive props with Symbol keys (for example, `{[Symbol()]: 'lol'}`). I guess it is because of `hasOwnProperty` in [ReactElement.createElement](https://github.com/facebook/react/blob/a56e105081e27877a2ecbfdc8d591e3b151b2af1/src/isomorphic/classic/element/ReactElement.js#L223)\n\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via jsfiddle or similar.**\nhttps://jsfiddle.net/sh2xbm3x/1/\n\n**What is the expected behavior?**\nSymbol-keyed `props` passed to `render()` \n\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\nEvery single one, as far as I know\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/7612",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/7612/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/7612/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/7612/events",
        "html_url": "https://github.com/facebook/react/issues/7612",
        "id": 173991283,
        "number": 7612,
        "title": "ReactTestRenderer custom depth rendering",
        "user": {
            "login": "lasekio",
            "id": 8137000,
            "avatar_url": "https://avatars0.githubusercontent.com/u/8137000?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/lasekio",
            "html_url": "https://github.com/lasekio",
            "followers_url": "https://api.github.com/users/lasekio/followers",
            "following_url": "https://api.github.com/users/lasekio/following{/other_user}",
            "gists_url": "https://api.github.com/users/lasekio/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/lasekio/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/lasekio/subscriptions",
            "organizations_url": "https://api.github.com/users/lasekio/orgs",
            "repos_url": "https://api.github.com/users/lasekio/repos",
            "events_url": "https://api.github.com/users/lasekio/events{/privacy}",
            "received_events_url": "https://api.github.com/users/lasekio/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 710400704,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Test%20Renderer",
                "name": "Component: Test Renderer",
                "color": "006b75",
                "default": false
            },
            {
                "id": 121709921,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 3,
        "created_at": "2016-08-30T11:08:45Z",
        "updated_at": "2017-10-04T12:31:27Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "body": "**Do you want to request a _feature_ or report a _bug_?**\nFeature\n\n**What is the current behavior?**\n\n``` jsx\n// MyComponent.js\nimport React from \"react\";\nimport ThirdPartyComponent from 'third-party-component';\n\nfunction MyInternalComponent() {\n  return <div>test</div>;\n}\n\nexport default function MyComponent() {\n  return <div>\n    <MyInternalComponent></MyInternalComponent>\n    <ThirdPartyComponent someProp={true}></ThirdPartyComponent>\n  </div>;\n}\n\n// test.js\nimport ReactTestRenderer from \"react-test-renderer\";\nimport React from \"react\";\nimport MyComponent from \"./MyComponent.js\";\n\nconst renderer = ReactTestRenderer.create(<MyComponent/>);\n\nconsole.log(renderer.toJSON());\n```\n\nThis renders whole tree of DOM which is actually expected behaviour. The problem is, that I dont want render `ThirdPartyComponent`, only `MyInternalComponent`.  Shallow renderer isnt answer because shallow would not render `MyInternalComponent` at all. Which is problem because it's hard to divide component into smaller, internal chunks.\n\nI have done some work in order to achieve this in #5513. It was fully working patch. It was done as part of ShallowRenderer but now we have TestRenderer. Besides this patch is pretty old so resolving conflicts would be very hard.\n\n**What is the expected behavior?**\n\nI would love to provide \"blacklist\" of components which I don't want to render:\n\n``` js\nimport ThirdPartyComponent from 'third-party-component';\n//...\n\nconst renderer = ReactTestRenderer.create(\n    <MyComponent/>, \n    {\n        dontRender: [ThirdPartyComponent]\n    }\n);\n```\n\nThis would return jsx:\n\n``` js\n<div>\n    <div>test</div>\n    <ThirdPartyComponent someProp={true}></ThirdPartyComponent>\n</div>\n```\n\nSo we can test props returned for `ThirdPartyComponent` and internal logic.\n\nIt's combine of full and shallow renderer.\n\nI have some ideas of implementation but i dont want waste my time writing code which won't be marged into master anyway. \n\nThis possibly would allow to resolve https://github.com/airbnb/enzyme/issues/250.\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/7671",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/7671/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/7671/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/7671/events",
        "html_url": "https://github.com/facebook/react/issues/7671",
        "id": 175393882,
        "number": 7671,
        "title": "Deprecate componentWillMount Maybe?",
        "user": {
            "login": "sebmarkbage",
            "id": 63648,
            "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sebmarkbage",
            "html_url": "https://github.com/sebmarkbage",
            "followers_url": "https://api.github.com/users/sebmarkbage/followers",
            "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
            "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
            "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
            "repos_url": "https://api.github.com/users/sebmarkbage/repos",
            "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 739777675,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Component%20API",
                "name": "Component: Component API",
                "color": "d4c5f9",
                "default": false
            },
            {
                "id": 710375792,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
                "name": "Type: Discussion",
                "color": "fef2c0",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 81,
        "created_at": "2016-09-07T01:48:55Z",
        "updated_at": "2018-02-09T07:08:26Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "Let's use this thread to discuss use cases for componentWillMount and alternative solutions to those problems. Generally the solution is simply to use componentDidMount and two pass rendering if necessary.\n\nThere are several problems with doing global side-effects in the \"componentWill\" phase. That includes starting network requests or subscribing to Flux stores etc.\n\n1) It is confusing when used with error boundaries because currently `componentWillUnmount` can be called without `componentDidMount` ever being called. `componentWill*` is a false promise until all the children have successfully completed. Currently, this only applies when error boundaries are used but we'll probably want to revert this decision and simply not call `componentWillUnmount` here.\n\n2) The Fiber experiment doesn't really have a good way to call `componentWillUnmount` when a new render gets aborted because a higher priority update interrupted it. Similarly, our sister project [ComponentKit](http://componentkit.org/) does reconciliation in threads where it is not safe to perform side-effects yet.\n\n3) Callbacks from `componentWillMount` that update parent components with a `setState` is completely unsupported and lead to strange and order dependent race conditions. We already know that we want to deprecate that pattern.\n\n4) The reconciliation order of children can easily be dependent upon if you perform global side-effects in `componentWillMount`. They're already not fully guaranteed because updates can cause unexpected reconciliation orders. Relying on order also limits future use cases such as async or streaming rendering and parallelized rendering.\n\nThe only legit use case for `componentWillMount` is to call `this.setState` on yourself. Even then you never really need it since you can just initialize your initial state to whatever you had. We only really kept it around for a very specific use case:\n\n``` js\nclass Foo {\n  state = { data: null };\n  // ANTI-PATTERN\n  componentWillMount() {\n    this._subscription = GlobalStore.getFromCacheOrFetch(data => this.setState({ data: data });\n  }\n  componentWillUnmount() {\n    if (this._subscription) {\n      GlobalStore.cancel(this._subscription);\n    }\n  }\n  ...\n}\n```\n\nWhen the same callback can be used both synchronously and asynchronously it is convenient to avoid an extra rerender if data is already available.\n\nThe solution is to split this API out into a synchronous version and an asynchronous version.\n\n``` js\nclass Foo {\n  state = { data: GlobalStore.getFromCacheOrNull() };\n  componentDidMount() {\n    if (!this.state.data) {\n      this._subscription = GlobalStore.fetch(data => this.setState({ data: data });\n    }\n  }\n  componentWillUnmount() {\n    if (this._subscription) {\n      GlobalStore.cancel(this._subscription);\n    }\n  }\n  ...\n}\n```\n\nThis guarantees that the side-effect only happens if the component successfully mounts. If the async side-effect is needed, then a two-pass rendering is needed regardless.\n\nI'd argue that it is not too much boilerplate since you need a `componentWillUnmount` anyway. This can all be hidden inside a Higher-Order Component.\n\nGlobal side-effects in `componentWillReceiveProps` and `componentWillUpdate` are also bad since they're not guaranteed to complete. Due to aborts or errors. You should prefer `componentDidUpdate` when possible. However, they will likely remain in some form even if their use case is constrained. They're also not nearly as bad since they will still get their `componentWillUnmount` invoked for cleanup.\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/7678",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/7678/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/7678/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/7678/events",
        "html_url": "https://github.com/facebook/react/issues/7678",
        "id": 175631601,
        "number": 7678,
        "title": "Umbrella: New Life-Cycles Ideas",
        "user": {
            "login": "sebmarkbage",
            "id": 63648,
            "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sebmarkbage",
            "html_url": "https://github.com/sebmarkbage",
            "followers_url": "https://api.github.com/users/sebmarkbage/followers",
            "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
            "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
            "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
            "repos_url": "https://api.github.com/users/sebmarkbage/repos",
            "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 739777675,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Component%20API",
                "name": "Component: Component API",
                "color": "d4c5f9",
                "default": false
            },
            {
                "id": 710375792,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
                "name": "Type: Discussion",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 710615342,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Umbrella",
                "name": "Type: Umbrella",
                "color": "5319e7",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 24,
        "created_at": "2016-09-07T23:36:49Z",
        "updated_at": "2018-03-26T11:12:37Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "I'll use this gather a few ideas of new life-cycle methods that help avoid existing problematic cases when using Fiber or other async rendering solutions.\n- `componentDidServerRender`: Gets called after the entire tree has rendered on the server. Useful for aborting buffered renders, or logging. Got the idea from #7671. This could possibly replace `componentWillMount`.\n- `componentWasMounted` and `componentWasUpdated`: Similar to `componentDidMount` and `componentDidUpdate` but happens asynchronously in spare cycles after a component has already appeared on the screen. That way triggering things like I/O doesn't have to block the component from rendering on the screen and dropping frames since `componentDidMount` have to be synchronous. This is not appropriate to use for Flux store subscriptions since you may be missing events that way. However, we can use \"lazy subscriptions\" as an alternative solution. #5053.\n- `componentWasUnmounted`: Similar to the above, this would happen in spare cycles for clean up purposes where clean up is not synchronously needed. This may not be needed as a separate life-cycles since we can possibly just make `componentWillUnmount` async. #6003.\n- `componentWillMountNow` and `componentWillUpdateNow`: This would be a fiber specific thing. Unlike the current `componentWillMount` / `componentWillUpdate` it actually happens _after_ `render` and _after_ all the children's `render` have been called, but right _before_ any side-effects are committed to the DOM. The use case of reading the current scroll position in `componentWillUpdate` only to reset it later doesn't work with async rendering because you can scroll between `componentWillUpdate` and `componentDidUpdate`. This could possibly replace `componentWillUpdate`.\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/7685",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/7685/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/7685/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/7685/events",
        "html_url": "https://github.com/facebook/react/issues/7685",
        "id": 175864617,
        "number": 7685,
        "title": "React.Children.count is incorrect for false value",
        "user": {
            "login": "bgw",
            "id": 180404,
            "avatar_url": "https://avatars2.githubusercontent.com/u/180404?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bgw",
            "html_url": "https://github.com/bgw",
            "followers_url": "https://api.github.com/users/bgw/followers",
            "following_url": "https://api.github.com/users/bgw/following{/other_user}",
            "gists_url": "https://api.github.com/users/bgw/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bgw/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bgw/subscriptions",
            "organizations_url": "https://api.github.com/users/bgw/orgs",
            "repos_url": "https://api.github.com/users/bgw/repos",
            "events_url": "https://api.github.com/users/bgw/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bgw/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 139653724,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Core%20Utilities",
                "name": "Component: Core Utilities",
                "color": "c5def5",
                "default": false
            },
            {
                "id": 710375792,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
                "name": "Type: Discussion",
                "color": "fef2c0",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 7,
        "created_at": "2016-09-08T21:06:37Z",
        "updated_at": "2018-05-10T02:17:54Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "**Do you want to request a _feature_ or report a _bug_?**\n\nI think this is a bug.\n\n**What is the current behavior?**\n\nIf you try to use `React.Children.count`, and the children contains a child with the value `false`, the result will be off by one. For example,\n\n```\nfunction Root() {\n    return (\n    <Hello>\n      {false}\n    </Hello>\n  );\n}\n\nfunction Hello({children}) {\n  return (\n    <div>\n      Count: {React.Children.count(children)}\n      <br />\n      toArray length: {React.Children.toArray(children).length}\n    </div>\n  );\n}\n```\n\nWill render\n\n```\nCount: 1\ntoArray length: 0\n```\n\nIf you replace `false` with `null` or `[]` the count will be 0.\n\n[Here's a fiddle that demonstrates the issue](https://jsfiddle.net/nqy0re3a/).\n\n**What is the expected behavior?**\n\nThe count shouldn't include `false` nodes.\n\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\n\nI've repro'd this on Firefox 48 and Chrome 53. I don't know if this worked in previous versions of React.\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/7711",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/7711/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/7711/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/7711/events",
        "html_url": "https://github.com/facebook/react/issues/7711",
        "id": 176615904,
        "number": 7711,
        "title": "[bug] click not disabled on <fieldset disabled><button onClick={() => alert('clicked')}><span>click me</span></button></fieldset>",
        "user": {
            "login": "brillout",
            "id": 1005638,
            "avatar_url": "https://avatars2.githubusercontent.com/u/1005638?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/brillout",
            "html_url": "https://github.com/brillout",
            "followers_url": "https://api.github.com/users/brillout/followers",
            "following_url": "https://api.github.com/users/brillout/following{/other_user}",
            "gists_url": "https://api.github.com/users/brillout/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/brillout/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/brillout/subscriptions",
            "organizations_url": "https://api.github.com/users/brillout/orgs",
            "repos_url": "https://api.github.com/users/brillout/repos",
            "events_url": "https://api.github.com/users/brillout/events{/privacy}",
            "received_events_url": "https://api.github.com/users/brillout/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 40929151,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
                "name": "Type: Bug",
                "color": "b60205",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 6,
        "created_at": "2016-09-13T11:28:53Z",
        "updated_at": "2018-01-03T12:36:21Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "body": "**bug**\n\nIn the following\n\n``` jsx\nconst Component = () =>\n        <fieldset disabled>\n            <button\n              onClick={() => alert('clicked by React')}\n            >click me here and <span style={{color: 'red'}}>here</span></button>\n        </fieldset>;\n```\n\nclicking on `click me here and` will not trigger `alert('clicked by React')` whereas clicking on the red `here` will trigger `alert('clicked by React')`.\n\nDemo: https://jsfiddle.net/ropbvL3y/\n\nThanks for React, it's an incredibly well designed tool.\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/7720",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/7720/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/7720/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/7720/events",
        "html_url": "https://github.com/facebook/react/issues/7720",
        "id": 176751171,
        "number": 7720,
        "title": "Skip comparing known constant props during reconciliation",
        "user": {
            "login": "jtadmor",
            "id": 8089974,
            "avatar_url": "https://avatars2.githubusercontent.com/u/8089974?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jtadmor",
            "html_url": "https://github.com/jtadmor",
            "followers_url": "https://api.github.com/users/jtadmor/followers",
            "following_url": "https://api.github.com/users/jtadmor/following{/other_user}",
            "gists_url": "https://api.github.com/users/jtadmor/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jtadmor/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jtadmor/subscriptions",
            "organizations_url": "https://api.github.com/users/jtadmor/orgs",
            "repos_url": "https://api.github.com/users/jtadmor/repos",
            "events_url": "https://api.github.com/users/jtadmor/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jtadmor/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 180616330,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Optimizing%20Compiler",
                "name": "Component: Optimizing Compiler",
                "color": "bfdadc",
                "default": false
            },
            {
                "id": 121709921,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 8,
        "created_at": "2016-09-13T21:12:40Z",
        "updated_at": "2017-10-04T15:28:31Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "**Do you want to request a _feature_ or report a _bug_?**\n\n_Feature_\n\n**What is the current behavior?**\n\nCurrently, whether a prop is expected to change or not, it is passed through props. There is no way for us as developers to mark a prop as fixed (should never change over the lifecycle of a component).\n\n**What is the expected behavior?**\n\nThese would _not_ be static properties, i.e. they can change from instance to instance. But they are created at initial render and never change (`===`) from the original. Ideally, though I'm not sure on implementation, they would also always be `deepEqual` to the original (perhaps something like `Object.freeze(Object.assign({}, originalObject))`.\n\nAdvantages to allowing props to be explicitly marked as fixed:\n1. shouldComponentUpdate would be better if a lot if certain props automatically don't / can't change\n2. Allow for errors / warnings when a prop marked as fixed is changed after the initial render.\n3. Possible compiler / render optimizations knowing that particular props will never change over the course of multiple renders. In particular, if a component only has fixed props (including children), we know the render output is fixed, and we can just inline that output into the parent render output.\n\nOne possible API would allow a separate fixedProps category.\n\n`React.createElement(MyComponent, { name: 'Hello' }, children, { message: 'Always this one string' })` (maintain signature)\n\nFor JSX, one (very mediocre) idea would be something like:\n`<MyComponent name=\"Hello\" $fixed.message=\"Always this one string\" />`\n\nAnother would be a separate prop called $fixed or something similar.\n\n`React.createElement(MyComponent, { name: 'Hello', $fixed: { message: 'Always this one string' } }, children)`\n`<MyComponent name=\"Hello\" $fixed={{ message: 'Always this one string' }} />`\n\nIt would be critical that `props` and `fixedProps` would be merged when the component is actually created. `this.props` would always contain all props, functional components still get one arg, and thus nobody has to rewrite render for any component.\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/7769",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/7769/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/7769/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/7769/events",
        "html_url": "https://github.com/facebook/react/issues/7769",
        "id": 177895688,
        "number": 7769,
        "title": "input autoFocus causes focus to be emitted before ref",
        "user": {
            "login": "syranide",
            "id": 1714255,
            "avatar_url": "https://avatars1.githubusercontent.com/u/1714255?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/syranide",
            "html_url": "https://github.com/syranide",
            "followers_url": "https://api.github.com/users/syranide/followers",
            "following_url": "https://api.github.com/users/syranide/following{/other_user}",
            "gists_url": "https://api.github.com/users/syranide/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/syranide/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/syranide/subscriptions",
            "organizations_url": "https://api.github.com/users/syranide/orgs",
            "repos_url": "https://api.github.com/users/syranide/repos",
            "events_url": "https://api.github.com/users/syranide/events{/privacy}",
            "received_events_url": "https://api.github.com/users/syranide/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 760751171,
                "url": "https://api.github.com/repos/facebook/react/labels/Difficulty:%20challenging",
                "name": "Difficulty: challenging",
                "color": "f2687c",
                "default": false
            },
            {
                "id": 40929151,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
                "name": "Type: Bug",
                "color": "b60205",
                "default": false
            },
            {
                "id": 877481224,
                "url": "https://api.github.com/repos/facebook/react/labels/mentorship",
                "name": "mentorship",
                "color": "3B5998",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 11,
        "created_at": "2016-09-19T20:56:27Z",
        "updated_at": "2018-04-13T05:53:01Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "body": "https://jsfiddle.net/nnwd2c34/\n\nCan reproduce on Chrome, but not in IE11.\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/7901",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/7901/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/7901/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/7901/events",
        "html_url": "https://github.com/facebook/react/issues/7901",
        "id": 181504195,
        "number": 7901,
        "title": "Bypass synthetic event system for Web Component events",
        "user": {
            "login": "staltz",
            "id": 90512,
            "avatar_url": "https://avatars3.githubusercontent.com/u/90512?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/staltz",
            "html_url": "https://github.com/staltz",
            "followers_url": "https://api.github.com/users/staltz/followers",
            "following_url": "https://api.github.com/users/staltz/following{/other_user}",
            "gists_url": "https://api.github.com/users/staltz/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/staltz/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/staltz/subscriptions",
            "organizations_url": "https://api.github.com/users/staltz/orgs",
            "repos_url": "https://api.github.com/users/staltz/repos",
            "events_url": "https://api.github.com/users/staltz/events{/privacy}",
            "received_events_url": "https://api.github.com/users/staltz/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 710375792,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
                "name": "Type: Discussion",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 121709921,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 54,
        "created_at": "2016-10-06T19:27:26Z",
        "updated_at": "2017-10-04T13:51:59Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "To use a Web Component in React, you must directly attach an event listener to the React ref for that WC. We could change the implementation so that when React detects a custom element (tag names with dashes, like `my-component`), it will bypass the synthetic event system (and the whitelist) and just attach the event listener on the element itself.\n\nWhy bypass the synthetic event system? Because _anyway_ we already need to bypass it manually when using a Web Component. I'm not so familiar with the React codebase, but this naive approach seems to work. Whoever uses Web Components in React can be responsible for whatever downsides that would cause, maybe in performance, I don't know. They are already having those (supposed) downsides, this issue is just about the convenience of WC usage inside React.\n\nI was about to send a PR for this, but thought of opening an issue. I looked through the issues and didn't see any existing one related to the handling of WC events.\n\n**What is the current behavior?**\n\nA WC custom event (e.g. `flipend`) must be handled by attaching the event listener directly to the element in componentDidMount using a ref.\n\nhttp://jsbin.com/yutocopasu/1/edit?js,output\n\nReact v15.1.0\n\n``` js\nclass HelloMessage extends React.Component {\n  handleHelloClick() {\n    this.refs['foo'].toggle();\n  }\n\n  handleFlipend(ev) {\n    console.log('Handle flip end');\n  }\n\n  componentDidMount() {\n    this.refs['foo'].addEventListener('flipend', ev =>\n      this.handleFlipend(ev);\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <div onClick={ev => this.handleHelloClick()}>\n          Hello {this.props.name}, click me!\n        </div>\n        <brick-flipbox class=\"demo\" ref=\"foo\">\n          <div>front</div>\n          <div>back</div>\n        </brick-flipbox>\n      </div>\n    );\n  }\n}\n```\n\n**What is the expected behavior?**\n\nA WC custom event can be handled with `onMyEvent={ev => this.handleMyEvent(ev)}` on the ReactElement corresponding to the WC.\n\n``` js\nclass HelloMessage extends React.Component {\n  handleHelloClick() {\n    this.refs['foo'].toggle();\n  }\n\n  handleFlipend(ev) {\n    console.log('Handle flip end');\n  }\n\n  render() {\n    return (\n      <div>\n        <div onClick={ev => this.handleHelloClick()}>\n          Hello {this.props.name}, click me!\n        </div>\n        <brick-flipbox onFlipend={ev => this.handleFlipend(ev)} class=\"demo\" ref=\"foo\">\n          <div>front</div>\n          <div>back</div>\n        </brick-flipbox>\n      </div>\n    );\n  }\n}\n```\n\nPS: this snippet above still has the `ref`, but for unrelated reasons. Ideally we wouldn't need refs for handling events of WCs.\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/7906",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/7906/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/7906/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/7906/events",
        "html_url": "https://github.com/facebook/react/issues/7906",
        "id": 181569088,
        "number": 7906,
        "title": "[Fiber] Spill-over from child reconciliation",
        "user": {
            "login": "sebmarkbage",
            "id": 63648,
            "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sebmarkbage",
            "html_url": "https://github.com/sebmarkbage",
            "followers_url": "https://api.github.com/users/sebmarkbage/followers",
            "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
            "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
            "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
            "repos_url": "https://api.github.com/users/sebmarkbage/repos",
            "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 739761016,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Reconciler",
                "name": "Component: Reconciler",
                "color": "f9a798",
                "default": false
            },
            {
                "id": 40929153,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement",
                "name": "Type: Enhancement",
                "color": "84b6eb",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2016-10-07T01:53:54Z",
        "updated_at": "2017-11-03T15:51:36Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "This is spill-over from #7707 that I don't plan on doing in the initial batch.\r\n- [ ] Fix text node merging edge case... Search forward to find the next sibling, swap out the end of the text node to the sum of the previous value of the siblings. This trick lets us avoid back-references.\r\n- [ ] Have tag include children updated so that you can recalculate all children if needed. E.g. coroutines. Alternatively, pass the nearest host or coroutine down the tree so that it can be quickly flagged as child changed and insert/moves can be avoided to be added to the side-effect list for coroutines. The second option is probably better.\r\n- [ ] Possibly use two side-effect lists so that two passes are not needed and forward order is possible.\r\n- [x] Remove the notion of `output`? Unnecessary extra traversal and requires duck typing to know which is terminal.\r\n- [ ] Reconsider if we need backpointers. There are several optimizations that are possible with them but uses more memory.\r\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/7942",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/7942/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/7942/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/7942/events",
        "html_url": "https://github.com/facebook/react/issues/7942",
        "id": 182373497,
        "number": 7942,
        "title": "Fiber Principles: Contributing To Fiber",
        "user": {
            "login": "sebmarkbage",
            "id": 63648,
            "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sebmarkbage",
            "html_url": "https://github.com/sebmarkbage",
            "followers_url": "https://api.github.com/users/sebmarkbage/followers",
            "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
            "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
            "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
            "repos_url": "https://api.github.com/users/sebmarkbage/repos",
            "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 739761016,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Reconciler",
                "name": "Component: Reconciler",
                "color": "f9a798",
                "default": false
            },
            {
                "id": 710375792,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
                "name": "Type: Discussion",
                "color": "fef2c0",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 6,
        "created_at": "2016-10-11T21:02:05Z",
        "updated_at": "2017-11-03T15:51:36Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "I just wanted to document a few unique design patterns that apply to Fiber, but not necessarily anything else. I'll start here.\n- You may mutate the fiber that you're working on during `beginWork` and `completeWork` phases but you may not have any other global side-effects. If you need a global side-effect, that have to be moved to the `commitWork` phase.\n- Fiber is a fixed data structure. It shares the same hidden class. Never add fields outside of construction in `ReactFiber`.\n- Nothing in the reconciler uses dynamic dispatch. I.e. we don't call a first class function, except for user code such as ref callbacks, functional components, render methods, etc. The rest is a static function available in a closure. I.e. use `myHelper(obj)` instead of `obj.myHelper()`. Any time we need to branch logic we use a switch statement over a `tag` which is a number that indicates which type of object we're dealing with and which branch to take (see pattern matching).\n- Many modules are instantiated with a `HostConfig` object. It is a single constructor that gets called on initialization time. This should be inlinable by a compiler.\n- Nothing in Fiber uses the normal JS stack. Meaning it does use the stack but it can be compiled into a flat function if needed. Calling other functions is fine - the only limitation is that they can't be recursive.\n- If I can't use recursion, how do I traverse through the tree? Learn to use the singly linked list tree traversal algorithm. E.g. parent first, depth first:\n\n``` js\nlet root = fiber;\nlet node = fiber;\nwhile (true) {\n  // Do something with node\n  if (node.child) {\n    node = node.child;\n    continue;\n  }\n  if (node === root) {\n    return;\n  }\n  while (!node.sibling) {\n    if (!node.return || node.return === root) {\n      return;\n    }\n    node = node.return;\n  }\n  node = node.sibling;\n}\n```\n\nWhy does it need to be this complicated?\n- We can use the normal JS stack for this but any time we yield in a `requestIdleCallback` we would have to rebuild the stack when we continue. Since this only lasts for about 50ms when idle, we would spend some time unwinding and rebuilding the stack each time. It is not too bad. However, everything along the stack would have to be aware of how to \"unwind\" when we abort in the middle of the work flow.\n- It is plausible we could do this at the level of OCaml algebraic effects but we don't currently have all the features we need and we don't get the performance tradeoffs we want out of the box atm. This is a plausible future way forward though.\n- Most code lives outside of this recursion so it doesn't matter much for most cases.\n- Most of what React does is in the space of what the normal stack does. E.g. memoization, error handling, etc. Using the normal stack too, just makes it more difficult to get those to interact.\n- Everything we put on the stack we generally have to put on the heap too because we memoize it. Maintaining the stack and the heap with the same data is theoretically less efficient.\n- That said, all of these optimizations might be moot because JS stacks are much more efficient than JS heaps.\n- One thing that I wanted to try was to compile React components to do work directly on these data structures, just like normal programming languages compile to make mutations etc. to the stack. I think that's where the ideal implementation of React is.\n\nLet's just try it and see how it goes. :D\n\ncc @spicyj @gaearon @acdlite \n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/8011",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/8011/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/8011/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/8011/events",
        "html_url": "https://github.com/facebook/react/issues/8011",
        "id": 183838077,
        "number": 8011,
        "title": "[RFC] Enabling form.reset() on controlled inputs",
        "user": {
            "login": "nhunzaker",
            "id": 590904,
            "avatar_url": "https://avatars3.githubusercontent.com/u/590904?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nhunzaker",
            "html_url": "https://github.com/nhunzaker",
            "followers_url": "https://api.github.com/users/nhunzaker/followers",
            "following_url": "https://api.github.com/users/nhunzaker/following{/other_user}",
            "gists_url": "https://api.github.com/users/nhunzaker/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nhunzaker/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nhunzaker/subscriptions",
            "organizations_url": "https://api.github.com/users/nhunzaker/orgs",
            "repos_url": "https://api.github.com/users/nhunzaker/repos",
            "events_url": "https://api.github.com/users/nhunzaker/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nhunzaker/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 710375792,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
                "name": "Type: Discussion",
                "color": "fef2c0",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 3,
        "created_at": "2016-10-19T00:39:21Z",
        "updated_at": "2017-10-04T14:07:14Z",
        "closed_at": null,
        "author_association": "COLLABORATOR",
        "body": "I would like to make a case for supporting `form.reset()` for controlled inputs. \n### Why\n\nIn https://github.com/facebook/react/pull/7359, I'm a bit stuck working through validation issues with number/email/etc inputs in Chrome. One of those issues is that React assigns the `value` attribute on every controlled input change to prevent `form.reset()` from manipulating form input display values:\n\nhttps://jsfiddle.net/6pLjm7gr/1/\n\nWhile this prevents inputs from getting out of sync with the React components internal state it also makes it difficult for me to determine a fix. Chrome triggers input validation on `value` attribute assignment, causing console warnings, the clearing of inputs, dropping of decimal places on number inputs, etc:\n\n![issue](https://cloud.githubusercontent.com/assets/590904/17160637/6dfbca3a-5374-11e6-9a0d-0a2c52813eea.gif)\n\nI fixed this for uncontrolled inputs in https://github.com/facebook/react/pull/7750 by avoiding unnecessary assignments to `defaultValue` . I'd like to extend a similar fix to controlled inputs (only this time the `value` attribute).\n### How it could work\n\nAssign the `value` attribute when the input is created. `form.reset()` would then revert inputs to their initial value. `ReactDOMInput` could add a listener in the post-mount hook to listen to a controlled input's form's `reset` event, calling `change` on affected inputs. In this way, `reset` button types would behave much like any other user input.\n\nAnother interesting idea might be to allow controlled inputs to configure a `defaultValue` to reset to. By default, it would use the initial value of the input.\n### Final thoughts\n\nIf the answer is no, I'm not sure what to try next in #7359. Should the next step be to add documentation on known issues with controlled inputs in Chrome?\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/8012",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/8012/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/8012/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/8012/events",
        "html_url": "https://github.com/facebook/react/issues/8012",
        "id": 183867278,
        "number": 8012,
        "title": "[Fiber] Formalize States",
        "user": {
            "login": "sebmarkbage",
            "id": 63648,
            "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sebmarkbage",
            "html_url": "https://github.com/sebmarkbage",
            "followers_url": "https://api.github.com/users/sebmarkbage/followers",
            "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
            "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
            "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
            "repos_url": "https://api.github.com/users/sebmarkbage/repos",
            "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 739761016,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Reconciler",
                "name": "Component: Reconciler",
                "color": "f9a798",
                "default": false
            },
            {
                "id": 40929153,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement",
                "name": "Type: Enhancement",
                "color": "84b6eb",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2016-10-19T05:13:46Z",
        "updated_at": "2017-11-03T15:51:36Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "In Fiber there are a number of states that a component can be in. However, it is not formalized in the code right now. Instead, the state is inferred. This leads to hard to follow code. Instead we can organize the code in terms of explicit states - which is what the original prototype did.\n\nBefore componentDidMount (i.e. `current === null`):\n- Never begun.\n- Have been begun before but never completed.\n- Have been completed before, not committed, but hasn't begun this time around.\n- Begun but not yet completed.\n- Completed but not yet committed.\n\nAfter componentDidMount (i.e. `current !== null`):\n- Haven't begun an update yet\n- Have been begun before but never completed.\n- An update have been completed before, not committed, but hasn't begun this update.\n- Begun update but not yet completed.\n- Completed update but not yet committed.\n\nThe \"children\" set of a component also have some states:\n- Never reconciled.\n- The current set last committed.\n- A previously reconciled set that hasn't committed yet.\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/8260",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/8260/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/8260/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/8260/events",
        "html_url": "https://github.com/facebook/react/issues/8260",
        "id": 188594462,
        "number": 8260,
        "title": "Make sure that jest tests fail if an error is thrown within a jsdom event handler",
        "user": {
            "login": "sophiebits",
            "id": 6820,
            "avatar_url": "https://avatars2.githubusercontent.com/u/6820?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sophiebits",
            "html_url": "https://github.com/sophiebits",
            "followers_url": "https://api.github.com/users/sophiebits/followers",
            "following_url": "https://api.github.com/users/sophiebits/following{/other_user}",
            "gists_url": "https://api.github.com/users/sophiebits/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sophiebits/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sophiebits/subscriptions",
            "organizations_url": "https://api.github.com/users/sophiebits/orgs",
            "repos_url": "https://api.github.com/users/sophiebits/repos",
            "events_url": "https://api.github.com/users/sophiebits/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sophiebits/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 71502270,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Build%20Infrastructure",
                "name": "Component: Build Infrastructure",
                "color": "f9d0c4",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 7,
        "created_at": "2016-11-10T19:19:30Z",
        "updated_at": "2017-10-04T14:24:28Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "In a few situations in our unit tests, we use .dispatchEvent on a jsdom DOM node in order to use the jsdom event system:\r\n\r\nhttps://github.com/facebook/react/blob/e612826650ff68e73bff4d71db01fea8147ee1fd/src/renderers/dom/shared/wrappers/__tests__/ReactDOMInput-test.js#L127\r\n\r\nBut it appears that if the event handler throws (ex: change the onChange handler in that test to throw), then the error is silently ignored and does not cause the test to fail.\r\n\r\njsdom does make some attempt to report an error:\r\n\r\nhttps://github.com/tmpvar/jsdom/blob/9.8.3/lib/jsdom/living/events/EventTarget-impl.js#L235\r\n\r\nWe should hook into this in our jest config (scripts/jest/test-framework-setup.js) and see if we can fail any test that triggers this exception behavior. From the implementation of reportException it looks like we might be able to do an onerror handler; if that doesn't work then hooking into their \"virtual console\" may be possible.",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/8423",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/8423/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/8423/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/8423/events",
        "html_url": "https://github.com/facebook/react/issues/8423",
        "id": 191778783,
        "number": 8423,
        "title": "onChange does not work well with IE11 at Japanese IME. in React 15.4.0",
        "user": {
            "login": "mashimonator",
            "id": 2460942,
            "avatar_url": "https://avatars3.githubusercontent.com/u/2460942?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mashimonator",
            "html_url": "https://github.com/mashimonator",
            "followers_url": "https://api.github.com/users/mashimonator/followers",
            "following_url": "https://api.github.com/users/mashimonator/following{/other_user}",
            "gists_url": "https://api.github.com/users/mashimonator/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mashimonator/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mashimonator/subscriptions",
            "organizations_url": "https://api.github.com/users/mashimonator/orgs",
            "repos_url": "https://api.github.com/users/mashimonator/repos",
            "events_url": "https://api.github.com/users/mashimonator/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mashimonator/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 40929151,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
                "name": "Type: Bug",
                "color": "b60205",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 4,
        "created_at": "2016-11-26T00:52:03Z",
        "updated_at": "2017-10-04T14:45:28Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "![untitled2](https://cloud.githubusercontent.com/assets/2460942/20637058/b744111c-b3bd-11e6-97ba-5529639730f0.gif)\r\n\r\nI'm trying to make a simple text box component with a suggestion feature.\r\nHowever, in IE 11, there is an event that the Japanese IME conversion arbitrarily decides (I did not press the Enter key ...).\r\nI examined it a little by myself, but this seems to have occurred only in IE 11, it seems that it has not occurred in other browsers such as Chrome and old Ver such as IE 10.\r\nReact version is 15.4.0.\r\nThere seemed to be similar issues in the past\uff08https://github.com/facebook/react/issues/7027\uff09, but that bug has already been fixed.\r\nIs this another bug? Or maybe I do not like how to make it?\r\n\r\n```\r\n/**\r\n * SuggestTextBox\r\n */\r\nconst SuggestTextBox = React.createClass({\r\n\ttimer: null,\r\n\tgetInitialState: function(){\r\n\t\treturn {\r\n\t\t\tfocus       : false,\r\n\t\t\tsuggestList : [],\r\n\t\t\tvalue: ''\r\n\t\t};\r\n\t},\r\n\t/**\r\n\t * getSuggestListFromApi\r\n\t */\r\n\tgetSuggestListFromApi: function(value){\r\n\t\t// Request API and get response\r\n\t\tCommon.apiCall({\r\n\t\t\ttype     : 'GET',\r\n\t\t\turl      : '/api/hoge',\r\n\t\t\tdataType : 'json',\r\n\t\t\tdata     : {\r\n\t\t\t\tKeyword: value\r\n\t\t\t},\r\n\t\t\tcache    : false,\r\n\t\t\tcallback : function(result){\r\n\t\t\t\t// set the state\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tsuggestList: result.data.list,\r\n\t\t\t\t\tactiveItem: null\r\n\t\t\t\t});\r\n\t\t\t}.bind(this)\r\n\t\t});\r\n\t},\r\n\t/**\r\n\t * handleTextboxChange\r\n\t */\r\n\thandleTextboxChange: function(e){\r\n\t\tthis.setState({\r\n\t\t\tvalue: e.target.value,\r\n\t\t\tsuggestList: []\r\n\t\t});\r\n\t\tif (this.state.focus) {\r\n\t\t\tif (e.target.value) {\r\n\t\t\t\tif (this.timer) {\r\n\t\t\t\t\twindow.clearTimeout(this.timer);\r\n\t\t\t\t}\r\n\t\t\t\tthis.timer = window.setTimeout(function(){\r\n\t\t\t\t\tthis.getSuggestListFromApi(e.target.value);\r\n\t\t\t\t}.bind(this), 300);\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\t/**\r\n\t * handleFocus\r\n\t */\r\n\thandleFocus: function(e){\r\n\t\tthis.setState({\r\n\t\t\tfocus: true\r\n\t\t});\r\n\t},\r\n\t/**\r\n\t * getSuggestNodes\r\n\t */\r\n\tgetSuggestNode: function(){\r\n\t\tvar listNode = this.state.suggestList.map(function(item, idx){\r\n\t\t\treturn (\r\n\t\t\t\t<li\r\n\t\t\t\t  key={'fuga_suggestItem_'+item.id}\r\n\t\t\t\t  data-id={item.id}\r\n\t\t\t\t  data-name='fuga'\r\n\t\t\t\t  data-value={item.name}>\r\n\t\t\t\t\t{item.name}\r\n\t\t\t\t</li>\r\n\t\t\t);\r\n\t\t}.bind(this));\r\n\t\tif (listNode.length > 0) {\r\n\t\t\treturn (\r\n\t\t\t\t<ul className=\"suggestList\">\r\n\t\t\t\t\t{listNode}\r\n\t\t\t\t</ul>\r\n\t\t\t);\r\n\t\t} else {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t},\r\n\trender: function(){\r\n\t\tlet suggestNode = this.getSuggestNode();\r\n\t\treturn (\r\n\t\t\t<label>\r\n\t\t\t\t<input\r\n\t\t\t\t  type=\"text\"\r\n\t\t\t\t  name=\"fuga\"\r\n\t\t\t\t  value={this.state.value}\r\n\t\t\t\t  onChange={this.handleTextboxChange}\r\n\t\t\t\t  onFocus={this.handleFocus} />\r\n\t\t\t\t{suggestNode}\r\n\t\t\t</label>\r\n\t\t);\r\n\t}\r\n});\r\n```\r\nhttps://jsfiddle.net/mashimonator/u3b0f1xj/1/",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/8480",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/8480/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/8480/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/8480/events",
        "html_url": "https://github.com/facebook/react/issues/8480",
        "id": 193086583,
        "number": 8480,
        "title": "Strange caret behaviour in text inputs on Chrome desktop",
        "user": {
            "login": "hkeide",
            "id": 3905082,
            "avatar_url": "https://avatars1.githubusercontent.com/u/3905082?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hkeide",
            "html_url": "https://github.com/hkeide",
            "followers_url": "https://api.github.com/users/hkeide/followers",
            "following_url": "https://api.github.com/users/hkeide/following{/other_user}",
            "gists_url": "https://api.github.com/users/hkeide/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/hkeide/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/hkeide/subscriptions",
            "organizations_url": "https://api.github.com/users/hkeide/orgs",
            "repos_url": "https://api.github.com/users/hkeide/repos",
            "events_url": "https://api.github.com/users/hkeide/events{/privacy}",
            "received_events_url": "https://api.github.com/users/hkeide/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 710722093,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
                "name": "Type: Needs Investigation",
                "color": "fbca04",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 9,
        "created_at": "2016-12-02T10:47:50Z",
        "updated_at": "2017-10-04T21:57:20Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\n**If the current behavior is a bug, please provide the steps to reproduce it**\r\n\r\nIf you go to Facebook Messenger (or any web app I've found with a React input field) in Chrome and type in the string \"flflflflflflfl\" and try to move the caret backwards using the arrow keys you will see the problem. The caret \"ignores\" every other keystroke, and then jumps two places every other keystroke. Backspacing in the middle of the string also produces strange behaviour.\r\n\r\nHere is a video of the behaviour I get: \r\n\r\nhttps://youtu.be/XGBOCLczCy4\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nThe bug is present in Chrome 55.0.2883.75 on OS X 10.11.6.\r\n\r\nThe bug is also present on a fresh install of Chrome Dev Channel 57.0.2936.0 on Windows 10 from Sauce Labs\r\n\r\nThe bug is not present in Firefox or Safari on OS X.\r\n\r\nThe bug seems to be present in both controlled and uncontrolled fields (value vs defaultValue)\r\n\r\nI'm on React 15.3.2 and react-dom 15.3.1\r\n\r\nI don't know which version Facebook Messenger is on",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/8514",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/8514/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/8514/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/8514/events",
        "html_url": "https://github.com/facebook/react/issues/8514",
        "id": 194037954,
        "number": 8514,
        "title": "Undo behavior in controlled textareas works differently from the default behaviour in chrome",
        "user": {
            "login": "fabsor",
            "id": 203018,
            "avatar_url": "https://avatars1.githubusercontent.com/u/203018?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/fabsor",
            "html_url": "https://github.com/fabsor",
            "followers_url": "https://api.github.com/users/fabsor/followers",
            "following_url": "https://api.github.com/users/fabsor/following{/other_user}",
            "gists_url": "https://api.github.com/users/fabsor/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/fabsor/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/fabsor/subscriptions",
            "organizations_url": "https://api.github.com/users/fabsor/orgs",
            "repos_url": "https://api.github.com/users/fabsor/repos",
            "events_url": "https://api.github.com/users/fabsor/events{/privacy}",
            "received_events_url": "https://api.github.com/users/fabsor/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 40929151,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
                "name": "Type: Bug",
                "color": "b60205",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2016-12-07T12:33:02Z",
        "updated_at": "2017-10-04T15:32:25Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "If you control a textarea with **value**, it behaves differently when you use undo. When the textarea is controlled, you can only undo one letter at a time. This is not how undo works normally with an uncontrolled component. Undo seems to work as expected with input components.\r\n\r\nWith a controlled textarea component, you can only undo one letter at a time. The normal undo works with some kind of algorithm for how much is going to be un- or redone.\r\n\r\nYou can try the difference in this codepen:\r\n\r\nhttps://codepen.io/fabsor/pen/LbmBOv\r\n\r\nTested with React 15.3.1 and Chrome 54 and Chrome Canary. Works as expected in Firefox and Safari. It might be a Chrome bug?",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/8529",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/8529/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/8529/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/8529/events",
        "html_url": "https://github.com/facebook/react/issues/8529",
        "id": 194263457,
        "number": 8529,
        "title": "Feature Request: Support auxclick event (onAuxClick)",
        "user": {
            "login": "foray1010",
            "id": 3212221,
            "avatar_url": "https://avatars3.githubusercontent.com/u/3212221?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/foray1010",
            "html_url": "https://github.com/foray1010",
            "followers_url": "https://api.github.com/users/foray1010/followers",
            "following_url": "https://api.github.com/users/foray1010/following{/other_user}",
            "gists_url": "https://api.github.com/users/foray1010/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/foray1010/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/foray1010/subscriptions",
            "organizations_url": "https://api.github.com/users/foray1010/orgs",
            "repos_url": "https://api.github.com/users/foray1010/repos",
            "events_url": "https://api.github.com/users/foray1010/events{/privacy}",
            "received_events_url": "https://api.github.com/users/foray1010/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 121709921,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 5,
        "created_at": "2016-12-08T07:12:28Z",
        "updated_at": "2017-11-15T23:00:02Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "Version 15.4.1\r\n\r\nAs starting Chrome 55, there is a new event `auxclick` to handle middle click, and `click` doesn't trigger by middle click anymore\r\nhttps://developers.google.com/web/updates/2016/10/auxclick",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/8531",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/8531/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/8531/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/8531/events",
        "html_url": "https://github.com/facebook/react/issues/8531",
        "id": 194364627,
        "number": 8531,
        "title": "IE10 triggers onChange twice when replacing a text selection ",
        "user": {
            "login": "jfschwarz",
            "id": 524089,
            "avatar_url": "https://avatars3.githubusercontent.com/u/524089?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jfschwarz",
            "html_url": "https://github.com/jfschwarz",
            "followers_url": "https://api.github.com/users/jfschwarz/followers",
            "following_url": "https://api.github.com/users/jfschwarz/following{/other_user}",
            "gists_url": "https://api.github.com/users/jfschwarz/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jfschwarz/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jfschwarz/subscriptions",
            "organizations_url": "https://api.github.com/users/jfschwarz/orgs",
            "repos_url": "https://api.github.com/users/jfschwarz/repos",
            "events_url": "https://api.github.com/users/jfschwarz/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jfschwarz/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 40929151,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
                "name": "Type: Bug",
                "color": "b60205",
                "default": false
            },
            {
                "id": 877481224,
                "url": "https://api.github.com/repos/facebook/react/labels/mentorship",
                "name": "mentorship",
                "color": "3B5998",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 4,
        "created_at": "2016-12-08T15:27:56Z",
        "updated_at": "2018-03-26T04:46:04Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\n- Type text \"123\" in an input\r\n- Select the whole text\r\n- Type the `A` key\r\n\r\nWhen hitting the `A` key, `onChange` is triggered twice. One time `event.target.value` is `\"\"`. The second time it's `\"A\"`.\r\n\r\nThis only happens in IE10. IE9 and IE11 both behave correctly.\r\n\r\n**Demo fiddle**\r\n\r\nhttps://jsfiddle.net/69z2wepo/64637/\r\n\r\n![ie10onchange](https://cloud.githubusercontent.com/assets/524089/21014764/8883c6fa-bd5f-11e6-8e9c-65a957bbca7e.gif)\r\n\r\n**What is the expected behavior?**\r\nWhen hitting the `A` key, `onChange` is triggered only one time. `event.target.value` should be `\"A\"`.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n- React 15.4.1 (possibly also older versions)\r\n- IE10 / Windows 7\r\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/8533",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/8533/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/8533/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/8533/events",
        "html_url": "https://github.com/facebook/react/issues/8533",
        "id": 194452914,
        "number": 8533,
        "title": "Provide a way for external tools to list nodes with event info",
        "user": {
            "login": "MikeRatcliffe",
            "id": 116941,
            "avatar_url": "https://avatars0.githubusercontent.com/u/116941?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/MikeRatcliffe",
            "html_url": "https://github.com/MikeRatcliffe",
            "followers_url": "https://api.github.com/users/MikeRatcliffe/followers",
            "following_url": "https://api.github.com/users/MikeRatcliffe/following{/other_user}",
            "gists_url": "https://api.github.com/users/MikeRatcliffe/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/MikeRatcliffe/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/MikeRatcliffe/subscriptions",
            "organizations_url": "https://api.github.com/users/MikeRatcliffe/orgs",
            "repos_url": "https://api.github.com/users/MikeRatcliffe/repos",
            "events_url": "https://api.github.com/users/MikeRatcliffe/events{/privacy}",
            "received_events_url": "https://api.github.com/users/MikeRatcliffe/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 710573595,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
                "name": "Component: Developer Tools",
                "color": "fbca04",
                "default": false
            },
            {
                "id": 121709921,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 6,
        "created_at": "2016-12-08T21:45:39Z",
        "updated_at": "2017-10-04T16:01:09Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "I would like to add React event bubbles to the markup tree of Firefox Developer Tools. To do this I need a way to get a list of nodes and their attached event listeners.\r\n\r\nIf somebody can provide a way for me to do this it will be added within a day.\r\n\r\nIs this possible at the moment and, if not, what can be done to make this possible?",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/8683",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/8683/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/8683/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/8683/events",
        "html_url": "https://github.com/facebook/react/issues/8683",
        "id": 198768260,
        "number": 8683,
        "title": "Composition Events(Chinese, Japanese IME) problem in controlled components(input, textarea)",
        "user": {
            "login": "eyesofkids",
            "id": 433742,
            "avatar_url": "https://avatars3.githubusercontent.com/u/433742?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/eyesofkids",
            "html_url": "https://github.com/eyesofkids",
            "followers_url": "https://api.github.com/users/eyesofkids/followers",
            "following_url": "https://api.github.com/users/eyesofkids/following{/other_user}",
            "gists_url": "https://api.github.com/users/eyesofkids/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/eyesofkids/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/eyesofkids/subscriptions",
            "organizations_url": "https://api.github.com/users/eyesofkids/orgs",
            "repos_url": "https://api.github.com/users/eyesofkids/repos",
            "events_url": "https://api.github.com/users/eyesofkids/events{/privacy}",
            "received_events_url": "https://api.github.com/users/eyesofkids/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 40929151,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
                "name": "Type: Bug",
                "color": "b60205",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 4,
        "created_at": "2017-01-04T17:46:39Z",
        "updated_at": "2018-04-17T12:42:40Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nboth.\r\n\r\n**What is the current behavior?**\r\n\r\nThere is a existed issue [#3926](https://github.com/facebook/react/issues/3926) but it is just one of the problems in some kind of browsers.\r\n\r\nI have uploaded the detail, demo files, test results and temporary solution in [react-compositionevent](https://github.com/eyesofkids/react-compositionevent)\r\n\r\nThe main problem is when users type these words from IME(Chinese, Japanese or maybe Korean) and do something like search the database or filter out from some data, sometimes these functions will be unworkable. For example, if users type \"ni\" during the composition session, maybe it will be one of \"\u4f60\u5c3c\u6ce5\u817b\" in Chinese or one of \"\u306b\u30cb\u5c3c\u716e\" in Japanese. But in this moment, the `change` event also be fired. If the search or filter functions of the application are designed to be invoked when `change` event occured, there maybe something wrong logically. These functions should be invoked after users finished the composition session.\r\n\r\nIn React, there are three synthetic events - `onCompositionEnd`, `onCompositionStart` and `onCompositionUpdate`. If the input components(`<input...>` and `<textarea.../>`) are \"uncontrolled\", we can use them to help `onChange` to capture the text correctly. The only different point is Google Chrome change its events sequence after v53. Check [Cinput.js](https://github.com/eyesofkids/react-compositionevent/blob/master/uncontrolled/Cinput.js) and [Ctextarea.js](https://github.com/eyesofkids/react-compositionevent/blob/master/uncontrolled/Ctextarea.js) files.\r\n\r\nBut if these input components are \"controlled\", it will be hard to solve the problem.\r\n\r\nBecause these the `value` of a controlled component is came from `state`. We can't modify `state` directly and the only way to update state is using `this.setState()` to schedule update. But `this.setState()` may be asynchronous.\r\n\r\nAfter test, i found different OS/browsers could have different results. I have written some code to solve it. But i thought it isn't a good solution. It uses the browser detection and two properties of the `state` object. One is for input, another is for internal functions(search, filter...etc). It can't just use one property of the `state` object because i can't stop any `change` events, state need it to update the value of the input element. If i stop some change events during composition session, i would get nothing after typing these words from IME.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template: https://jsfiddle.net/reactjs/69z2wepo/).**\r\n\r\nYou can use online test demo: [https://eyesofkids.github.io/](https://eyesofkids.github.io/)\r\nor use a normal input component(controlled/uncontrolled) to test.\r\n\r\n**What is the expected behavior?**\r\n\r\nThe input(and textarea) controlled components in React should ensure these fired \"change\" and \"composition\" events is consistent in different browsers. I found there are 3 different results(events fired sequence) at least.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n- React 15.4.1\r\n- browsers: chrome, firefox, safari, opera, ie, edge\r\n- OS: macOS, win7, win10",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/8733",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/8733/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/8733/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/8733/events",
        "html_url": "https://github.com/facebook/react/issues/8733",
        "id": 199760450,
        "number": 8733,
        "title": "[Fiber] Should we clear an error boundary's update queue whenever it captures an error?",
        "user": {
            "login": "acdlite",
            "id": 3624098,
            "avatar_url": "https://avatars0.githubusercontent.com/u/3624098?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/acdlite",
            "html_url": "https://github.com/acdlite",
            "followers_url": "https://api.github.com/users/acdlite/followers",
            "following_url": "https://api.github.com/users/acdlite/following{/other_user}",
            "gists_url": "https://api.github.com/users/acdlite/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/acdlite/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/acdlite/subscriptions",
            "organizations_url": "https://api.github.com/users/acdlite/orgs",
            "repos_url": "https://api.github.com/users/acdlite/repos",
            "events_url": "https://api.github.com/users/acdlite/events{/privacy}",
            "received_events_url": "https://api.github.com/users/acdlite/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 139653724,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Core%20Utilities",
                "name": "Component: Core Utilities",
                "color": "c5def5",
                "default": false
            },
            {
                "id": 710375792,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
                "name": "Type: Discussion",
                "color": "fef2c0",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 4,
        "created_at": "2017-01-10T08:32:00Z",
        "updated_at": "2018-04-14T05:57:42Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "Seems like we should at least do this on the root.",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/8800",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/8800/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/8800/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/8800/events",
        "html_url": "https://github.com/facebook/react/issues/8800",
        "id": 200881664,
        "number": 8800,
        "title": "Expose more through __REACT_DEVTOOLS_GLOBAL_HOOK__.inject",
        "user": {
            "login": "roncohen",
            "id": 744,
            "avatar_url": "https://avatars0.githubusercontent.com/u/744?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/roncohen",
            "html_url": "https://github.com/roncohen",
            "followers_url": "https://api.github.com/users/roncohen/followers",
            "following_url": "https://api.github.com/users/roncohen/following{/other_user}",
            "gists_url": "https://api.github.com/users/roncohen/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/roncohen/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/roncohen/subscriptions",
            "organizations_url": "https://api.github.com/users/roncohen/orgs",
            "repos_url": "https://api.github.com/users/roncohen/repos",
            "events_url": "https://api.github.com/users/roncohen/events{/privacy}",
            "received_events_url": "https://api.github.com/users/roncohen/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 710573595,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
                "name": "Component: Developer Tools",
                "color": "fbca04",
                "default": false
            },
            {
                "id": 121709921,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": {
            "login": "gaearon",
            "id": 810438,
            "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gaearon",
            "html_url": "https://github.com/gaearon",
            "followers_url": "https://api.github.com/users/gaearon/followers",
            "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
            "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
            "organizations_url": "https://api.github.com/users/gaearon/orgs",
            "repos_url": "https://api.github.com/users/gaearon/repos",
            "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gaearon/received_events",
            "type": "User",
            "site_admin": false
        },
        "assignees": [
            {
                "login": "gaearon",
                "id": 810438,
                "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/gaearon",
                "html_url": "https://github.com/gaearon",
                "followers_url": "https://api.github.com/users/gaearon/followers",
                "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
                "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
                "organizations_url": "https://api.github.com/users/gaearon/orgs",
                "repos_url": "https://api.github.com/users/gaearon/repos",
                "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
                "received_events_url": "https://api.github.com/users/gaearon/received_events",
                "type": "User",
                "site_admin": false
            }
        ],
        "milestone": null,
        "comments": 5,
        "created_at": "2017-01-15T17:26:32Z",
        "updated_at": "2017-10-04T16:26:01Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "This feature request came out of a brief discussion on twitter with @gaearon: https://twitter.com/dan_abramov/status/820356665899945984\r\n\r\n`__REACT_DEVTOOLS_GLOBAL_HOOK__.inject` exposes access to `getClosestInstanceFromNode`, `getNodeFromInstance`, `ReactMount` and `ReactReconciler`. This is great, and we use it to collect component level performance metrics for our customers in production, however, there are more things we'd love to have access to for the purpose of helping our users pinpoint performance issues in their applications.\r\n\r\nThis \"issue\" includes some initial observations, but I hope we can keep an open dialogue about this - in particular considering Fiber will probably change the landscape with regards to what the most common performance problems are and we'd instrument according to that.\r\n\r\nI understand the urge to keep the API surface area as small as possible in order to create minimal commitment to APIs to allow for internals to move fast. Exposing additional internals with the explicit warning that you are not committed to their API is fine for us, as a tool vendor.\r\n\r\nWe've looked at using `batchedUpdates` to highlight the batched nature of the work performed by React. E.g. is the work in your application getting batched properly. If we only have access to the component updating methods on `ReactReconciler` (`mountComponent`, `receiveComponent`, `unmountComponent` etc) we can't really know when a batch of work starts and when it ends. `batchedUpdates` is available in ReactDOM with the `unstable_` prefix, but exposing it in the `inject` hook would be very useful: https://github.com/facebook/react/blob/master/src/renderers/dom/ReactDOM.js#L38\r\n\r\nWe've also (experimentally) hooked into `EventPluginUtils.executeDispatchesInOrder` in order to capture events and measure the work resulting from these, but i suspect there is a better place to do this (`ReactEventListener.dispatchEvent`?). In any case, having access to the event system would be very useful. Again, using the \"unstable_\" prefix to indicate non-committal would be fine for us.\r\n\r\nI've not had much time to look into what we'd need access to for Fiber instrumentation, but so far it looks like a hook into `beginWork` would be very useful: https://github.com/facebook/react/blob/199db638c4d0fbc6e4d99534be0060deea518a32/src/renderers/shared/fiber/ReactFiberBeginWork.js#L640",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/8830",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/8830/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/8830/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/8830/events",
        "html_url": "https://github.com/facebook/react/issues/8830",
        "id": 201957572,
        "number": 8830,
        "title": "[Umbrella] Async rendering",
        "user": {
            "login": "acdlite",
            "id": 3624098,
            "avatar_url": "https://avatars0.githubusercontent.com/u/3624098?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/acdlite",
            "html_url": "https://github.com/acdlite",
            "followers_url": "https://api.github.com/users/acdlite/followers",
            "following_url": "https://api.github.com/users/acdlite/following{/other_user}",
            "gists_url": "https://api.github.com/users/acdlite/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/acdlite/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/acdlite/subscriptions",
            "organizations_url": "https://api.github.com/users/acdlite/orgs",
            "repos_url": "https://api.github.com/users/acdlite/repos",
            "events_url": "https://api.github.com/users/acdlite/events{/privacy}",
            "received_events_url": "https://api.github.com/users/acdlite/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 739761016,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Reconciler",
                "name": "Component: Reconciler",
                "color": "f9a798",
                "default": false
            },
            {
                "id": 270986513,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Big%20Picture",
                "name": "Type: Big Picture",
                "color": "61dafb",
                "default": false
            },
            {
                "id": 710615342,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Umbrella",
                "name": "Type: Umbrella",
                "color": "5319e7",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 7,
        "created_at": "2017-01-19T19:49:06Z",
        "updated_at": "2017-12-13T01:56:18Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "Async rendering is incomplete. There are bugs with the existing implementation and crucial features that are missing.\r\n\r\nSpecifically, the bugs are related to resuming work after it has been interupted.\r\n\r\nhttps://github.com/facebook/react/pull/9695 was an effort to clean up the bugs without fundamentally changing the underlying model. In the course of working on that branch, we've decided that the underlying model is inherently flawed and needs to change. The tricky case is when low priority work is interrupted by a higher priority update. We want to be able to reconcile again at the higher priority without losing the low priority children, so that we can resume them later. There's no way to do this with the existing model.\r\n\r\nSo we're going to scrap the model and start again.\r\n\r\n### Scrap existing \"progressed work\" implementation and its bugs\r\n\r\nThis will give us a better foundation upon which to build the new model. It should also fix bugs in the triangle demo, although starvation will clearly be worse. We should aim for correctness before comprehensiveness.\r\n\r\n- [x] Add fuzz tester to protect against regressions. [@acdlite] (#9952)\r\n  - Difficult to impossible to write unit tests that provide sufficient coverage, especially ones that are resilient to implementation changes. A fuzz tester provides more safety.\r\n  - Should not make assertions on how work is reused, only on consistency.\r\n- [x] Remove all existing code related to \"progressed\" or \"forked\" work. [@acdlite] (#10008)\r\n- [ ] ~~Split `pendingWorkPriority` from the update priority so that it represents the priority of the subtree, but not the fiber it belongs to. This lets us know whether the children have remaining work.~~\r\n\r\n### Expiration times\r\n\r\nThe next step will be to implement expiration times so that low priority work doesn't. It's possible that expiration times alone are sufficient to generate real product wins, even without the ability to resume interrupted work.\r\n\r\n- [x] Implement expiration times [@acdlite] (#10426)\r\n  - Updates to the same fiber at the same priority level should coalesce (commit all at once).\r\n  - \"Bucket\" updates by rounding expiration times. This may be sufficient the solve to coalescing problem.\r\n\r\n### Async top-level API\r\n\r\n### Keep track of next unit of work per root\r\n\r\n- Is this possible? What about context?\r\n- `scheduleUpdate` (`setState`) currently does not always reach the root, so when we receive an update on a fiber, we don't necessarily know which tree the fiber belongs to.\r\n\r\n### Flush interaction work synchronously\r\n\r\n### Expiration boundaries and blockers (shouldComponentBlock)\r\n\r\nStill figuring out the details for how this will work\r\n\r\n- [ ] Components can block rendering using `shouldComponentBlock(props, state)`\r\n  - When a component blocks, React searches for the nearest expiration boundary. Has similar semantics to error boundaries.\r\n  - If/when the update expires, switches to a `renderExpired` tree instead.\r\n  - Unblock using `this.ping` (actual name TK).\r\n\r\n### Resuming interrupted work\r\n\r\nThen we can move onto to addressing the problem of resuming interrupted work.\r\n\r\n- [ ] Implement resuming in the basic case, where the fiber was not touched since the last time we worked on it.\r\n  - `progressedPriority` should represent the priority that the parent last reconciled at.\r\n- [ ] `child` is a set of all children, present and future (and maybe some in the past)?\r\n  - Still figuring out the details.\r\n  - How will re-orders work?\r\n\r\n### Other items\r\n\r\n- [X] Resume mount bug: null is passed as props to constructor [@acdlite] (#9576)\r\n- [x] Resume mount bug: creating a new instance on resume causes refs (or callbacks in user-space) to close over the wrong instance. Fix by reusing the original instance. [@acdlite] (#9608)\r\n- [ ] Image load event may fire before it's been mounted into the DOM. Figure out a way to defer this event (and other applicable ones) until after mount.\r\n- [ ] Ensure error boundaries work in incremental mode, e.g. in a hidden subtree.\r\n- [ ] Don't commit during `requestIdleCallback`. Wait until the next animation frame, then flush animation work using the last completed priority level. If the work overlaps, we may be able to reuse it. (This item may need to wait until we switch to expiration times.)\r\n- [ ] Ensure work expires even if there are no `rIC` or `rAF` events.\r\n- [ ] Solve stale event listeners: When a component receives an interaction event, flush updates in parents and \"simulate\" a render to recreate event handler before calling it.\r\n- [ ] Defer event dispatching in a proper and fast way. See #9742 and #9580 for context.\r\n- [ ] Solve the case where you want to show some fallback content only if the primary content takes too long but not if it is fast. Such as rendering a spinner if an async render takes too long. What if when the general expiration time elapsed for an async tree, we started calling an alternate `renderExpired` tree instead? That way we can render the tree with a spinner, only if it took too long to render.\r\n- [ ] Figure out story around unit-testing async components. We probably just want to force sync mode. What API should we provide to Enzyme/TestUtils to do this?",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/8898",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/8898/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/8898/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/8898/events",
        "html_url": "https://github.com/facebook/react/issues/8898",
        "id": 204208640,
        "number": 8898,
        "title": "Bump fbjs to 0.9.x",
        "user": {
            "login": "dmnd",
            "id": 4427,
            "avatar_url": "https://avatars3.githubusercontent.com/u/4427?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dmnd",
            "html_url": "https://github.com/dmnd",
            "followers_url": "https://api.github.com/users/dmnd/followers",
            "following_url": "https://api.github.com/users/dmnd/following{/other_user}",
            "gists_url": "https://api.github.com/users/dmnd/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dmnd/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dmnd/subscriptions",
            "organizations_url": "https://api.github.com/users/dmnd/orgs",
            "repos_url": "https://api.github.com/users/dmnd/repos",
            "events_url": "https://api.github.com/users/dmnd/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dmnd/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 71502270,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Build%20Infrastructure",
                "name": "Component: Build Infrastructure",
                "color": "f9d0c4",
                "default": false
            },
            {
                "id": 40929153,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement",
                "name": "Type: Enhancement",
                "color": "84b6eb",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 5,
        "created_at": "2017-01-31T05:30:53Z",
        "updated_at": "2018-01-02T13:12:52Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "body": "Probably lots of React apps depend on babel-runtime, perhaps directly or maybe indirectly. This can problematic, though, because it can cause such apps to depend on two versions of core-js:\r\n\r\n1. Your babel using React app -> babel-runtime ^6.22.0 -> [core-js ^2.4.0](https://github.com/babel/babel/blob/2104ab6c44e807e50a799f010ba3e896f0c2e54d/packages/babel-runtime/package.json#L9)\r\n2. React -> [fbjs ^0.8.4](https://github.com/facebook/react/blob/59aac010dd049719394c9cc4b70417302ce73c14/packages/react/package.json#L26) -> [core-js ^1.0.0](https://github.com/facebook/fbjs/blob/e13bb5721844bee2afa065321f260355d080bc3f/package.json#L63)\r\n\r\nThese two versions aren't semver compatible, so it means a project that depends on babel-runtime and also React will have two copies of core-js in use. A concrete example of this is a React app that [also depends on Relay](https://github.com/facebook/relay/blob/7d5e9165ede146c91b3f0b6583f28f6687289eeb/package.json#L32). There are probably many other such examples, though. It'd be nice to collapse this dependency into a single version of core-js.\r\n\r\nReact could bump its dependency to the latest fbjs which is [fbjs 0.9.0-alpha.1](https://github.com/facebook/fbjs/blob/master/packages/fbjs/package.json#L61). That's alpha right now, but it's been alpha for 7 months and probably you guys can arrange a stable release if you want to.\r\n\r\nSee also:\r\n\r\n* https://github.com/facebook/fbjs/issues/217\r\n* https://github.com/facebook/relay/issues/1421\r\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/8938",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/8938/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/8938/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/8938/events",
        "html_url": "https://github.com/facebook/react/issues/8938",
        "id": 205759424,
        "number": 8938,
        "title": "Clear button on iOS date input does not return correct event value",
        "user": {
            "login": "ro-savage",
            "id": 9244507,
            "avatar_url": "https://avatars2.githubusercontent.com/u/9244507?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ro-savage",
            "html_url": "https://github.com/ro-savage",
            "followers_url": "https://api.github.com/users/ro-savage/followers",
            "following_url": "https://api.github.com/users/ro-savage/following{/other_user}",
            "gists_url": "https://api.github.com/users/ro-savage/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ro-savage/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ro-savage/subscriptions",
            "organizations_url": "https://api.github.com/users/ro-savage/orgs",
            "repos_url": "https://api.github.com/users/ro-savage/repos",
            "events_url": "https://api.github.com/users/ro-savage/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ro-savage/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 40929151,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
                "name": "Type: Bug",
                "color": "b60205",
                "default": false
            },
            {
                "id": 877481224,
                "url": "https://api.github.com/repos/facebook/react/labels/mentorship",
                "name": "mentorship",
                "color": "3B5998",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 16,
        "created_at": "2017-02-07T01:29:52Z",
        "updated_at": "2018-05-15T22:52:38Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "**Bug**\r\nFor iOS only.\r\nWhen pressing `clear` on a date input, the `onChange` event is fired but` event.target.value` is showing the original value rather than an empty string.\r\n\r\n**What is the current behavior?**\r\nOn Chrome and Android, when the clear button is pressed the onChange event has a value of `''`.\r\nOn iOS when the clear button is pressed the onChange event has a value of `previousValue`.\r\n\r\n**Demo**\r\nhttps://output.jsbin.com/zojuteloto/5/\r\nTry on Chrome/Android. Then on iOS.\r\n\r\n**What is the expected behavior?**\r\nValue should be returned an an empty string.\r\n\r\n**Versions**\r\nAffects React 15+ & iOS 10. Unsure of previous versions.\r\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/8968",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/8968/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/8968/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/8968/events",
        "html_url": "https://github.com/facebook/react/issues/8968",
        "id": 206457623,
        "number": 8968,
        "title": "Chrome 56 breaks touch events",
        "user": {
            "login": "mstijak",
            "id": 433394,
            "avatar_url": "https://avatars2.githubusercontent.com/u/433394?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mstijak",
            "html_url": "https://github.com/mstijak",
            "followers_url": "https://api.github.com/users/mstijak/followers",
            "following_url": "https://api.github.com/users/mstijak/following{/other_user}",
            "gists_url": "https://api.github.com/users/mstijak/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mstijak/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mstijak/subscriptions",
            "organizations_url": "https://api.github.com/users/mstijak/orgs",
            "repos_url": "https://api.github.com/users/mstijak/repos",
            "events_url": "https://api.github.com/users/mstijak/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mstijak/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 710375792,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
                "name": "Type: Discussion",
                "color": "fef2c0",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 13,
        "created_at": "2017-02-09T10:06:20Z",
        "updated_at": "2017-10-04T16:40:29Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nReact attaches events to the `document` node which causes the latest version of Chrome to issue the following warning.\r\n```\r\nUnable to preventDefault inside passive event listener due to target being treated as passive. See https://www.chromestatus.com/features/5093566007214080\r\n```\r\nIt appears that [Chrome now treats all document level touch events as passive](https://www.chromestatus.com/features/5093566007214080).\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template: https://jsfiddle.net/reactjs/69z2wepo/).**\r\n\r\n```\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div\r\n          className=\"box\"\r\n          onTouchStart={e=>{e.preventDefault()}}\r\n          onTouchMove={e=>{e.preventDefault()}}\r\n      >\r\n          Drag Me\r\n      </div>\r\n    );\r\n  }\r\n}\r\n```\r\n\r\n**What is the expected behavior?**\r\n`preventDefault` should be allowed, which means React should pass `{ passive: false }` when adding event listeners.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact 15.4.1, Chrome 56.0.2924.87, Windows 10\r\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/9023",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/9023/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/9023/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/9023/events",
        "html_url": "https://github.com/facebook/react/issues/9023",
        "id": 208520567,
        "number": 9023,
        "title": "event.preventDefault in click handler does not prevent onChange from being called",
        "user": {
            "login": "aweary",
            "id": 6886061,
            "avatar_url": "https://avatars2.githubusercontent.com/u/6886061?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/aweary",
            "html_url": "https://github.com/aweary",
            "followers_url": "https://api.github.com/users/aweary/followers",
            "following_url": "https://api.github.com/users/aweary/following{/other_user}",
            "gists_url": "https://api.github.com/users/aweary/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/aweary/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/aweary/subscriptions",
            "organizations_url": "https://api.github.com/users/aweary/orgs",
            "repos_url": "https://api.github.com/users/aweary/repos",
            "events_url": "https://api.github.com/users/aweary/events{/privacy}",
            "received_events_url": "https://api.github.com/users/aweary/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 40929151,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
                "name": "Type: Bug",
                "color": "b60205",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 3,
        "created_at": "2017-02-17T18:31:19Z",
        "updated_at": "2018-03-21T14:07:46Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug!\r\n\r\n**What is the current behavior?**\r\n\r\nWhen rendering an `input` element of type `checkbox` with an `onClick` and `onChange` handler, `onChange` is still called even though `event.preventDefault()` is called in the `onClick` handler.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template: https://jsfiddle.net/reactjs/69z2wepo/).**\r\n\r\nhttp://jsfiddle.net/rf3w7apc/\r\n\r\n**What is the expected behavior?**\r\n\r\nCalling `event.preventDefault` in the `onClick` handler should prevent the default action  from occurring (or undo its effect), which is to update the value of the `input` element. This should stop any `change` event listener from being invoked. See https://jsfiddle.net/L1eskzsq/ for expected behavior\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nTested using a build from master, macOS 10.12.2, verified in:\r\n\r\n* Chrome  56.0.2924.87 (64-bit)\r\n* Firefox 51.0.1 (64-bit)\r\n\r\nSafari 10.0.2 calls the `change` event listener in both cases.\r\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/9046",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/9046/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/9046/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/9046/events",
        "html_url": "https://github.com/facebook/react/issues/9046",
        "id": 209510106,
        "number": 9046,
        "title": "Disabling or destroying event's target stops further event propagation.",
        "user": {
            "login": "cristian-eriomenco",
            "id": 7792886,
            "avatar_url": "https://avatars1.githubusercontent.com/u/7792886?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cristian-eriomenco",
            "html_url": "https://github.com/cristian-eriomenco",
            "followers_url": "https://api.github.com/users/cristian-eriomenco/followers",
            "following_url": "https://api.github.com/users/cristian-eriomenco/following{/other_user}",
            "gists_url": "https://api.github.com/users/cristian-eriomenco/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cristian-eriomenco/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cristian-eriomenco/subscriptions",
            "organizations_url": "https://api.github.com/users/cristian-eriomenco/orgs",
            "repos_url": "https://api.github.com/users/cristian-eriomenco/repos",
            "events_url": "https://api.github.com/users/cristian-eriomenco/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cristian-eriomenco/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 710375792,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
                "name": "Type: Discussion",
                "color": "fef2c0",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 4,
        "created_at": "2017-02-22T16:39:52Z",
        "updated_at": "2017-10-04T18:08:51Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "Disabling a submit button within a form on `onClick`, stops the event propagation to the forms `onSubmit` handler.\r\n\r\nThe fiddle:\r\n ```\r\nimport React from \"react\";\r\n\r\nclass SomeForm extends React.Component {\r\n    constructor(props){\r\n       super(props)\r\n       this.state = {\r\n          disabled:false\r\n       }\r\n    }\r\n    handleClick() {\r\n        this.setState({\r\n          disabled:true\r\n        });\r\n        console.log(\"Clicked button\");\r\n    }\r\n    handleSubmit(e){\r\n      alert(\"Submitted the form\")\r\n    }\r\n    render() {\r\n        let opts = {};\r\n        opts.disabled = this.state.disabled; // disabling the button stops the event propagation\r\n        \r\n        return (<form onSubmit={this.handleSubmit.bind(this)}>\r\n              <button {...opts} \r\n                type=\"submit\" \r\n                onClick={this.handleClick.bind(this)}>\r\n                Continue\r\n              </button>\r\n         </form>)\r\n    }\r\n}\r\n\r\nReactDOM.render(<SomeForm />, document.getElementById('a'));\r\n```\r\n[JsBin with the live example](http://jsbin.com/kidabifono/1/edit?js,output)\r\n\r\nExpected behavior: The event gets propagated unless explicitly swallowed via `e.preventDefault() && e.stopPropagation()`\r\n\r\n**React version:** 15.4.2\r\n**Browser:** Chrome 56.0.2924.87 x64\r\n\r\nUnfortunately I cannot tell if this happens with older versions.",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/9075",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/9075/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/9075/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/9075/events",
        "html_url": "https://github.com/facebook/react/issues/9075",
        "id": 210594226,
        "number": 9075,
        "title": "React Perf Scenarios",
        "user": {
            "login": "sebmarkbage",
            "id": 63648,
            "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sebmarkbage",
            "html_url": "https://github.com/sebmarkbage",
            "followers_url": "https://api.github.com/users/sebmarkbage/followers",
            "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
            "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
            "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
            "repos_url": "https://api.github.com/users/sebmarkbage/repos",
            "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 710573595,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
                "name": "Component: Developer Tools",
                "color": "fbca04",
                "default": false
            },
            {
                "id": 270986513,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Big%20Picture",
                "name": "Type: Big Picture",
                "color": "61dafb",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": {
            "login": "gaearon",
            "id": 810438,
            "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gaearon",
            "html_url": "https://github.com/gaearon",
            "followers_url": "https://api.github.com/users/gaearon/followers",
            "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
            "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
            "organizations_url": "https://api.github.com/users/gaearon/orgs",
            "repos_url": "https://api.github.com/users/gaearon/repos",
            "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gaearon/received_events",
            "type": "User",
            "site_admin": false
        },
        "assignees": [
            {
                "login": "gaearon",
                "id": 810438,
                "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/gaearon",
                "html_url": "https://github.com/gaearon",
                "followers_url": "https://api.github.com/users/gaearon/followers",
                "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
                "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
                "organizations_url": "https://api.github.com/users/gaearon/orgs",
                "repos_url": "https://api.github.com/users/gaearon/repos",
                "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
                "received_events_url": "https://api.github.com/users/gaearon/received_events",
                "type": "User",
                "site_admin": false
            }
        ],
        "milestone": null,
        "comments": 0,
        "created_at": "2017-02-27T20:15:50Z",
        "updated_at": "2017-10-04T18:14:21Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "Just wanted to write down some perf scenarios that I think might be important for incremental/Fiber.\r\n\r\n## Avoiding unscheduled work\r\n\r\nUnscheduled work is synchronous and can easily lead to dropped frames.\r\n\r\n- Any synchronous work.\r\n- setState in componentDidMount/Update causing synchronous work.\r\n- Life-cycles doing a lot of work rather than doing minimal work to schedule follow up work.\r\n- Event handlers doing all their processing in the handler rather than deferring to doing work in the component or rIC.\r\n\r\n## Starvation\r\n\r\nIf we hit the starvation deadline (expiration time) then something has gone wrong because we weren't able to do it in idle cycles. Some reasons can be:\r\n\r\n- Too much work is done in animations which leaves us too little time in idle. Might be React animations, other JS animations, CSS animations or even GIFs.\r\n- Too much work is done on the main thread and parallelism can be better utilized with a worker. E.g. for video processing etc.\r\n- High priority updates happen to high in the tree so we end up rerendering the whole tree.\r\n- There are not enough shouldComponentUpdate/PureComponents so that high priority updates don't bail out and cause the whole tree to rerender. High priority updates should touch only a small part of the tree.\r\n- There are not enough shouldComponentUpdate/PureComponents so that we can't reuse enough work safely when we resume a tree. Causing resumes to rerender everything.\r\n- Something is causing new trees to get dropped and not resumed. Probably because of a bad Fiber heuristic for when to keep a started tree and when to throw it away.\r\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/9100",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/9100/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/9100/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/9100/events",
        "html_url": "https://github.com/facebook/react/issues/9100",
        "id": 211574382,
        "number": 9100,
        "title": "Pasting text in text box does not fire change event on IE11.",
        "user": {
            "login": "mashimonator",
            "id": 2460942,
            "avatar_url": "https://avatars3.githubusercontent.com/u/2460942?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mashimonator",
            "html_url": "https://github.com/mashimonator",
            "followers_url": "https://api.github.com/users/mashimonator/followers",
            "following_url": "https://api.github.com/users/mashimonator/following{/other_user}",
            "gists_url": "https://api.github.com/users/mashimonator/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mashimonator/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mashimonator/subscriptions",
            "organizations_url": "https://api.github.com/users/mashimonator/orgs",
            "repos_url": "https://api.github.com/users/mashimonator/repos",
            "events_url": "https://api.github.com/users/mashimonator/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mashimonator/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 40929151,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
                "name": "Type: Bug",
                "color": "b60205",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 3,
        "created_at": "2017-03-03T02:00:10Z",
        "updated_at": "2017-10-04T18:14:46Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "I found a bug in IE11.\r\nReact version is 15.4.0.\r\n\r\nPasting text in text box does not fire change event on IE11.\r\n\r\nhttps://jsfiddle.net/mashimonator/uh699v8d/6/",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/9128",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/9128/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/9128/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/9128/events",
        "html_url": "https://github.com/facebook/react/issues/9128",
        "id": 212321577,
        "number": 9128,
        "title": "Switch to using createFactory in compiler steps",
        "user": {
            "login": "sebmarkbage",
            "id": 63648,
            "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sebmarkbage",
            "html_url": "https://github.com/sebmarkbage",
            "followers_url": "https://api.github.com/users/sebmarkbage/followers",
            "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
            "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
            "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
            "repos_url": "https://api.github.com/users/sebmarkbage/repos",
            "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 180616330,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Optimizing%20Compiler",
                "name": "Component: Optimizing Compiler",
                "color": "bfdadc",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 3,
        "created_at": "2017-03-07T03:36:44Z",
        "updated_at": "2017-03-13T12:35:59Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "```js\r\nvar Foo = require('Foo');\r\nfunction Bar() {\r\n  return <Foo x={1}>Hi</Foo>;\r\n}\r\n```\r\n\r\nOriginally we intended to compile JSX to this format:\r\n\r\n```js\r\nvar Foo = require('Foo');\r\nvar Foo_ = React.createFactory(Foo);\r\nfunction Bar() {\r\n  return Foo_({ x: 1, children: \"Hi\" });\r\n}\r\n```\r\n\r\nThat allows us to generate a factory that can be more optimized and resolves `defaultProps`.\r\n\r\nThere are some problems with generating an optimized factory in many cases because it can slow down start up. However, if you have an optimizing compiler that can resolve that, we can turn that on in those cases.\r\n\r\nAnother thing we can do is that if the function is a simple functional component then we can just return the functional component itself. So that it becomes just a straight through function call. At least if the element doesn't have a key. (Slight change in semantics but mostly not.)\r\n\r\nAn optimizing compiler or VM (that is aware of the type of \"Foo\" which not known to the Babel transform) can then infer that this function is just a function call and can then proceed to actually inline it.\r\n\r\nFor heavy functions it would be bad to do this though since it can expand the time a render is executed and work against the time slicing mechanism of Fiber.\r\n\r\nTherefore, we might want to use a heuristic to determine if a functional component gets to be \"inlined\" or not. E.g. function length or something.\r\n\r\nA good data point to use in a heuristic is whether the component is part of a loop or a closure (such as being part of a map);\r\n\r\n```js\r\nvar Foo = require('Foo');\r\nfunction Bar({ data }) {\r\n  var children = [];\r\n  for (var i = 0; i < data.length; i++) {\r\n    children.push(<Baz>{data[i]}</Baz>);\r\n  }\r\n  return <Foo x={1}>{children}</Foo>;\r\n}\r\n```\r\n\r\nor\r\n\r\n```js\r\nvar Foo = require('Foo');\r\nfunction Bar({ data }) {\r\n  return <Foo x={1}>{data.map(d => <Baz>{d}</Baz>)}</Foo>;\r\n}\r\n```\r\n\r\nWe could change the transform to treat these special and flag them as part of a hot path by calling a special createFactory:\r\n\r\n```js\r\nvar Foo = require('Foo');\r\nvar Baz = require('Baz');\r\nvar Foo_ = React.createFactory(Foo);\r\nvar Baz_ = React.createFactoryHot(Baz);\r\nfunction Bar({ data }) {\r\n  return Foo_({ x: 1, children: data.map(d => Baz_({ children: d })) });\r\n}\r\n```\r\n\r\nThe neat part of this model is that the transform can be pretty simple and readable.\r\n\r\nThe optimization itself is in createFactory and createFactoryHot.\r\n\r\nIt also doesn't have to reason about cross-module transforms. That's all taken care of by the optimizing compiler or VM.",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/9142",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/9142/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/9142/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/9142/events",
        "html_url": "https://github.com/facebook/react/issues/9142",
        "id": 213120772,
        "number": 9142,
        "title": "No blur event fired when button is disabled",
        "user": {
            "login": "OliverJAsh",
            "id": 921609,
            "avatar_url": "https://avatars2.githubusercontent.com/u/921609?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/OliverJAsh",
            "html_url": "https://github.com/OliverJAsh",
            "followers_url": "https://api.github.com/users/OliverJAsh/followers",
            "following_url": "https://api.github.com/users/OliverJAsh/following{/other_user}",
            "gists_url": "https://api.github.com/users/OliverJAsh/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/OliverJAsh/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/OliverJAsh/subscriptions",
            "organizations_url": "https://api.github.com/users/OliverJAsh/orgs",
            "repos_url": "https://api.github.com/users/OliverJAsh/repos",
            "events_url": "https://api.github.com/users/OliverJAsh/events{/privacy}",
            "received_events_url": "https://api.github.com/users/OliverJAsh/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 40929151,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
                "name": "Type: Bug",
                "color": "b60205",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": {
            "login": "aweary",
            "id": 6886061,
            "avatar_url": "https://avatars2.githubusercontent.com/u/6886061?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/aweary",
            "html_url": "https://github.com/aweary",
            "followers_url": "https://api.github.com/users/aweary/followers",
            "following_url": "https://api.github.com/users/aweary/following{/other_user}",
            "gists_url": "https://api.github.com/users/aweary/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/aweary/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/aweary/subscriptions",
            "organizations_url": "https://api.github.com/users/aweary/orgs",
            "repos_url": "https://api.github.com/users/aweary/repos",
            "events_url": "https://api.github.com/users/aweary/events{/privacy}",
            "received_events_url": "https://api.github.com/users/aweary/received_events",
            "type": "User",
            "site_admin": false
        },
        "assignees": [
            {
                "login": "aweary",
                "id": 6886061,
                "avatar_url": "https://avatars2.githubusercontent.com/u/6886061?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/aweary",
                "html_url": "https://github.com/aweary",
                "followers_url": "https://api.github.com/users/aweary/followers",
                "following_url": "https://api.github.com/users/aweary/following{/other_user}",
                "gists_url": "https://api.github.com/users/aweary/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/aweary/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aweary/subscriptions",
                "organizations_url": "https://api.github.com/users/aweary/orgs",
                "repos_url": "https://api.github.com/users/aweary/repos",
                "events_url": "https://api.github.com/users/aweary/events{/privacy}",
                "received_events_url": "https://api.github.com/users/aweary/received_events",
                "type": "User",
                "site_admin": false
            }
        ],
        "milestone": null,
        "comments": 13,
        "created_at": "2017-03-09T18:13:08Z",
        "updated_at": "2018-02-14T11:02:01Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nWhen a focussed button becomes disabled, React does not dispatch a blur event.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template: https://jsfiddle.net/reactjs/69z2wepo/).**\r\n1. Attach a blur event to a button\r\n2. Focus the button\r\n3. Make the button disabled\r\n\r\n**What is the expected behavior?**\r\nA blur event will be dispatched.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n15.1.0, not sure if it worked in previous versions.\r\n\r\nIsolated test case: http://jsbin.com/fuvite/1/edit?html,css,js,output",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/9154",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/9154/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/9154/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/9154/events",
        "html_url": "https://github.com/facebook/react/issues/9154",
        "id": 213438699,
        "number": 9154,
        "title": "Serializing to \"HTML with only as much JS as necessary\"",
        "user": {
            "login": "Pomax",
            "id": 177243,
            "avatar_url": "https://avatars2.githubusercontent.com/u/177243?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Pomax",
            "html_url": "https://github.com/Pomax",
            "followers_url": "https://api.github.com/users/Pomax/followers",
            "following_url": "https://api.github.com/users/Pomax/following{/other_user}",
            "gists_url": "https://api.github.com/users/Pomax/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Pomax/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Pomax/subscriptions",
            "organizations_url": "https://api.github.com/users/Pomax/orgs",
            "repos_url": "https://api.github.com/users/Pomax/repos",
            "events_url": "https://api.github.com/users/Pomax/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Pomax/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 710332294,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Server%20Rendering",
                "name": "Component: Server Rendering",
                "color": "d4c5f9",
                "default": false
            },
            {
                "id": 121709921,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 6,
        "created_at": "2017-03-10T20:04:07Z",
        "updated_at": "2017-10-04T18:23:23Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "This is sort of a feature request, mostly because I haven't been able to make the current react tooling do what I need it to do.\r\n\r\nI have a massively huge article up on https://pomax.github.io/bezierinfo that consists of a single page of React-managed content, of which the bulk is \"passive\" HTML content. Paragraphs, headings, that kind of stuff. However, there are also active components with JS interaction bindings, and so I was trying to figure out a way to turn this article into a \"react-managed by the client\" into a \"thin ui managed by the client, react-built offline\" solution. \r\n\r\nI had a look at ReactDOMServer.renderToStaticMarkup, but while this generates all the HTML nicely, it also loses any and all JS bindings that are necessary to keep the UI working. As this is an ~800kb article not counting static assets (there's some 1.6MB of images on top of that), the notion of first loading the plain markup content and then loading the react bundle on top of that, to hook into the preloaded markup would be a terrible experience for people in the slightly-less-wealthy parts of the world.\r\n\r\nIs there some way to, or would there be a sense in developing a way to render React content to HTML \"as much as possible\" while preserving React's management of interactive UI components? Essentially, a solution in between `renderToString` and `renderToStaticMarkup`, to prevent as much data duplication between the pregenerated HTML and the react application itself? It seems that the heavy payload (in bytes, but certainly in client-side processing as well) incurred by using a fully react-managed bundle could be relieved significantly if \"content that is guaranteed passive, regular HTML\" could be serialized out as HTML with React hooking back into that code only for elements that require active management.\r\n\r\n(I have no idea how much work that would be, but I'm pretty sure it would help bring down the average page size down again, which on a global scale would save quite a lot of time and money, while allowing content to be loaded by people for whom parts of the internet are currently inaccessible due to load time and byte cost)",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/9189",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/9189/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/9189/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/9189/events",
        "html_url": "https://github.com/facebook/react/issues/9189",
        "id": 214553330,
        "number": 9189,
        "title": "Expose DEV-mode warnings in devtools UI",
        "user": {
            "login": "bvaughn",
            "id": 29597,
            "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bvaughn",
            "html_url": "https://github.com/bvaughn",
            "followers_url": "https://api.github.com/users/bvaughn/followers",
            "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
            "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
            "organizations_url": "https://api.github.com/users/bvaughn/orgs",
            "repos_url": "https://api.github.com/users/bvaughn/repos",
            "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bvaughn/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 710573595,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
                "name": "Component: Developer Tools",
                "color": "fbca04",
                "default": false
            },
            {
                "id": 121709921,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2017-03-15T23:11:13Z",
        "updated_at": "2017-10-04T19:46:17Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "body": "React has made recent developer experience improvements to lifecycle error handling and logging. Errors thrown during render can be recovered from using ~~`unstable_handleError`~~ `componentDidCatch`. Errors thrown during lifecycle methods are also automatically logged to the console with the component stack location to make them easier to identify (see #8785).\r\n\r\nThe team has discussed similar improvements for warnings- such as using a \"yellow box\" approach to make warnings stand out more in developer mode (see PRs #7360 and #8861). There has been some pushback though to the idea of React modifying the DOM for warning purposes (see issue #8784). I'm not sure how that will play out yet- but in the meanwhile, could we improve at least some of these use cases by making better use of the devtools?\r\n\r\nFor example, what if React exposed a new API that allowed associating a warning with one or more components in the devtools panel? (eg a method that- when called- recorded the current component stack and notified devtools if present) React could use this for things like missing or non-unique keys. 3rd party libraries may also benefit from this (eg react-virtualized could use this to warn about missing or incomplete positioning styles for cells).\r\n\r\nHere's a rough outline of some of the features:\r\n* Components with warnings could be highlighted in some emphasized way (eg yellow background) in devtools to make them easier to spot.\r\n* A new toolbar option could be added to \"Show All Warnings\" (eg filter the tree view to show only components with warnings).\r\n* Warning message could be shown inline in the settings panel for the selected component.\r\n\r\nHere's a rough mockup: \r\n![screen shot 2017-03-15 at 3 47 31 pm](https://cloud.githubusercontent.com/assets/29597/23974108/bc3dabd6-0996-11e7-8d2a-e058c4cafe41.png)\r\n\r\nLimitations:\r\n* Not everyone uses devtools so this would not help a lot of people.\r\n* This would not address issues like using the development mode of React for production sites.\r\n\r\nThoughts? Ideas? Suggestions?",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/9212",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/9212/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/9212/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/9212/events",
        "html_url": "https://github.com/facebook/react/issues/9212",
        "id": 215089697,
        "number": 9212,
        "title": "Inconsistent behavior with keyed select options and value",
        "user": {
            "login": "ajainarayanan",
            "id": 1452845,
            "avatar_url": "https://avatars2.githubusercontent.com/u/1452845?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ajainarayanan",
            "html_url": "https://github.com/ajainarayanan",
            "followers_url": "https://api.github.com/users/ajainarayanan/followers",
            "following_url": "https://api.github.com/users/ajainarayanan/following{/other_user}",
            "gists_url": "https://api.github.com/users/ajainarayanan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ajainarayanan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ajainarayanan/subscriptions",
            "organizations_url": "https://api.github.com/users/ajainarayanan/orgs",
            "repos_url": "https://api.github.com/users/ajainarayanan/repos",
            "events_url": "https://api.github.com/users/ajainarayanan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ajainarayanan/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 710722093,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
                "name": "Type: Needs Investigation",
                "color": "fbca04",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": {
            "login": "aweary",
            "id": 6886061,
            "avatar_url": "https://avatars2.githubusercontent.com/u/6886061?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/aweary",
            "html_url": "https://github.com/aweary",
            "followers_url": "https://api.github.com/users/aweary/followers",
            "following_url": "https://api.github.com/users/aweary/following{/other_user}",
            "gists_url": "https://api.github.com/users/aweary/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/aweary/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/aweary/subscriptions",
            "organizations_url": "https://api.github.com/users/aweary/orgs",
            "repos_url": "https://api.github.com/users/aweary/repos",
            "events_url": "https://api.github.com/users/aweary/events{/privacy}",
            "received_events_url": "https://api.github.com/users/aweary/received_events",
            "type": "User",
            "site_admin": false
        },
        "assignees": [
            {
                "login": "aweary",
                "id": 6886061,
                "avatar_url": "https://avatars2.githubusercontent.com/u/6886061?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/aweary",
                "html_url": "https://github.com/aweary",
                "followers_url": "https://api.github.com/users/aweary/followers",
                "following_url": "https://api.github.com/users/aweary/following{/other_user}",
                "gists_url": "https://api.github.com/users/aweary/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/aweary/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aweary/subscriptions",
                "organizations_url": "https://api.github.com/users/aweary/orgs",
                "repos_url": "https://api.github.com/users/aweary/repos",
                "events_url": "https://api.github.com/users/aweary/events{/privacy}",
                "received_events_url": "https://api.github.com/users/aweary/received_events",
                "type": "User",
                "site_admin": false
            }
        ],
        "milestone": null,
        "comments": 3,
        "created_at": "2017-03-17T18:42:17Z",
        "updated_at": "2017-10-04T18:50:18Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "**Current behavior**:\r\n  I have a component that is composed of multiple select elements each tied to different variables in the state. I have a setTimeout that changes only one of the select value. This causes other select values to be changed\r\n\r\n**Steps to reproduce**:\r\n  https://www.webpackbin.com/bins/-KfSVw3Ww4ZGFSaJ5_WY\r\n\r\nThe above webpack bin instance works as expected in chrome and safari but not in firefox.\r\n\r\n**Issue**:\r\n  In Firefox the value of select elements (the ones not set inside a `setTimeout`) reverts back to the first value instead of the previously set one.\r\n\r\n**React version**: 15.4.2\r\n**OS**: Mac\r\n**Browser affected by this change**: Firefox \r\n\r\nPlease feel free to close the issue if this is not a bug (or a known bug in firefox) and that I am doing something wrong. I tried searching for issues related to firefox and select elements and couldn't find any that looked similar.",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/9223",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/9223/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/9223/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/9223/events",
        "html_url": "https://github.com/facebook/react/issues/9223",
        "id": 215470602,
        "number": 9223,
        "title": "Compiler Optimization Umbrella",
        "user": {
            "login": "sebmarkbage",
            "id": 63648,
            "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sebmarkbage",
            "html_url": "https://github.com/sebmarkbage",
            "followers_url": "https://api.github.com/users/sebmarkbage/followers",
            "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
            "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
            "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
            "repos_url": "https://api.github.com/users/sebmarkbage/repos",
            "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 180616330,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Optimizing%20Compiler",
                "name": "Component: Optimizing Compiler",
                "color": "bfdadc",
                "default": false
            },
            {
                "id": 710615342,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Umbrella",
                "name": "Type: Umbrella",
                "color": "5319e7",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2017-03-20T16:08:03Z",
        "updated_at": "2017-10-04T16:37:16Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "Spinoff from https://github.com/reactjs/react-future/issues/50\r\n\r\nI wanted to create an umbrella task for when we start working on compiler level optimizations. We've had [a tag](https://github.com/facebook/react/issues?q=is%3Aopen+is%3Aissue+label%3A%22Component%3A+Optimizing+Compiler%22) open for a while but these are fairly primitive optimizations. We want to be able to go further.\r\n\r\nI don't think we'll start this project immediately but soon after the Fiber stuff is in place.\r\n\r\n__Compiler Infra__\r\n\r\n- [ ] Base-line cross-module full JavaScript AOT compiler.\r\n- [ ] Compiler infra structure that fits well into existing tooling at FB, Webpack, Rollup based ecosysem etc. Support parallelism and incremental builds.\r\n- [ ] Solve things like what the npm ecosystem should do. Compile before publishing or after? Probably after.\r\n\r\n__Optimizations__\r\n\r\n- [ ] Enable multiple levels of host instances / DOM elements to be managed by a single Fiber. I think this is probably a key requirement for many optimizations. I'm not sure if that Fiber's children will have a single placement point (the parent that they get inserted into) or if it could have multiple insertion points. If it manually does the insertion of its children, then the later would work.\r\n- [ ] Optimizing pure host/DOM elements (\"string\" components). Can be reasoned about at the core compiler level.\r\n- [ ] Inlining pure functional components so that now the result can be reasoned about as a flat component.\r\n- [ ] Basic constant folding for static configuration.\r\n- [ ] Optimizing across component boundaries without inlining.\r\n- [ ] Optimizing stateful functional components.\r\n\r\n__Runtime Optimizations__\r\n\r\n- [ ] Dead-code elimination of library code that isn't needed by a particular application. Such as certain events, controlled components or complex attributes.\r\n\r\n__Stretch Goals__\r\n\r\n- [ ] Computing delta updates after code changes and lets Service Workers update based on that.\r\n\r\nMore to come...",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/9230",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/9230/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/9230/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/9230/events",
        "html_url": "https://github.com/facebook/react/issues/9230",
        "id": 215772653,
        "number": 9230,
        "title": "Boolean attributes on Web Components",
        "user": {
            "login": "nickdima",
            "id": 614468,
            "avatar_url": "https://avatars2.githubusercontent.com/u/614468?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nickdima",
            "html_url": "https://github.com/nickdima",
            "followers_url": "https://api.github.com/users/nickdima/followers",
            "following_url": "https://api.github.com/users/nickdima/following{/other_user}",
            "gists_url": "https://api.github.com/users/nickdima/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nickdima/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nickdima/subscriptions",
            "organizations_url": "https://api.github.com/users/nickdima/orgs",
            "repos_url": "https://api.github.com/users/nickdima/repos",
            "events_url": "https://api.github.com/users/nickdima/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nickdima/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 710375792,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
                "name": "Type: Discussion",
                "color": "fef2c0",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 11,
        "created_at": "2017-03-21T15:09:51Z",
        "updated_at": "2018-05-10T17:07:43Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "When setting boolean attributes on Web Components\r\n`<x-search somebool name={this.props.name} />`\r\nthey get rendered as attribute/value pairs instead\r\n`<x-search somebool=\"true\" name={this.props.name}>`\r\n\r\nThis causes problems with some AMP components, for eg. `<amp-iframe />` which has a `resizable` attribute that gets rendered as `resizable=\"true\"`. This results in non valid AMP content and developers crying with blood tears on their keyboards :)\r\n> The attribute 'resizable' in tag 'amp-iframe' is set to the invalid value 'true'. (see https://www.ampproject.org/docs/reference/components/amp-iframe)\r\n\r\nIs there any reason for the current behaviour? Will changing this break something else?",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/9242",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/9242/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/9242/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/9242/events",
        "html_url": "https://github.com/facebook/react/issues/9242",
        "id": 216416941,
        "number": 9242,
        "title": "Event Handler on React Component not invoked when React Component is rendered inside a Web Component",
        "user": {
            "login": "nilshartmann",
            "id": 435073,
            "avatar_url": "https://avatars0.githubusercontent.com/u/435073?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nilshartmann",
            "html_url": "https://github.com/nilshartmann",
            "followers_url": "https://api.github.com/users/nilshartmann/followers",
            "following_url": "https://api.github.com/users/nilshartmann/following{/other_user}",
            "gists_url": "https://api.github.com/users/nilshartmann/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nilshartmann/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nilshartmann/subscriptions",
            "organizations_url": "https://api.github.com/users/nilshartmann/orgs",
            "repos_url": "https://api.github.com/users/nilshartmann/repos",
            "events_url": "https://api.github.com/users/nilshartmann/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nilshartmann/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 710375792,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
                "name": "Type: Discussion",
                "color": "fef2c0",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 9,
        "created_at": "2017-03-23T12:51:10Z",
        "updated_at": "2018-02-05T20:33:48Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nA React Component with an Event Handler (for example onClick) is rendered inside a Web Component. When the Component is clicked the Event does not receive the React Component (specified callback is not invoked)\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template: https://jsfiddle.net/reactjs/69z2wepo/).**\r\n\r\nYou can reproduce it with Web Component example contained in the react repository (https://github.com/facebook/react/blob/master/examples/webcomponents/index.html): Replace the 'a' element with a button and add for example an onClick event handler. \r\n\r\nYou can find a modified version of the Web Component example (based on the 15.4.2 codebase - https://github.com/facebook/react/blob/v15.4.2/examples/webcomponents/index.html) here:\r\nhttps://gist.github.com/nilshartmann/3a520920e5fc920bfde49e077ad3beab#file-index-html-L50 \r\n\r\n**What is the expected behavior?**\r\nThe event handler should be called.\r\n\r\nFor testing I have modified `getEventTarget.js` to return the target from the `path` property of the `nativeEvent` (instead of the \"original\" `target` from the `nativeEvent`). With this addition it works - \r\nthe Event Handler is called.\r\n\r\nYou can find the modified version also in the gist: https://gist.github.com/nilshartmann/3a520920e5fc920bfde49e077ad3beab#file-geteventtarget-js-L6\r\n\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n15.4.x and 16.x\r\nI've tested in Chrome, Firefox and Safari. I don't know if it works in previous versions of React (don't think so)",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/9301",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/9301/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/9301/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/9301/events",
        "html_url": "https://github.com/facebook/react/issues/9301",
        "id": 218363074,
        "number": 9301,
        "title": "Define specific browser support guidelines",
        "user": {
            "login": "aweary",
            "id": 6886061,
            "avatar_url": "https://avatars2.githubusercontent.com/u/6886061?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/aweary",
            "html_url": "https://github.com/aweary",
            "followers_url": "https://api.github.com/users/aweary/followers",
            "following_url": "https://api.github.com/users/aweary/following{/other_user}",
            "gists_url": "https://api.github.com/users/aweary/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/aweary/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/aweary/subscriptions",
            "organizations_url": "https://api.github.com/users/aweary/orgs",
            "repos_url": "https://api.github.com/users/aweary/repos",
            "events_url": "https://api.github.com/users/aweary/events{/privacy}",
            "received_events_url": "https://api.github.com/users/aweary/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 710375792,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
                "name": "Type: Discussion",
                "color": "fef2c0",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 11,
        "created_at": "2017-03-31T00:10:28Z",
        "updated_at": "2017-10-06T12:30:31Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "As it stands the only real solid guideline we have for browser support is that we support IE9+. But there are so many other outdated browser versions that are unreasonable to support or worry about.\r\n\r\nIt would be useful if we had more specific guidelines on what browsers we should target. Does Safari on iOS 3 matter? FireFox 4? You get the idea.\r\n\r\nIf we had a well-documented range of browser version that we *know* should work it would make it a lot easier to run through our DOM fixtures in BrowserStack and know we're safe.\r\n\r\nMaybe the internal core team can work internally with analytics to see what browsers Facebook needs to support and work forward from there?\r\n\r\ncc @gaearon @nhunzaker ",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/9378",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/9378/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/9378/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/9378/events",
        "html_url": "https://github.com/facebook/react/issues/9378",
        "id": 220404366,
        "number": 9378,
        "title": "If ReactDOM.render is asynchronous, how to catch exceptions?",
        "user": {
            "login": "StephanBijzitter",
            "id": 1649903,
            "avatar_url": "https://avatars0.githubusercontent.com/u/1649903?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/StephanBijzitter",
            "html_url": "https://github.com/StephanBijzitter",
            "followers_url": "https://api.github.com/users/StephanBijzitter/followers",
            "following_url": "https://api.github.com/users/StephanBijzitter/following{/other_user}",
            "gists_url": "https://api.github.com/users/StephanBijzitter/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/StephanBijzitter/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/StephanBijzitter/subscriptions",
            "organizations_url": "https://api.github.com/users/StephanBijzitter/orgs",
            "repos_url": "https://api.github.com/users/StephanBijzitter/repos",
            "events_url": "https://api.github.com/users/StephanBijzitter/events{/privacy}",
            "received_events_url": "https://api.github.com/users/StephanBijzitter/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 739761016,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Reconciler",
                "name": "Component: Reconciler",
                "color": "f9a798",
                "default": false
            },
            {
                "id": 710375792,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
                "name": "Type: Discussion",
                "color": "fef2c0",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 3,
        "created_at": "2017-04-08T14:51:48Z",
        "updated_at": "2017-11-03T15:50:18Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nI want to request a feature.\r\n\r\n**What is the current behavior?**\r\nThe callback is called, but doesn't pass an error if one occurred.\r\nhttps://facebook.github.io/react/docs/react-dom.html#render\r\n\r\n**What is the expected behavior?**\r\nIf an error occurs during rendering, I would want to handle the error in the callback.\r\n\r\nRight now, I'm using this:\r\n```jsx\r\n    return new Promise(resolve => {\r\n        const routerProps = {\r\n            routes,\r\n            history,\r\n            onUpdate\r\n        };\r\n\r\n        try {\r\n            render((\r\n                <Provider store={_store}>\r\n                    <Router {...routerProps}/>\r\n                </Provider>\r\n            ), document.getElementById('...-editor'), () => {\r\n                resolve();\r\n            });\r\n        } catch (error) {\r\n            reject(error);\r\n        }\r\n    });\r\n```\r\n\r\nBut I would like to use this:\r\n```jsx\r\n    return new Promise(resolve => {\r\n        const routerProps = {\r\n            routes,\r\n            history,\r\n            onUpdate\r\n        };\r\n\r\n        render((\r\n            <Provider store={_store}>\r\n                <Router {...routerProps}/>\r\n            </Provider>\r\n        ), document.getElementById('...-editor'), error => {\r\n            if (error) {\r\n                reject(error);\r\n            } else {\r\n                resolve();\r\n            }\r\n        });\r\n    });\r\n```\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nI'm using the major version 15 and have not checked any other versions.",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/9402",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/9402/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/9402/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/9402/events",
        "html_url": "https://github.com/facebook/react/issues/9402",
        "id": 220912820,
        "number": 9402,
        "title": "A number input will always have left pad 0 though parseFloat value in onChange",
        "user": {
            "login": "HaydnChen",
            "id": 16470614,
            "avatar_url": "https://avatars0.githubusercontent.com/u/16470614?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/HaydnChen",
            "html_url": "https://github.com/HaydnChen",
            "followers_url": "https://api.github.com/users/HaydnChen/followers",
            "following_url": "https://api.github.com/users/HaydnChen/following{/other_user}",
            "gists_url": "https://api.github.com/users/HaydnChen/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/HaydnChen/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/HaydnChen/subscriptions",
            "organizations_url": "https://api.github.com/users/HaydnChen/orgs",
            "repos_url": "https://api.github.com/users/HaydnChen/repos",
            "events_url": "https://api.github.com/users/HaydnChen/events{/privacy}",
            "received_events_url": "https://api.github.com/users/HaydnChen/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 40929151,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
                "name": "Type: Bug",
                "color": "b60205",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": {
            "login": "aweary",
            "id": 6886061,
            "avatar_url": "https://avatars2.githubusercontent.com/u/6886061?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/aweary",
            "html_url": "https://github.com/aweary",
            "followers_url": "https://api.github.com/users/aweary/followers",
            "following_url": "https://api.github.com/users/aweary/following{/other_user}",
            "gists_url": "https://api.github.com/users/aweary/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/aweary/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/aweary/subscriptions",
            "organizations_url": "https://api.github.com/users/aweary/orgs",
            "repos_url": "https://api.github.com/users/aweary/repos",
            "events_url": "https://api.github.com/users/aweary/events{/privacy}",
            "received_events_url": "https://api.github.com/users/aweary/received_events",
            "type": "User",
            "site_admin": false
        },
        "assignees": [
            {
                "login": "aweary",
                "id": 6886061,
                "avatar_url": "https://avatars2.githubusercontent.com/u/6886061?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/aweary",
                "html_url": "https://github.com/aweary",
                "followers_url": "https://api.github.com/users/aweary/followers",
                "following_url": "https://api.github.com/users/aweary/following{/other_user}",
                "gists_url": "https://api.github.com/users/aweary/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/aweary/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aweary/subscriptions",
                "organizations_url": "https://api.github.com/users/aweary/orgs",
                "repos_url": "https://api.github.com/users/aweary/repos",
                "events_url": "https://api.github.com/users/aweary/events{/privacy}",
                "received_events_url": "https://api.github.com/users/aweary/received_events",
                "type": "User",
                "site_admin": false
            }
        ],
        "milestone": null,
        "comments": 18,
        "created_at": "2017-04-11T10:54:25Z",
        "updated_at": "2018-03-28T13:37:06Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nbug\r\n\r\n**What is the current behavior?**\r\nI have a number input with defalut value 0 and in onChange function I'll parse value to float to avoid invalid input, but I'll always get left pad 0 on input UI. But in previouse version, my code works.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template: https://jsfiddle.net/84v837e9/).**\r\n<input type=\"number\" value={this.state.value} onChange={e=>this.setState({value: parseFloat(e.target.value)? parseFloat(e.target.value) : 0})}\r\n\r\n**What is the expected behavior?**\r\nShould not have left pad 0.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nreact 15.5.3, all browser / all OS. It works in 15.4.2",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/9446",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/9446/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/9446/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/9446/events",
        "html_url": "https://github.com/facebook/react/issues/9446",
        "id": 222136519,
        "number": 9446,
        "title": "Show a warning when value is provided to a checkbox input",
        "user": {
            "login": "srph",
            "id": 5093058,
            "avatar_url": "https://avatars3.githubusercontent.com/u/5093058?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/srph",
            "html_url": "https://github.com/srph",
            "followers_url": "https://api.github.com/users/srph/followers",
            "following_url": "https://api.github.com/users/srph/following{/other_user}",
            "gists_url": "https://api.github.com/users/srph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/srph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/srph/subscriptions",
            "organizations_url": "https://api.github.com/users/srph/orgs",
            "repos_url": "https://api.github.com/users/srph/repos",
            "events_url": "https://api.github.com/users/srph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/srph/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 40929153,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement",
                "name": "Type: Enhancement",
                "color": "84b6eb",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 10,
        "created_at": "2017-04-17T13:52:16Z",
        "updated_at": "2017-10-04T19:31:02Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nFeature\r\n\r\n**What is the current behavior?**\r\n\r\nA checkbox input can have a `value` prop which is most likely ignored (it should be `checked`).\r\n\r\n**What is the expected behavior?**\r\n\r\nI think we should throw a warning if a user provides a `value` instead of `checked` to a `<input type=\"checkbox\" />`.",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/9475",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/9475/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/9475/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/9475/events",
        "html_url": "https://github.com/facebook/react/issues/9475",
        "id": 223273649,
        "number": 9475,
        "title": "Seb's Deprecation Wishlist Umbrella",
        "user": {
            "login": "sebmarkbage",
            "id": 63648,
            "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sebmarkbage",
            "html_url": "https://github.com/sebmarkbage",
            "followers_url": "https://api.github.com/users/sebmarkbage/followers",
            "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
            "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
            "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
            "repos_url": "https://api.github.com/users/sebmarkbage/repos",
            "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 710615342,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Umbrella",
                "name": "Type: Umbrella",
                "color": "5319e7",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 6,
        "created_at": "2017-04-21T04:35:44Z",
        "updated_at": "2017-10-04T16:37:17Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "I have a list of breaking changes that I'd like to see because I think they're not strictly necessary features, can often be replaced by other APIs and their very existence makes implementations more constrained, even when they're not used.\r\n\r\nThis list is not meant to be anything we're planning on actively doing. It's just a drop point where I can add things as I think of them.\r\n\r\n- [ ] Shallow freeze the `defaultProps` object and make the `defaultProps` property non-configurable/non-writable after the first `createElement` or `createFactory` call. (Enables inlining/resolution of defaults statically.)\r\n\r\n- [ ] Treat `key`/`ref` as a separate namespace in JSX. Meaning that objects that are spread onto JSX don't transfer `key` and `ref`. Enables inlining of props object even if spread type is unknown. E.g.\r\n\r\n```js\r\nlet x = <Foo {...{key:'bar'}} />;\r\nx.key; // null\r\nx.props.key; // 'bar'\r\nlet y = <Foo key=\"bar\" />;\r\ny.key; // 'bar'\r\ny.props.key; // undefined\r\n```\r\n\r\n- [ ] Drop support for string refs.\r\n\r\n- [ ] Drop support for `ReactDOM.findDOMNode(...)` and `ReactNative.findNodeHandle(...)`. These are slower in Fiber and requires a tree to be materialized/stateful/introspectable at arbitrary times/threads even before we know if this will ever get called. Less automatic cleanup. Could possibly have an alternative API that works more like refs. However, just ref forwarding probably solves all legit use cases better.\r\n\r\n- [ ] Make `.type` and `.props` private on `ReactElement`s so that they can't be introspected (just like bound functions/closures). This makes optimizations like automatic making components asynchronous/synchronous safe or inlining components several levels deep.",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/9483",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/9483/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/9483/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/9483/events",
        "html_url": "https://github.com/facebook/react/issues/9483",
        "id": 223460879,
        "number": 9483,
        "title": "Feature Request: dangerouslySetInnerHTML as a return value",
        "user": {
            "login": "iamdustan",
            "id": 227879,
            "avatar_url": "https://avatars3.githubusercontent.com/u/227879?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/iamdustan",
            "html_url": "https://github.com/iamdustan",
            "followers_url": "https://api.github.com/users/iamdustan/followers",
            "following_url": "https://api.github.com/users/iamdustan/following{/other_user}",
            "gists_url": "https://api.github.com/users/iamdustan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/iamdustan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/iamdustan/subscriptions",
            "organizations_url": "https://api.github.com/users/iamdustan/orgs",
            "repos_url": "https://api.github.com/users/iamdustan/repos",
            "events_url": "https://api.github.com/users/iamdustan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/iamdustan/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 121709921,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2017-04-21T18:27:56Z",
        "updated_at": "2017-10-04T19:37:01Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "body": "I haven\u2019t fully thought through this yet, so hoping for some feedback on whether it is viable or breaks too many assumptions.\r\n\r\nThe goal is to create an escape hatch that would support rendering to conditional comments, alternative method for web components, and other unknown and probably bad ideas.\r\n\r\nSomething along the lines of:\r\n\r\n```jsx\r\nconst DangerousComment = ({children}) => ({\r\n  dangerouslySetInnerHTML: {__html: `<!-- ${children} -->` }\r\n});\r\n\r\nReactDOMServer.renderToString(\r\n  <head>\r\n    <DangerousComment>\r\n      {\"[if lte IE 9]><script src='/public/media.match.js'></script><![endif]\"}\r\n    </DangerousComment>\r\n  </head>\r\n); // <head><!--[if lte IE 9]><script src='/public/media.match.js'></script><![endif]--></head>\r\n```\r\n\r\n```jsx\r\nconst WebComponent = ({children}) => ({\r\n  dangerouslySetInnerHTML: {__html: `<!-- ${children} -->` }\r\n});\r\nReactDOM.render(() => (\r\n  <WebComponent>`\r\n    <app-toolbar arbitary-prop=\"sure-y-not\">\r\n      <div main-title>Web Components!</div>\r\n    </app-toolbar>\r\n  `</WebComponent>\r\n), document.body.firstChild);\r\n```\r\n\r\nThe first example is the one I\u2019m more interested at this point in time. The benefit here is this could work on both the DOM and server renderer without userland hacks like https://nemisj.com/conditional-ie-comments-in-react-js/ or `componentDidMount` ref replacement (client only, I believe?).\r\n\r\nA couple initial problems I see with this are (may or may not be solvable/avoidable with slight tweaks):\r\n\r\n* returning an arbitrary object `render` which isn\u2019t supported\r\n* how will unmounting this work?\r\n\r\nAlternative proposal:\r\n\r\nIntroduce a new DOM-renderer primitive `<comment />` or `<dangerousComment />` (to follow a similar approach to `dangerouslySetInnerHTML` clearly indicating the caveats that come with rendering comments). This alternative solution only solves the conditional comment issue above.",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/9505",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/9505/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/9505/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/9505/events",
        "html_url": "https://github.com/facebook/react/issues/9505",
        "id": 223673508,
        "number": 9505,
        "title": "[RFC] Add traversal utility to ReactTestUtils matching toTree shape",
        "user": {
            "login": "aweary",
            "id": 6886061,
            "avatar_url": "https://avatars2.githubusercontent.com/u/6886061?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/aweary",
            "html_url": "https://github.com/aweary",
            "followers_url": "https://api.github.com/users/aweary/followers",
            "following_url": "https://api.github.com/users/aweary/following{/other_user}",
            "gists_url": "https://api.github.com/users/aweary/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/aweary/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/aweary/subscriptions",
            "organizations_url": "https://api.github.com/users/aweary/orgs",
            "repos_url": "https://api.github.com/users/aweary/repos",
            "events_url": "https://api.github.com/users/aweary/events{/privacy}",
            "received_events_url": "https://api.github.com/users/aweary/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 139734344,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Test%20Utils",
                "name": "Component: Test Utils",
                "color": "eb6420",
                "default": false
            },
            {
                "id": 121709921,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 4,
        "created_at": "2017-04-23T22:49:34Z",
        "updated_at": "2017-10-04T19:37:46Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "### Problem\r\n\r\nThe `ReactTestRenderer` now supports a new API, [`toTree`](https://github.com/facebook/react/blob/master/src/renderers/testing/ReactTestRendererFiber.js#L350-L355), which returns an easily traversed tree representing the internal state of the instance and its rendered nodes.\r\n\r\nThe existing solution for this in `TestUtils` is `findAllInRenderedTree` which traverses the root and lets you provide a test function it will call to reduce a tree based on a predicate. The predicate function is passed the public instance for the node.\r\n\r\nThe issue with that is that it makes the predicate function polymorphic and requires every consuming utility to check if it's being passed a component instance or a DOM node. \r\n\r\n\r\n### Solution\r\n\r\nI propose that we implement a new API similar to `findAllInRendererdTree` that calls the predicate function with the result of calling `toTree` on the internal instance instead of the public instance. This would mean:\r\n\r\n* the predicate function will always be called with the same data structure (a tree node)\r\n* third-party traversal utilities can be shared between `ReactTestRenderer` and `ReactTestUtils`, since they would operate on the same tree structure\r\n* You could actually assert on functional components, which currently have no instance and just call the predicate with `null`\r\n\r\nThis new API could just be a pure traversal utility, leaving it up to the consumer to accumulate results.\r\n\r\n```js\r\nimport { renderIntoDocument, traverseTree } from 'react-dom/test-utils';\r\nvar root = renderIntoDocument(<App />);\r\nvar results = [];\r\ntraverseTree(root, node => {\r\n  if (somePredicate(node) { results.push(node) }\r\n})\r\n```\r\n \r\n## Implementation\r\n\r\nWith a brief review, it looks like we could just export the `toTree` function that is currently inlined in `ReactTestRenderer` and provide a way to change:\r\n\r\n```js\r\n var publicInst = node.stateNode;\r\n      if (test(publicInst)) {\r\n        ret.push(publicInst);\r\n      }\r\n```\r\n\r\nto:\r\n```js\r\n var treeNode = toTree(node);\r\n      if (test(treeNode)) {\r\n        ret.push(treeNode);\r\n      }\r\n```\r\n\r\ncc @gaearon @bvaughn @lelandrichardson ",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/9559",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/9559/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/9559/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/9559/events",
        "html_url": "https://github.com/facebook/react/issues/9559",
        "id": 225263316,
        "number": 9559,
        "title": "Warn when PureComponent renders impure ones as its children",
        "user": {
            "login": "otakustay",
            "id": 639549,
            "avatar_url": "https://avatars2.githubusercontent.com/u/639549?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/otakustay",
            "html_url": "https://github.com/otakustay",
            "followers_url": "https://api.github.com/users/otakustay/followers",
            "following_url": "https://api.github.com/users/otakustay/following{/other_user}",
            "gists_url": "https://api.github.com/users/otakustay/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/otakustay/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/otakustay/subscriptions",
            "organizations_url": "https://api.github.com/users/otakustay/orgs",
            "repos_url": "https://api.github.com/users/otakustay/repos",
            "events_url": "https://api.github.com/users/otakustay/events{/privacy}",
            "received_events_url": "https://api.github.com/users/otakustay/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 139653724,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Core%20Utilities",
                "name": "Component: Core Utilities",
                "color": "c5def5",
                "default": false
            },
            {
                "id": 121709921,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 8,
        "created_at": "2017-04-29T15:14:59Z",
        "updated_at": "2017-10-19T03:50:22Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nfeature\r\n\r\n**What is the current behavior?**\r\nWhen a PureComponent renders an impure one as its child, no warning in console or devtool\r\n\r\n**What is the expected behavior?**\r\nIt could be better if we get a warning message for such cases\r\n\r\nThis may be related to https://github.com/facebook/react/pull/9240 since React now disallow PureComponent to have a custom `shouldComponentUpdate` implement, so a \"pure\" component with customized and more efficient `shouldComponentUpdate` method must inherit from `Component` base class and add a `isPureReactComponent` property themselves in order to prevent the warning message appear\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n15.5.4\r\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/9620",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/9620/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/9620/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/9620/events",
        "html_url": "https://github.com/facebook/react/issues/9620",
        "id": 226766021,
        "number": 9620,
        "title": "Warn when `static propTypes/static defaultProps` in ES6 class is a function",
        "user": {
            "login": "victor-homyakov",
            "id": 121449,
            "avatar_url": "https://avatars1.githubusercontent.com/u/121449?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/victor-homyakov",
            "html_url": "https://github.com/victor-homyakov",
            "followers_url": "https://api.github.com/users/victor-homyakov/followers",
            "following_url": "https://api.github.com/users/victor-homyakov/following{/other_user}",
            "gists_url": "https://api.github.com/users/victor-homyakov/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/victor-homyakov/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/victor-homyakov/subscriptions",
            "organizations_url": "https://api.github.com/users/victor-homyakov/orgs",
            "repos_url": "https://api.github.com/users/victor-homyakov/repos",
            "events_url": "https://api.github.com/users/victor-homyakov/events{/privacy}",
            "received_events_url": "https://api.github.com/users/victor-homyakov/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 139653724,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Core%20Utilities",
                "name": "Component: Core Utilities",
                "color": "c5def5",
                "default": false
            },
            {
                "id": 121709921,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2017-05-06T12:20:06Z",
        "updated_at": "2017-10-04T19:41:48Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\n```\r\nclass TestWrongPropTypes extends Component {\r\n    static propTypes() {\r\n        return {\r\n            children: PropTypes.string,\r\n            missing: PropTypes.string.isRequired\r\n        };\r\n    }\r\n\r\n    static defaultProps() {\r\n        return { children: 'Default props via static function' };\r\n    }\r\n\r\n    render() {\r\n        return <p>{this.props.children}</p>;\r\n    }\r\n}\r\n```\r\n\r\nIn this example React will silently skip `propTypes` checking and default props setting for `TestWrongPropTypes` component.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template: https://jsfiddle.net/84v837e9/).**\r\nhttps://jsbin.com/jidupehebu/edit?js,console\r\nhttps://jsfiddle.net/84v837e9/30/\r\n\r\n**What is the expected behavior?**\r\nI know that in order to work, propTypes definition should be `static get propTypes = {...}` or `TestWrongPropTypes.propTypes = {...}`. But I'd like to have warning like \"propTypes/defaultProps is function but should be either property or getter\" to prevent such errors.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nDiscovered in React 15.X, but probably the same behavior will be also in earlier versions.",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/9657",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/9657/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/9657/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/9657/events",
        "html_url": "https://github.com/facebook/react/issues/9657",
        "id": 227840957,
        "number": 9657,
        "title": "[RFC] onChange -> onInput, and don't polyfill onInput for uncontrolled components",
        "user": {
            "login": "sebmarkbage",
            "id": 63648,
            "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sebmarkbage",
            "html_url": "https://github.com/sebmarkbage",
            "followers_url": "https://api.github.com/users/sebmarkbage/followers",
            "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
            "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
            "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
            "repos_url": "https://api.github.com/users/sebmarkbage/repos",
            "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 710375792,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
                "name": "Type: Discussion",
                "color": "fef2c0",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 10,
        "created_at": "2017-05-10T23:47:56Z",
        "updated_at": "2017-11-29T01:24:28Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "`onChange` is a nicer name for what `onInput` does and the fact that it has propagated up to other high-level components as the default name is much nicer than `onInput` as a high level event name.\r\n\r\nGenerally it has been helpful for the many new-comers to React that don't know the DOM well (which is a lot more than the inverse). However, that doesn't change the fact that it can be confusing for people that are familiar.\r\n\r\nUnfortunately, changing it now would cause confusion for everyone that already knows React.\r\n\r\nThe reason I'd like to change it now is because I'd like to get away from polyfilling it for __uncontrolled__ components. This use case is filled with all kinds of imperative code which leads to edge cases. E.g. reading/setting `e.target.value` or reading/setting `ref.value`.\r\n\r\nWhen you use __controlled__ components you shouldn't need to touch them imperatively and therefore won't hit the edge cases. Ideally we should get away from reading from `e.target.value` and instead just pass the `value` directly to the event handler.\r\n\r\n## Proposal:\r\n\r\n__Controlled Components__\r\n\r\n- `onInput`: Polyfilled and works like `onChange` does today. It is allowed to over-fire many events even if nothing changed. May have special Fiber rules regarding synchronous flushing. _Optional: Pass `value` as second arg._\r\n- `onChange`: Works like `onInput` for one version but warns about being deprecated and suggests switching to `onInput`. In next version it works like the browser but still warns and tells you to use `onInput` forever.\r\n\r\n_Optional: Add a getter/setter on DOM `.value` in development mode and warn if this is used directly._\r\n\r\n__Uncontrolled Components__\r\n\r\n- `onInput`: Not polyfilled. Works however the browser works. Warns about browser differences if you don't also specify `onClick`, `onKeyDown` and/or `onKeyUp`. The warnings suggests implementing those listeners to cover more edge cases, or switch to a controlled component.\r\n- `onChange`: Not polyfilled. Works however the browser works.\r\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/9809",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/9809/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/9809/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/9809/events",
        "html_url": "https://github.com/facebook/react/issues/9809",
        "id": 232067946,
        "number": 9809,
        "title": "touchstart preventDefault() does not prevent click event.",
        "user": {
            "login": "benwiley4000",
            "id": 13558253,
            "avatar_url": "https://avatars2.githubusercontent.com/u/13558253?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benwiley4000",
            "html_url": "https://github.com/benwiley4000",
            "followers_url": "https://api.github.com/users/benwiley4000/followers",
            "following_url": "https://api.github.com/users/benwiley4000/following{/other_user}",
            "gists_url": "https://api.github.com/users/benwiley4000/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benwiley4000/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benwiley4000/subscriptions",
            "organizations_url": "https://api.github.com/users/benwiley4000/orgs",
            "repos_url": "https://api.github.com/users/benwiley4000/repos",
            "events_url": "https://api.github.com/users/benwiley4000/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benwiley4000/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 710722093,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
                "name": "Type: Needs Investigation",
                "color": "fbca04",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 12,
        "created_at": "2017-05-29T17:12:21Z",
        "updated_at": "2018-01-16T21:57:12Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nCalling `e.preventDefault()` on a synthetic `onTouchStart` event fails to [prevent the `click` event](https://w3c.github.io/touch-events/#h-note5). I also tried `e.nativeEvent.preventDefault()`, but this didn't make any difference.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template: https://jsfiddle.net/84v837e9/).**\r\n\r\nHere's a div which is supposed to handle a hover case but **not** process a click the first time is is tapped via touch (click on desktop is fine). However tapping with touch (on a mobile device or using dev tools touch emulation) will trigger both `touchstart` and `click` immediately.\r\n\r\n[jsfiddle](http://jsfiddle.net/69z2wepo/79757/)\r\n```javascript\r\nconst style = {\r\n  background: 'red',\r\n  width: 100,\r\n  height: 100,\r\n  // to ensure `touchstart` `preventDefault()` is allowed on mobile\r\n  touchAction: 'none'\r\n};\r\n\r\nclass SomeButton extends React.Component {\r\n  constructor (props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      hover: false,\r\n      click: false\r\n    };\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <div\r\n        style={style}\r\n        onMouseEnter={() => this.setState({ hover: true })}\r\n        onClick={() => this.setState({ click: true })}\r\n        onTouchStart={e => {\r\n          if (!this.state.hover) {\r\n            e.preventDefault(); // doesn't work!\r\n            this.setState({ hover: true });\r\n          }\r\n        }}\r\n      >\r\n        {this.state.hover && 'hover!'}\r\n        {this.state.click && 'click!'}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n```\r\n\r\nHowever if I move the `touchstart` listener to `componentDidMount` and use the normal DOM API, everything works:\r\n\r\n[jsfiddle](http://jsfiddle.net/69z2wepo/79759/)\r\n```javascript\r\n// ...\r\nclass SomeButton extends React.Component {\r\n  constructor (props) {\r\n    // ...\r\n  }\r\n  \r\n  componentDidMount () {\r\n    this.elem.addEventListener('touchstart', e => {\r\n      if (!this.state.hover) {\r\n        e.preventDefault(); // WORKS!\r\n        this.setState({ hover: true });\r\n      }\r\n    });\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <div\r\n        ref={elem => this.elem = elem}\r\n        { /* ... (removed onTouchStart) ... */}\r\n      >\r\n        {/* ... */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n```\r\n\r\n**What is the expected behavior?**\r\nThe first time a `touchstart` is processed, we only treat it as a hover, and wait to process the `click` event until after the next `touchstart`. If the pointer is a mouse, both events can be processed at once.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact 15.5.4. Not sure about previous React versions. Chrome for Android, Chrome for Mac emulating touch, Firefox for Mac emulating touch.\r\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/9821",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/9821/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/9821/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/9821/events",
        "html_url": "https://github.com/facebook/react/issues/9821",
        "id": 232479419,
        "number": 9821,
        "title": "Children forEach filters functions",
        "user": {
            "login": "neytema",
            "id": 124887,
            "avatar_url": "https://avatars3.githubusercontent.com/u/124887?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/neytema",
            "html_url": "https://github.com/neytema",
            "followers_url": "https://api.github.com/users/neytema/followers",
            "following_url": "https://api.github.com/users/neytema/following{/other_user}",
            "gists_url": "https://api.github.com/users/neytema/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/neytema/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neytema/subscriptions",
            "organizations_url": "https://api.github.com/users/neytema/orgs",
            "repos_url": "https://api.github.com/users/neytema/repos",
            "events_url": "https://api.github.com/users/neytema/events{/privacy}",
            "received_events_url": "https://api.github.com/users/neytema/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 710375792,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
                "name": "Type: Discussion",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 121709921,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 4,
        "created_at": "2017-05-31T07:36:59Z",
        "updated_at": "2017-10-04T19:47:29Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "**React v15.5.4**\r\n\r\nUnexpected behaviour of `React.Children.forEach` \u2013 silently filters functions.\r\n\r\n**Current behavior:**\r\n\r\n```jsx\r\nconst element = (\r\n  <div>\r\n    {() => {}}\r\n    {() => {}}\r\n  </div>\r\n);\r\nconsole.log(React.Children.toArray(element.props.children))\r\n// Output: []\r\n```\r\n\r\n**Expected behavior:**\r\n\r\nChildren.forEach should throw *Invariant* error then *function* type child is met.\r\n\r\nor\r\n\r\nChildren.forEach shouldn't filter *function* type children.\r\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/9832",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/9832/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/9832/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/9832/events",
        "html_url": "https://github.com/facebook/react/issues/9832",
        "id": 233005707,
        "number": 9832,
        "title": "Error when `__source` is provided to production build",
        "user": {
            "login": "sebmarkbage",
            "id": 63648,
            "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sebmarkbage",
            "html_url": "https://github.com/sebmarkbage",
            "followers_url": "https://api.github.com/users/sebmarkbage/followers",
            "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
            "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
            "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
            "repos_url": "https://api.github.com/users/sebmarkbage/repos",
            "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 710573595,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
                "name": "Component: Developer Tools",
                "color": "fbca04",
                "default": false
            },
            {
                "id": 40929153,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement",
                "name": "Type: Enhancement",
                "color": "84b6eb",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2017-06-01T20:48:02Z",
        "updated_at": "2017-10-04T19:48:14Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "Currently if the `__source` transform is enabled together with the production build there are no indicators of a poorly performant configuration. https://facebook.github.io/react/ even has it.\r\n\r\nWe already check for the [existence of a `__source` field](https://github.com/facebook/react/blob/master/src/isomorphic/classic/element/ReactElement.js#L203). So we can just reuse the same check to issue something in prod mode if it exists.\r\n\r\nThe problem is that we don't have any warning module in prod and it is unclear if it would get attention or even considered to spammy in prod.\r\n\r\nWe could throw but that might be too extreme since a misconfiguration would kill the site.\r\n\r\nWe could also use this to set a flag on the `__REACT_DEVTOOLS_GLOBAL_HOOK__` object. The icon in the devtools extension could use this to indicate a misconfigured build.",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/9866",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/9866/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/9866/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/9866/events",
        "html_url": "https://github.com/facebook/react/issues/9866",
        "id": 233967763,
        "number": 9866,
        "title": "Add More Cases to Server Rendering Fixture",
        "user": {
            "login": "sebmarkbage",
            "id": 63648,
            "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sebmarkbage",
            "html_url": "https://github.com/sebmarkbage",
            "followers_url": "https://api.github.com/users/sebmarkbage/followers",
            "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
            "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
            "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
            "repos_url": "https://api.github.com/users/sebmarkbage/repos",
            "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 710332294,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Server%20Rendering",
                "name": "Component: Server Rendering",
                "color": "d4c5f9",
                "default": false
            },
            {
                "id": 588833528,
                "url": "https://api.github.com/repos/facebook/react/labels/Difficulty:%20medium",
                "name": "Difficulty: medium",
                "color": "fbca04",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 23,
        "created_at": "2017-06-06T17:31:30Z",
        "updated_at": "2018-01-05T05:05:18Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "Server rendering has a lot of quirks that are easy to break. We have a fixture set up for it in [/fixtures/ssr](https://github.com/facebook/react/tree/master/fixtures/ssr).\r\n\r\nThis could be expanded to have more stuff in it. A few things we should have in the fixture and test for:\r\n\r\n- `<input />`, `<select />`, `<option />` and `<textarea />` controlled and uncontrolled. All types of inputs, including dates, numbers etc.\r\n- Where children is a single string/number, children array with multiple string/numbers, children with interleaved nodes and string/numbers.\r\n- Event handlers on hydrated nodes that does something useful when clicked. Reused event handlers on multiple different nodes etc.\r\n- onLoad event handlers.\r\n- Special properties that don't map directly to attribute names like `className`.\r\n- `<div hidden>...</div>` subtrees. (Subtrees with the \"hidden\" attribute set on it. Tests deprioritization.)\r\n\r\nWe probably need some on-screen options to turn on/off these things in the test suite to test under these conditions:\r\n\r\n- Server and Client differences. Turn on a flag that makes the server and client differ in minor ways.\r\n- Async hydration. Use Fiber's async features to hydrate the tree.\r\n- Defer hydration for some time. This is useful to test slow loading conditions where the user may have changed state of form controls before hydration. When combined with async, it can make the async rendering artificially slow. It should reveal issues such as a patching or event handlers being attached too early (before commit phase).\r\n\r\nIt's ok to start small. You don't have to do it all at once.",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/9999",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/9999/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/9999/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/9999/events",
        "html_url": "https://github.com/facebook/react/issues/9999",
        "id": 236786081,
        "number": 9999,
        "title": "False positive getDefaultProps warning when mixing development and production versions",
        "user": {
            "login": "mondwan",
            "id": 3899555,
            "avatar_url": "https://avatars2.githubusercontent.com/u/3899555?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mondwan",
            "html_url": "https://github.com/mondwan",
            "followers_url": "https://api.github.com/users/mondwan/followers",
            "following_url": "https://api.github.com/users/mondwan/following{/other_user}",
            "gists_url": "https://api.github.com/users/mondwan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mondwan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mondwan/subscriptions",
            "organizations_url": "https://api.github.com/users/mondwan/orgs",
            "repos_url": "https://api.github.com/users/mondwan/repos",
            "events_url": "https://api.github.com/users/mondwan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mondwan/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 139653724,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Core%20Utilities",
                "name": "Component: Core Utilities",
                "color": "c5def5",
                "default": false
            },
            {
                "id": 588833528,
                "url": "https://api.github.com/repos/facebook/react/labels/Difficulty:%20medium",
                "name": "Difficulty: medium",
                "color": "fbca04",
                "default": false
            },
            {
                "id": 40929151,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
                "name": "Type: Bug",
                "color": "b60205",
                "default": false
            },
            {
                "id": 717031390,
                "url": "https://api.github.com/repos/facebook/react/labels/good%20first%20issue",
                "name": "good first issue",
                "color": "6ce26a",
                "default": true
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 18,
        "created_at": "2017-06-19T05:50:17Z",
        "updated_at": "2018-01-21T09:07:05Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "As migrating from 15.4 to 15.5, I am rewrite original react components with `create-react-class`. \r\n\r\nHowever, there is a warning.\r\n\r\n```\r\nreact-15.5.4.js?bust=1497843639843:3287 Warning: getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.\r\n```\r\n\r\n As I am really transferring from a **classic** `React.createClass` definition, I would like to ask is this warning appropriate? Or, this is a depreciation sames as the level of migrating to `create-react-class`?\r\n\r\nOoops, I get ticket #9999  :D",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/10020",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/10020/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/10020/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/10020/events",
        "html_url": "https://github.com/facebook/react/issues/10020",
        "id": 237657832,
        "number": 10020,
        "title": "Feature request: renderTypes",
        "user": {
            "login": "ljharb",
            "id": 45469,
            "avatar_url": "https://avatars1.githubusercontent.com/u/45469?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ljharb",
            "html_url": "https://github.com/ljharb",
            "followers_url": "https://api.github.com/users/ljharb/followers",
            "following_url": "https://api.github.com/users/ljharb/following{/other_user}",
            "gists_url": "https://api.github.com/users/ljharb/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ljharb/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ljharb/subscriptions",
            "organizations_url": "https://api.github.com/users/ljharb/orgs",
            "repos_url": "https://api.github.com/users/ljharb/repos",
            "events_url": "https://api.github.com/users/ljharb/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ljharb/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 121709921,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 26,
        "created_at": "2017-06-21T20:40:15Z",
        "updated_at": "2017-11-03T15:36:12Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nRequest a feature\r\n\r\nPer some discussion today with @tomocchino and @thejameskyle, I'd like a non-Flow mechanism to annotate what type(s) of elements a component expects to render.\r\n\r\nHere's some examples, with Flow types for comparison (that I realize may not be currently checked in Flow, yet):\r\n```jsx\r\nfunction Foo({ yes }){\r\n  return yes ? <Bar /> : <div />;\r\n}\r\nFoo.renderTypes = [Bar, 'div'];\r\n\r\n\r\nclass Bar extends React.Component {\r\n  static renderTypes = [Button];\r\n\r\n  render() {\r\n    return <Button />;\r\n  }\r\n}\r\n```\r\n```jsx\r\nfunction Foo({ yes }): React.Element<Bar | 'div'> {\r\n  return yes ? <Bar /> : <div />;\r\n}\r\n\r\nclass Bar extends React.Component {\r\n  render(): React.Element<Button> {\r\n    return <Button />;\r\n  }\r\n}\r\n```\r\n\r\nInside @Airbnb, we have lots of use cases where we have container components in a separate package - say, a `<ButtonRow>`, and we have intentionally restrictive propTypes on its `children` prop, to only allow a `Button` (also in the same package). However, in an app that consumes this component library package, a dev may want to create a `<SpecialProductButton />` that in turn renders a `<Button>` - however, they're unable to pass it into `ButtonRow` (our propType warnings fail tests), even though conceptually it should be permitted.\r\n\r\nHaving `.renderTypes` would allow us to widen our `children` propType to allow for either a `<Button>`, or *anything that renders a `<Button>`*, which helps us maintain separation of concerns (the package doesn't have to know about `<SpecialProductButton>` to accept it) as well as maintain strictness (the package doesn't have to allow any wacky element inside `<ButtonRow>`).\r\n\r\nI imagine the implementation to be:\r\n 1. when render() is called or an SFC is invoked, (in async rendering, it'd be when the component resolves, i suppose)\r\n 1. in development only and if `.renderTypes` exists on the component\r\n 1. evaluate the equivalent of [`elementType`](https://www.npmjs.com/package/airbnb-prop-types)`(...Component.renderTypes)({ children: renderedValue }, 'children', ...)`,\r\n 1. just like propTypes, log the error if one is returned\r\n\r\n(cc @spicyj)",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/10021",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/10021/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/10021/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/10021/events",
        "html_url": "https://github.com/facebook/react/issues/10021",
        "id": 237665439,
        "number": 10021,
        "title": "Feature request: Add a \"module\" entry in package.json to export ES2015 version of React",
        "user": {
            "login": "misterfresh",
            "id": 2299642,
            "avatar_url": "https://avatars3.githubusercontent.com/u/2299642?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/misterfresh",
            "html_url": "https://github.com/misterfresh",
            "followers_url": "https://api.github.com/users/misterfresh/followers",
            "following_url": "https://api.github.com/users/misterfresh/following{/other_user}",
            "gists_url": "https://api.github.com/users/misterfresh/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/misterfresh/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/misterfresh/subscriptions",
            "organizations_url": "https://api.github.com/users/misterfresh/orgs",
            "repos_url": "https://api.github.com/users/misterfresh/repos",
            "events_url": "https://api.github.com/users/misterfresh/events{/privacy}",
            "received_events_url": "https://api.github.com/users/misterfresh/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 71502270,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Build%20Infrastructure",
                "name": "Component: Build Infrastructure",
                "color": "f9d0c4",
                "default": false
            },
            {
                "id": 121709921,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 16,
        "created_at": "2017-06-21T21:09:32Z",
        "updated_at": "2018-01-09T10:41:13Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nRequest a feature\r\n\r\n**What is the current behavior?**\r\nReact ecosystem was promoting ES6 classes and modules since 2014 and many packages like react-router, redux and so on, have an \"es\" folder in the npm package with source code in ES2015 modules. Unless I am missing something, it is strange that React itself does not offer that option.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template: https://jsfiddle.net/84v837e9/).**\r\nInstall react and try to import it in a browser with native modules enabled.\r\n\r\n**What is the expected behavior?**\r\nHave an \"es\" folder in the npm package with ES2015 modules source code, like most React ecosystem projects do. Allow to import react from ES2015 native modules to make developer workflow more simple.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nAll versions",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/10049",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/10049/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/10049/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/10049/events",
        "html_url": "https://github.com/facebook/react/issues/10049",
        "id": 238704590,
        "number": 10049,
        "title": "Render Callbacks Fire Even Though an Error Happened",
        "user": {
            "login": "sebmarkbage",
            "id": 63648,
            "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sebmarkbage",
            "html_url": "https://github.com/sebmarkbage",
            "followers_url": "https://api.github.com/users/sebmarkbage/followers",
            "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
            "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
            "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
            "repos_url": "https://api.github.com/users/sebmarkbage/repos",
            "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 739761016,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Reconciler",
                "name": "Component: Reconciler",
                "color": "f9a798",
                "default": false
            },
            {
                "id": 710375792,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
                "name": "Type: Discussion",
                "color": "fef2c0",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": {
            "login": "acdlite",
            "id": 3624098,
            "avatar_url": "https://avatars0.githubusercontent.com/u/3624098?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/acdlite",
            "html_url": "https://github.com/acdlite",
            "followers_url": "https://api.github.com/users/acdlite/followers",
            "following_url": "https://api.github.com/users/acdlite/following{/other_user}",
            "gists_url": "https://api.github.com/users/acdlite/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/acdlite/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/acdlite/subscriptions",
            "organizations_url": "https://api.github.com/users/acdlite/orgs",
            "repos_url": "https://api.github.com/users/acdlite/repos",
            "events_url": "https://api.github.com/users/acdlite/events{/privacy}",
            "received_events_url": "https://api.github.com/users/acdlite/received_events",
            "type": "User",
            "site_admin": false
        },
        "assignees": [
            {
                "login": "acdlite",
                "id": 3624098,
                "avatar_url": "https://avatars0.githubusercontent.com/u/3624098?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/acdlite",
                "html_url": "https://github.com/acdlite",
                "followers_url": "https://api.github.com/users/acdlite/followers",
                "following_url": "https://api.github.com/users/acdlite/following{/other_user}",
                "gists_url": "https://api.github.com/users/acdlite/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/acdlite/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/acdlite/subscriptions",
                "organizations_url": "https://api.github.com/users/acdlite/orgs",
                "repos_url": "https://api.github.com/users/acdlite/repos",
                "events_url": "https://api.github.com/users/acdlite/events{/privacy}",
                "received_events_url": "https://api.github.com/users/acdlite/received_events",
                "type": "User",
                "site_admin": false
            }
        ],
        "milestone": null,
        "comments": 1,
        "created_at": "2017-06-27T00:19:04Z",
        "updated_at": "2017-11-03T15:18:47Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "I think something like this both throws and prints success.\r\n\r\n```js\r\nfunction Throw() {\r\n  throw new Error();\r\n}\r\nReactDOM.render(<Throw />, () => console.log('success'));\r\n```\r\n\r\nThis means that it is not safe to wrap this in a Promise like this for example:\r\n\r\n```js\r\nnew Promise(resolve => ReactDOM.render(..., ..., resolve));\r\n```\r\n\r\nBecause if this throws, then the error is silenced. The Promise was already resolved. I hit this in the ServerIntegration-test",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/10051",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/10051/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/10051/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/10051/events",
        "html_url": "https://github.com/facebook/react/issues/10051",
        "id": 238751719,
        "number": 10051,
        "title": "Include canary tests of community packages as part of the release process",
        "user": {
            "login": "ljharb",
            "id": 45469,
            "avatar_url": "https://avatars1.githubusercontent.com/u/45469?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ljharb",
            "html_url": "https://github.com/ljharb",
            "followers_url": "https://api.github.com/users/ljharb/followers",
            "following_url": "https://api.github.com/users/ljharb/following{/other_user}",
            "gists_url": "https://api.github.com/users/ljharb/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ljharb/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ljharb/subscriptions",
            "organizations_url": "https://api.github.com/users/ljharb/orgs",
            "repos_url": "https://api.github.com/users/ljharb/repos",
            "events_url": "https://api.github.com/users/ljharb/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ljharb/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 71502270,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Build%20Infrastructure",
                "name": "Component: Build Infrastructure",
                "color": "f9d0c4",
                "default": false
            },
            {
                "id": 121709921,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 4,
        "created_at": "2017-06-27T06:44:09Z",
        "updated_at": "2017-10-04T20:01:44Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "body": "(cc @gaearon, from https://github.com/yannickcr/eslint-plugin-react/issues/1258#issuecomment-311211399)\r\n\r\nIn general, there's lots of little utilities that are helpful to have as standalone packages. One of them is https://unpkg.com/airbnb-prop-types@2.7.0/build/helpers/getComponentName.js, for example.\r\n\r\nIt'd be ideal for the React team to maintain this package - primarily, so that it would be guaranteed to either not break when a new React version is released, or be updated to work with the upcoming version prior to release.\r\n\r\nIn the interests of the React team not signing up to maintain all the package requests that might come in, would it be possible to make \"part of the release process\" be \"ensure compatible versions of community packages exist\"? I'd be happy to create the above package, for example, and I know the community would love a guarantee that enzyme would always work with any official React version release, prior to the release.",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/10064",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/10064/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/10064/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/10064/events",
        "html_url": "https://github.com/facebook/react/issues/10064",
        "id": 239299834,
        "number": 10064,
        "title": "Feature request: Support server-side rendering of non-standard DOM attribute names (eg. AMP's [prop]=\"value\")",
        "user": {
            "login": "cole-sanderson",
            "id": 5376326,
            "avatar_url": "https://avatars2.githubusercontent.com/u/5376326?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cole-sanderson",
            "html_url": "https://github.com/cole-sanderson",
            "followers_url": "https://api.github.com/users/cole-sanderson/followers",
            "following_url": "https://api.github.com/users/cole-sanderson/following{/other_user}",
            "gists_url": "https://api.github.com/users/cole-sanderson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cole-sanderson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cole-sanderson/subscriptions",
            "organizations_url": "https://api.github.com/users/cole-sanderson/orgs",
            "repos_url": "https://api.github.com/users/cole-sanderson/repos",
            "events_url": "https://api.github.com/users/cole-sanderson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cole-sanderson/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 121709921,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": {
            "login": "aweary",
            "id": 6886061,
            "avatar_url": "https://avatars2.githubusercontent.com/u/6886061?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/aweary",
            "html_url": "https://github.com/aweary",
            "followers_url": "https://api.github.com/users/aweary/followers",
            "following_url": "https://api.github.com/users/aweary/following{/other_user}",
            "gists_url": "https://api.github.com/users/aweary/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/aweary/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/aweary/subscriptions",
            "organizations_url": "https://api.github.com/users/aweary/orgs",
            "repos_url": "https://api.github.com/users/aweary/repos",
            "events_url": "https://api.github.com/users/aweary/events{/privacy}",
            "received_events_url": "https://api.github.com/users/aweary/received_events",
            "type": "User",
            "site_admin": false
        },
        "assignees": [
            {
                "login": "aweary",
                "id": 6886061,
                "avatar_url": "https://avatars2.githubusercontent.com/u/6886061?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/aweary",
                "html_url": "https://github.com/aweary",
                "followers_url": "https://api.github.com/users/aweary/followers",
                "following_url": "https://api.github.com/users/aweary/following{/other_user}",
                "gists_url": "https://api.github.com/users/aweary/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/aweary/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aweary/subscriptions",
                "organizations_url": "https://api.github.com/users/aweary/orgs",
                "repos_url": "https://api.github.com/users/aweary/repos",
                "events_url": "https://api.github.com/users/aweary/events{/privacy}",
                "received_events_url": "https://api.github.com/users/aweary/received_events",
                "type": "User",
                "site_admin": false
            }
        ],
        "milestone": null,
        "comments": 8,
        "created_at": "2017-06-28T21:15:30Z",
        "updated_at": "2018-04-07T21:36:56Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nRequest a feature\r\n\r\nI am working on project to build AMP page with React Server Side Rendering. I am having an issue to add custom attribute to built-in AMP element. In order to be able to use [amp-bind](https://www.ampproject.org/docs/reference/components/amp-bind#bindings) we need to be able to output \u201cbindings\u201d, which are special attributes of the form `[attribute]`, eg. `[slide]=\"selectedSlide\"`. \r\n\r\n```\r\n<amp-carousel \r\n    layout={layout}\r\n    height={height}\r\n    width={width}\r\n    [slide]={slide}\r\n>\r\n        ...\r\n</amp-carousel>\r\n```\r\n\r\nHere is AMP carousel example that work with [amp-bind](https://ampbyexample.com/advanced/image_galleries_with_amp-carousel/#linking-carousels-with-amp-bind).\r\n\r\n**What is the current behavior?**\r\n- Parsing error: Unexpected token [ (Fatal) \r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n- All\r\n\r\nFor more information, you can read all the discussion in this [PR](https://github.com/facebook/react/pull/7311#issuecomment-311516763).",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/10085",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/10085/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/10085/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/10085/events",
        "html_url": "https://github.com/facebook/react/issues/10085",
        "id": 239916842,
        "number": 10085,
        "title": "Nicer Formatting of SSR Validation",
        "user": {
            "login": "sebmarkbage",
            "id": 63648,
            "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sebmarkbage",
            "html_url": "https://github.com/sebmarkbage",
            "followers_url": "https://api.github.com/users/sebmarkbage/followers",
            "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
            "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
            "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
            "repos_url": "https://api.github.com/users/sebmarkbage/repos",
            "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 710332294,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Server%20Rendering",
                "name": "Component: Server Rendering",
                "color": "d4c5f9",
                "default": false
            },
            {
                "id": 760751171,
                "url": "https://api.github.com/repos/facebook/react/labels/Difficulty:%20challenging",
                "name": "Difficulty: challenging",
                "color": "f2687c",
                "default": false
            },
            {
                "id": 121709921,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false
            },
            {
                "id": 717031390,
                "url": "https://api.github.com/repos/facebook/react/labels/good%20first%20issue",
                "name": "good first issue",
                "color": "6ce26a",
                "default": true
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 28,
        "created_at": "2017-07-01T00:58:07Z",
        "updated_at": "2018-05-02T19:20:56Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "The new validation in #10026 only issues a warn for the first difference found in a HTML hydration scenario. Ideally it should instead queue up all the differences and then at the end (commit) issue a single warning with a nicely formatted diff.\r\n\r\n1) Instead of warning add [these warn calls](https://github.com/facebook/react/blob/8d61138186e79e1e719786c8c76186e64b603bd5/src/renderers/dom/fiber/ReactDOMFiberComponent.js#L74-L115) to a global buffer (array, map, set, whatever).\r\n\r\n2) Inside [prepareForCommit](https://github.com/facebook/react/blob/8d61138186e79e1e719786c8c76186e64b603bd5/src/renderers/dom/fiber/ReactDOMFiberEntry.js#L190), issue all the currently batched up warnings as a single message. \r\n\r\n3) Format that message in terms of a JSX diff in a nicely formatted way. With only the relevant nodes (parent and child with changes). Irrelevant child content can be replaced with ellipsis. E.g.\r\n\r\n```\r\n...\r\n<div className=\"unchanged\">\r\n- <div className=\"foo\" />\r\n+ <div className=\"bar\">\u2026</div>\r\n+ <span />\r\n</div>\r\n...\r\n<div className=\"another_unchanged\">\r\n- <span />\r\n</div>\r\n...\r\n```\r\n\r\nThis strategy won't yield perfect results because if we're asynchronously hydrating, and it gets interrupted by another tree, we'll flush a warning before the actual hydrating particular tree is flushed. So we might show a partial diff in that case. This is probably. It's just a warning.",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/10109",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/10109/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/10109/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/10109/events",
        "html_url": "https://github.com/facebook/react/issues/10109",
        "id": 240614711,
        "number": 10109,
        "title": "Mouseenter event not triggered when cursor moves from disabled button",
        "user": {
            "login": "stepancar",
            "id": 2854910,
            "avatar_url": "https://avatars1.githubusercontent.com/u/2854910?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/stepancar",
            "html_url": "https://github.com/stepancar",
            "followers_url": "https://api.github.com/users/stepancar/followers",
            "following_url": "https://api.github.com/users/stepancar/following{/other_user}",
            "gists_url": "https://api.github.com/users/stepancar/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/stepancar/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/stepancar/subscriptions",
            "organizations_url": "https://api.github.com/users/stepancar/orgs",
            "repos_url": "https://api.github.com/users/stepancar/repos",
            "events_url": "https://api.github.com/users/stepancar/events{/privacy}",
            "received_events_url": "https://api.github.com/users/stepancar/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 40929151,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
                "name": "Type: Bug",
                "color": "b60205",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 9,
        "created_at": "2017-07-05T11:01:18Z",
        "updated_at": "2018-05-25T08:16:12Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "BUG.\r\n\r\nMouseenter event not triggered when cursor moves from disabled button\r\nsee [example](https://alfa-laboratory.github.io/arui-feather/styleguide/#playground/code=%3Cdiv%3E%0A%20%0A%20%20%20%20%3Cdiv%20className='row'%3E%0A%20%20%20%20%20%20%20%20Hover%20on%20%20right%20button%20and%20then%20move%20cursor%20to%20left%20button%0A%20%20%20%20%20%20%20%20%3Cdiv%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cbutton%20onMouseEnter=%7B()=%3E%7Balert('Hey!');%7D%7D%20%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20Not%20Disabled%0A%20%20%20%20%20%20%20%20%20%20%20%20%3C/button%3E%0A%20%20%20%20%20%20%20%20%3C/div%3E%0A%20%20%20%20%20%20%20%20%3Cdiv%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cbutton%20disabled=%7B%20true%20%7D%3EDisabled%3C/button%3E%0A%20%20%20%20%20%20%20%20%3C/div%3E%0A%20%20%20%20%3C/div%3E%0A%0A%20%20%20%20%3Cdiv%20className='row'%3E%0A%20%20%20%20%20%20%20%20Hover%20on%20%20right%20button%20and%20then%20move%20cursor%20to%20left%20button%0A%20%20%20%20%20%20%20%20%3Cdiv%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cbutton%20onMouseEnter=%7B()=%3E%7Balert('Hey!');%7D%7D%20%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20Not%20Disabled%0A%20%20%20%20%20%20%20%20%20%20%20%20%3C/button%3E%0A%20%20%20%20%20%20%20%20%3C/div%3E%0A%20%20%20%20%20%20%20%20%3Cdiv%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cbutton%3ENot%20Disabled%3C/button%3E%0A%20%20%20%20%20%20%20%20%3C/div%3E%0A%20%20%20%20%3C/div%3E%0A%20%0A%3C/div%3E)\r\n\r\n\r\n**What is the expected behavior?**\r\nShould trigger Mouseenter event\r\n\r\nReact 15.5.3\r\nLatest Chrome\r\nMacOs 10.12.5",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/10143",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/10143/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/10143/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/10143/events",
        "html_url": "https://github.com/facebook/react/issues/10143",
        "id": 242029054,
        "number": 10143,
        "title": "Remove unstable_renderIntoContainer",
        "user": {
            "login": "gaearon",
            "id": 810438,
            "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gaearon",
            "html_url": "https://github.com/gaearon",
            "followers_url": "https://api.github.com/users/gaearon/followers",
            "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
            "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
            "organizations_url": "https://api.github.com/users/gaearon/orgs",
            "repos_url": "https://api.github.com/users/gaearon/repos",
            "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gaearon/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 739761016,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Reconciler",
                "name": "Component: Reconciler",
                "color": "f9a798",
                "default": false
            },
            {
                "id": 710375792,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
                "name": "Type: Discussion",
                "color": "fef2c0",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 15,
        "created_at": "2017-07-11T12:25:32Z",
        "updated_at": "2018-04-30T10:06:35Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "My hunch is we want to remove it before 16 because `unstable_createPortal` accomplishes the same thing. I remember `unstable_renderIntoContainer` adding a bunch of complexity that would be nice to get rid of before committing to support it for another release cycle.",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/10188",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/10188/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/10188/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/10188/events",
        "html_url": "https://github.com/facebook/react/issues/10188",
        "id": 243145870,
        "number": 10188,
        "title": "Make Uses of ReactDebugCurrentFrame.getCurrentStack Reentrant",
        "user": {
            "login": "sebmarkbage",
            "id": 63648,
            "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sebmarkbage",
            "html_url": "https://github.com/sebmarkbage",
            "followers_url": "https://api.github.com/users/sebmarkbage/followers",
            "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
            "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
            "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
            "repos_url": "https://api.github.com/users/sebmarkbage/repos",
            "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 139653724,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Core%20Utilities",
                "name": "Component: Core Utilities",
                "color": "c5def5",
                "default": false
            },
            {
                "id": 40929153,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement",
                "name": "Type: Enhancement",
                "color": "84b6eb",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2017-07-15T01:52:38Z",
        "updated_at": "2017-10-04T20:10:38Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "I realized that the refactor to use ReactDebugCurrentFrame as a decoupled stack frame for error messages is not reentrant: https://github.com/facebook/react/pull/10105/files#r127573520\r\n\r\nFiber is not reentrant but other renderers might be. The synchronous server renderer is atm.\r\n\r\nWe should add tests for warnings between renderers, such as calling a server-render from within a client render, and update the set/reset callsites to use push/pop instead to account for that.\r\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/10217",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/10217/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/10217/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/10217/events",
        "html_url": "https://github.com/facebook/react/issues/10217",
        "id": 243939126,
        "number": 10217,
        "title": "Incorrect data in compositionend event when typing Korean on IE11",
        "user": {
            "login": "robbertbrak",
            "id": 734581,
            "avatar_url": "https://avatars3.githubusercontent.com/u/734581?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/robbertbrak",
            "html_url": "https://github.com/robbertbrak",
            "followers_url": "https://api.github.com/users/robbertbrak/followers",
            "following_url": "https://api.github.com/users/robbertbrak/following{/other_user}",
            "gists_url": "https://api.github.com/users/robbertbrak/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/robbertbrak/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/robbertbrak/subscriptions",
            "organizations_url": "https://api.github.com/users/robbertbrak/orgs",
            "repos_url": "https://api.github.com/users/robbertbrak/repos",
            "events_url": "https://api.github.com/users/robbertbrak/events{/privacy}",
            "received_events_url": "https://api.github.com/users/robbertbrak/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 40929151,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
                "name": "Type: Bug",
                "color": "b60205",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": {
            "login": "flarnie",
            "id": 1114467,
            "avatar_url": "https://avatars2.githubusercontent.com/u/1114467?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/flarnie",
            "html_url": "https://github.com/flarnie",
            "followers_url": "https://api.github.com/users/flarnie/followers",
            "following_url": "https://api.github.com/users/flarnie/following{/other_user}",
            "gists_url": "https://api.github.com/users/flarnie/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/flarnie/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/flarnie/subscriptions",
            "organizations_url": "https://api.github.com/users/flarnie/orgs",
            "repos_url": "https://api.github.com/users/flarnie/repos",
            "events_url": "https://api.github.com/users/flarnie/events{/privacy}",
            "received_events_url": "https://api.github.com/users/flarnie/received_events",
            "type": "User",
            "site_admin": false
        },
        "assignees": [
            {
                "login": "flarnie",
                "id": 1114467,
                "avatar_url": "https://avatars2.githubusercontent.com/u/1114467?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/flarnie",
                "html_url": "https://github.com/flarnie",
                "followers_url": "https://api.github.com/users/flarnie/followers",
                "following_url": "https://api.github.com/users/flarnie/following{/other_user}",
                "gists_url": "https://api.github.com/users/flarnie/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/flarnie/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/flarnie/subscriptions",
                "organizations_url": "https://api.github.com/users/flarnie/orgs",
                "repos_url": "https://api.github.com/users/flarnie/repos",
                "events_url": "https://api.github.com/users/flarnie/events{/privacy}",
                "received_events_url": "https://api.github.com/users/flarnie/received_events",
                "type": "User",
                "site_admin": false
            }
        ],
        "milestone": null,
        "comments": 17,
        "created_at": "2017-07-19T06:50:46Z",
        "updated_at": "2017-09-24T00:37:21Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "To reproduce:\r\n* In IE11 (on Win7 or Win10) go to https://jsfiddle.net/robbertbrak/84v837e9/164/\r\n* Open the Developer console.\r\n* Switch to the Microsoft Korean IME (standard settings) and switch to Korean input.\r\n* Put the cursor in the contenteditable div and type `\uc5ec\ub984.` (on a QWERTY keyboard this is typed as `dufma.`).\r\n* Do the same for the input field.\r\nResult: in the developer console a list of composition events and the contents of the data attribute is logged. However, the data of the first `compositionend` event is wrong. It should be \uc5ec, not \uc5ec\ub974. See screenshot below.\r\n\r\n![selection_329](https://user-images.githubusercontent.com/734581/28353791-8c8a1454-6c5d-11e7-9b5f-b98c1a72927f.png)\r\n\r\nYou can see that this is wrong by trying out the same thing on https://dvcs.w3.org/hg/d4e/raw-file/tip/key-event-test.html. As seen in the screenshot below, a plain (non-React) input field emits a `compositionend` event with the proper data.\r\n\r\n![korean-11 413 15063 0](https://user-images.githubusercontent.com/734581/28353853-ccd18628-6c5d-11e7-85e2-9a1cf1a42f40.png)\r\n\r\nThis occurs with the latest version of React, but I have also seen this behaviour in older versions. An example of where this causes problems is in Draft JS.",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/10338",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/10338/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/10338/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/10338/events",
        "html_url": "https://github.com/facebook/react/issues/10338",
        "id": 246970317,
        "number": 10338,
        "title": "More permissive rehydration logic",
        "user": {
            "login": "geelen",
            "id": 23264,
            "avatar_url": "https://avatars3.githubusercontent.com/u/23264?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/geelen",
            "html_url": "https://github.com/geelen",
            "followers_url": "https://api.github.com/users/geelen/followers",
            "following_url": "https://api.github.com/users/geelen/following{/other_user}",
            "gists_url": "https://api.github.com/users/geelen/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/geelen/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/geelen/subscriptions",
            "organizations_url": "https://api.github.com/users/geelen/orgs",
            "repos_url": "https://api.github.com/users/geelen/repos",
            "events_url": "https://api.github.com/users/geelen/events{/privacy}",
            "received_events_url": "https://api.github.com/users/geelen/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 710332294,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Server%20Rendering",
                "name": "Component: Server Rendering",
                "color": "d4c5f9",
                "default": false
            },
            {
                "id": 121709921,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 3,
        "created_at": "2017-08-01T06:44:46Z",
        "updated_at": "2017-10-04T20:20:44Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "So for the last little while I've been pursuing an idea called [React Snapshot](https://github.com/geelen/react-snapshot), where instead of running your code in a Node environment to generate static HTML, you run it in a virtual browser (jsdom or chrome headless) and take a snapshot of the DOM at a particularly moment in time, then host the snapshots like any other static file (technique also known as pre-rendering).\r\n\r\nI've been tossing around different API choices (https://github.com/geelen/react-snapshot/pull/30) in order to handle components that have async data fetching requirements, but I'm already starting to see real promise in this approach. Because the snapshot environment is so similar to the client one, far fewer changes are needed to get the performance & accessibility benefits of serving real HTML to your users. This is an example of the React Snapshot async API to make a component snapshottable:\r\n\r\n```diff\r\n+ import { snapshot } from 'react-snapshot'\r\n\r\nclass Home extends React.Component {\r\n  state = { quotes: null }\r\n\r\n  componentWillMount() {\r\n+   snapshot(() => (\r\n      fetch('/api/quotes')\r\n        .then(response => response.json())\r\n+   ))\r\n    .then(quotes => {\r\n      this.setState({ quotes })\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const { quotes } = this.state\r\n    return (\r\n      <div className=\"Quotes\">\r\n        {\r\n          quotes && quotes.map((quote, i) => <Quote key={i} quote={quote}/>)\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n```\r\n\r\nThe idea is that any async parts of your app can be wrapped in a `snapshot` call, which caches responses and rehydrates on the client. However, I've hit a few walls that I think means I'd need changes to React itself to take this to its logical conclusion. Hence, I wanted to start the discussion about whether such changes would be compatible with React's future direction.\r\n\r\n### Rehydration\r\n\r\nAs far as I can tell from my experimentation and from reading the code, the two criteria for reusing the existing DOM elements in a pre-rendered HTML page is:\r\n\r\n* the adler32 hash of the initial client-rendered markup has to match the `data-react-checksum` present on the `rootElement`.\r\n* the `_domID` of each instance in the render tree needs to match the `data-react-id` on each DOM element\r\n\r\nBetween those two criteria, its enforced that the _structure_ and the _content_ of the DOM is the same. I can kinda see why both are needed\u2014the checksum is the cheapest way to confirm the structure will be the same, but the ID of each element is needed to actually wire everything up. Also, `data-react-checksum` is just an attribute, and could be calculated off something that's no longer present in the HTML.\r\n\r\nHowever, generating the exact right checksum in any other way than the existing SSR API turns out to be pretty difficult!\r\n\r\n### HTML-escaping woes\r\n\r\nI hit this problem where I was rendering the React app like normal, then taking the `innerHTML` of the root container, then passing it to [`addChecksumToMarkup`](https://github.com/facebook/react/blob/master/src/renderers/dom/stack/server/ReactMarkupChecksum.js#L26), and not getting the same checksum as `ReactDOMServer.renderToString`. I first realised I needed to add the `data-reactid` to each element along the way, which wasn't too hard, but still it wasn't working. I figured out it's due to [`escapeTextContentForBrowser`](https://github.com/facebook/react/blob/master/src/renderers/dom/shared/escapeTextContentForBrowser.js) converting things like `'` to `&#x27;` and `\"` to `&quot;`, meaning that while the content _appears_ the same once rendered, the precise string is not, therefore the checksum is not, and no rehydration takes place.\r\n\r\nFrom what I can understand, again by reading the code, React _always_ sanitises the HTML content before generating markup (on server or in client), it's just the fact that once its injected into the DOM, `innerHTML` doesn't re-sanitise things like quotes. They don't technically need to be, as discussed in issue https://github.com/facebook/react/issues/3879, and so if that were to be changed this particular problem would disappear, but there may well be more I just haven't hit yet. To me, the real issue is needing to have the content be byte-for-byte equivalent, rather than just functionally (and structurally) equivalent.\r\n\r\n### My interim solution\r\n\r\nAt the moment, I've realised its easier to boot up the app in its entirety, wait for all async processes to take place, then effectively reboot the app using `ReactDOMServer.renderToString` and splice the markup in place. Any side-effects relying on `componentDidMount` (like CSS injection or meta tags in the HEAD) that affect the DOM _outside_ the React app are preserved, but the markup and checksum of the React-rendered HTML are guaranteed to be correct. It works, but its not ideal. You still have to understand that your components are running in two different \"modes\", they'll run different lifecycle methods in each, and only one generates the final snapshot. Which I think adds an unreasonable conceptual burden, much the same way server-rendering does.\r\n\r\nThat's really the problem I see with the status quo and why I started looking into this problem in the first place. If snapshot/server rendering requires too much overhead, most people won't do it, which is exactly where we're at. Create-react-app doesn't include any because none of the options are simple enough with a broad enough applicability. The official [React Router docs](https://reacttraining.com/react-router/web/guides/code-splitting/code-splitting-server-rendering) warn agains combining server-rendering and code-splitting. Server-rendering boilerplates include fairly specific webpack hacks to provide the same environment on server and client, etc.\r\n\r\nThe result is that most people only ever do client-rendering. They serve a blank page & render everything client-side. Code splitting and service worker caching offer useful advantages but imo it's not enough. Snapshot rendering _could_ be the solution, but only if it can offer big benefits for small changes to application code.\r\n\r\n### My Dream Solution\r\n\r\nArchitecturally, what I'd like is for an arbitrary React app to be launched on one browser, executed until ready (async resources complete), snapshotted (serialised to HTML), then resumed on another browser. Those snapshots would be generated then cached at the edge of a CDN during deployment, or periodically depending on how often the content changes.\r\n\r\nPractically, I think that would require two changes to React's architecture:\r\n\r\nThe first is for a weaker check for rehydration\u2014some other fingerprint than a hash of the escaped HTML. Some other method for a snapshot to indicate to React to reuse as much of the existing DOM as possible.\r\n\r\nThe second would be for only parts of the tree to be rehydrated rather than the whole thing. If a component has some side-effect, say in a `componentDidMount`, then the snapshotted HTML would include the result of that side-effect. But when the app boots on the client side, the render method will generate the initial behaviour. At the moment React would replace what's there with what's just been rendered, but it might be preferable to leave the DOM unchanged on the first render, then wire things up later.\r\n\r\nI don't know the exact specifics of a solution, nor do I know enough of the internals of React as it is now or as it will become, but I wanted to start the discussion and see if there was any interest from the React team & wider community in this use case and direction. I look forward to hearing your thoughts!",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/10366",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/10366/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/10366/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/10366/events",
        "html_url": "https://github.com/facebook/react/issues/10366",
        "id": 247589982,
        "number": 10366,
        "title": "Async Top-level Hook Before Commit",
        "user": {
            "login": "sebmarkbage",
            "id": 63648,
            "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sebmarkbage",
            "html_url": "https://github.com/sebmarkbage",
            "followers_url": "https://api.github.com/users/sebmarkbage/followers",
            "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
            "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
            "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
            "repos_url": "https://api.github.com/users/sebmarkbage/repos",
            "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 739761016,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Reconciler",
                "name": "Component: Reconciler",
                "color": "f9a798",
                "default": false
            },
            {
                "id": 121709921,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": {
            "login": "acdlite",
            "id": 3624098,
            "avatar_url": "https://avatars0.githubusercontent.com/u/3624098?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/acdlite",
            "html_url": "https://github.com/acdlite",
            "followers_url": "https://api.github.com/users/acdlite/followers",
            "following_url": "https://api.github.com/users/acdlite/following{/other_user}",
            "gists_url": "https://api.github.com/users/acdlite/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/acdlite/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/acdlite/subscriptions",
            "organizations_url": "https://api.github.com/users/acdlite/orgs",
            "repos_url": "https://api.github.com/users/acdlite/repos",
            "events_url": "https://api.github.com/users/acdlite/events{/privacy}",
            "received_events_url": "https://api.github.com/users/acdlite/received_events",
            "type": "User",
            "site_admin": false
        },
        "assignees": [
            {
                "login": "acdlite",
                "id": 3624098,
                "avatar_url": "https://avatars0.githubusercontent.com/u/3624098?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/acdlite",
                "html_url": "https://github.com/acdlite",
                "followers_url": "https://api.github.com/users/acdlite/followers",
                "following_url": "https://api.github.com/users/acdlite/following{/other_user}",
                "gists_url": "https://api.github.com/users/acdlite/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/acdlite/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/acdlite/subscriptions",
                "organizations_url": "https://api.github.com/users/acdlite/orgs",
                "repos_url": "https://api.github.com/users/acdlite/repos",
                "events_url": "https://api.github.com/users/acdlite/events{/privacy}",
                "received_events_url": "https://api.github.com/users/acdlite/received_events",
                "type": "User",
                "site_admin": false
            }
        ],
        "milestone": null,
        "comments": 5,
        "created_at": "2017-08-03T04:36:26Z",
        "updated_at": "2017-11-03T15:19:10Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "_(This isn't needed for 16.0.)_\r\n\r\nI think we're missing a top-level API. If you want to integrate with non-React code around you in an async way, then you probably have some parents around you. It's not always the case that you want to show those parents before React is done. Maybe you can hide them and then show them at the callback time.\r\n\r\nHowever, it would be better if you could start building the tree async with React, and then get a callback *before* we trigger life-cycles so that you can insert the tree into the actual DOM and do whatever manipulation you need. Only after that do we trigger the life-cycles. That way they will have the CSS and layout information available to them by virtue of being in the document already.\r\n\r\nI see two possible routes:\r\n\r\na) We just call out for this hook and then commit immediately after.\r\n\r\nb) We invoke a callback and pass another function. That function, when invoked, does the actual commit. This approach has precedence in the DOM with \"append async\" and offscreen canvas.\r\n\r\nThe second option is probably preferable but we should only do that if we can do it efficiently and cleanly.",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/10380",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/10380/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/10380/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/10380/events",
        "html_url": "https://github.com/facebook/react/issues/10380",
        "id": 247991028,
        "number": 10380,
        "title": "Dispatch blur event on siblings",
        "user": {
            "login": "max-cross",
            "id": 6826905,
            "avatar_url": "https://avatars2.githubusercontent.com/u/6826905?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/max-cross",
            "html_url": "https://github.com/max-cross",
            "followers_url": "https://api.github.com/users/max-cross/followers",
            "following_url": "https://api.github.com/users/max-cross/following{/other_user}",
            "gists_url": "https://api.github.com/users/max-cross/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/max-cross/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/max-cross/subscriptions",
            "organizations_url": "https://api.github.com/users/max-cross/orgs",
            "repos_url": "https://api.github.com/users/max-cross/repos",
            "events_url": "https://api.github.com/users/max-cross/events{/privacy}",
            "received_events_url": "https://api.github.com/users/max-cross/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 40929155,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Question",
                "name": "Type: Question",
                "color": "cc317c",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 6,
        "created_at": "2017-08-04T12:25:45Z",
        "updated_at": "2017-10-04T20:27:13Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "There are two elements on the same level and they are both have onBlur handler. When one element loses focus, in his callback I try to dispatch blur event for the second element and I have \"Maximum call stack size exceeded\" error in console. \r\n\r\nTry example in JSFiddle. Click on second element and press \"tab\" button to lose focus.\r\n\r\nExample link: https://jsfiddle.net/0Lhqrjbq/2/\r\n\r\nVersion: 15.5.4",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/10382",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/10382/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/10382/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/10382/events",
        "html_url": "https://github.com/facebook/react/issues/10382",
        "id": 248003365,
        "number": 10382,
        "title": "Too much unnecessary updates when a child element is moved to the front",
        "user": {
            "login": "yelouafi",
            "id": 5453835,
            "avatar_url": "https://avatars2.githubusercontent.com/u/5453835?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/yelouafi",
            "html_url": "https://github.com/yelouafi",
            "followers_url": "https://api.github.com/users/yelouafi/followers",
            "following_url": "https://api.github.com/users/yelouafi/following{/other_user}",
            "gists_url": "https://api.github.com/users/yelouafi/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/yelouafi/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/yelouafi/subscriptions",
            "organizations_url": "https://api.github.com/users/yelouafi/orgs",
            "repos_url": "https://api.github.com/users/yelouafi/repos",
            "events_url": "https://api.github.com/users/yelouafi/events{/privacy}",
            "received_events_url": "https://api.github.com/users/yelouafi/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 739761016,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Reconciler",
                "name": "Component: Reconciler",
                "color": "f9a798",
                "default": false
            },
            {
                "id": 710375792,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
                "name": "Type: Discussion",
                "color": "fef2c0",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 7,
        "created_at": "2017-08-04T13:18:50Z",
        "updated_at": "2018-03-01T13:28:14Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nNot sure if it's a bug or an 'accepted' behavior. But this can affect performance in some situations or even 'break the expectations' in others (e.g. animating moved elements [i.e. simple moves]) \r\n\r\n**What is the current behavior?**\r\n\r\nWhen a child element moves from the end of the list to the front  React actually moves all the other elements after the moved/last element instead of simply inserting the moved element at the front of the list.\r\n\r\nThis also can be stated more generally for an element or a block of elements moving backward with a significant shift.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template: https://jsfiddle.net/84v837e9/).**\r\n\r\nHere is a [demo](https://codesandbox.io/s/wjZkrGVzJ) that shows the DOM operations performed on DOM nodes (moves & insertions) during reconciliation. To reproduce the issue\r\n\r\n- type '0123456789x' in the input field then click `Patch!`\r\n\r\n- now type 'x0123456789' (move the last 'x' to the front) then click `Patch!` again\r\n\r\nHere's the output\r\n\r\n![image](https://user-images.githubusercontent.com/5453835/28969007-affc2dae-791a-11e7-951a-37856bc53f00.png)\r\n\r\nInstead of moving the 'x' to the front. React actually moves all the other elements after the 'x'\r\n\r\n*Note: the demo uses MutationObserver api to find out the operations. But you can also verify this behavior directly by commenting out the code that activates the dom observer (in componentDidMount) and watch the dom operations manually in the devtools element inspector*\r\n\r\n**What is the expected behavior?**\r\n\r\nReact should perform the minimal number of operations. I know that the 'minimum' will vary for each situation and not trivial to infer for the general case. But for some common cases like this one it should be feasible.\r\n\r\nFor info this use case is handled in most of the other virtual dom libs like preact, snabbdom. Inferno is a remarkable case as it will always infer the minimum number of operations (it uses an algorithm to find the [longest increasing subsequence](https://en.wikipedia.org/wiki/Longest_increasing_subsequence) on an array containing the indexes of the old elements).\r\n\r\nI found this behavior while working on a demo to find out how vdom libs rearrange nodes during children reconciliation. For example here is the same output for other libs ([demo](https://codesandbox.io/s/BkLpXYQn))\r\n\r\n![image](https://user-images.githubusercontent.com/5453835/28969902-567219c0-791e-11e7-9f3d-29bf988cdab1.png)\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nThe demo uses the 0.16 version. But I tried with 0.15 and it has the same behavior",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/10389",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/10389/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/10389/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/10389/events",
        "html_url": "https://github.com/facebook/react/issues/10389",
        "id": 248114062,
        "number": 10389,
        "title": "<video /> attribute needed but not guaranteed by React",
        "user": {
            "login": "elrumordelaluz",
            "id": 784056,
            "avatar_url": "https://avatars3.githubusercontent.com/u/784056?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/elrumordelaluz",
            "html_url": "https://github.com/elrumordelaluz",
            "followers_url": "https://api.github.com/users/elrumordelaluz/followers",
            "following_url": "https://api.github.com/users/elrumordelaluz/following{/other_user}",
            "gists_url": "https://api.github.com/users/elrumordelaluz/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/elrumordelaluz/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/elrumordelaluz/subscriptions",
            "organizations_url": "https://api.github.com/users/elrumordelaluz/orgs",
            "repos_url": "https://api.github.com/users/elrumordelaluz/repos",
            "events_url": "https://api.github.com/users/elrumordelaluz/events{/privacy}",
            "received_events_url": "https://api.github.com/users/elrumordelaluz/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 332720629,
                "url": "https://api.github.com/repos/facebook/react/labels/HTML",
                "name": "HTML",
                "color": "f7c6c7",
                "default": false
            },
            {
                "id": 121709921,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": {
            "login": "aweary",
            "id": 6886061,
            "avatar_url": "https://avatars2.githubusercontent.com/u/6886061?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/aweary",
            "html_url": "https://github.com/aweary",
            "followers_url": "https://api.github.com/users/aweary/followers",
            "following_url": "https://api.github.com/users/aweary/following{/other_user}",
            "gists_url": "https://api.github.com/users/aweary/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/aweary/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/aweary/subscriptions",
            "organizations_url": "https://api.github.com/users/aweary/orgs",
            "repos_url": "https://api.github.com/users/aweary/repos",
            "events_url": "https://api.github.com/users/aweary/events{/privacy}",
            "received_events_url": "https://api.github.com/users/aweary/received_events",
            "type": "User",
            "site_admin": false
        },
        "assignees": [
            {
                "login": "aweary",
                "id": 6886061,
                "avatar_url": "https://avatars2.githubusercontent.com/u/6886061?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/aweary",
                "html_url": "https://github.com/aweary",
                "followers_url": "https://api.github.com/users/aweary/followers",
                "following_url": "https://api.github.com/users/aweary/following{/other_user}",
                "gists_url": "https://api.github.com/users/aweary/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/aweary/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aweary/subscriptions",
                "organizations_url": "https://api.github.com/users/aweary/orgs",
                "repos_url": "https://api.github.com/users/aweary/repos",
                "events_url": "https://api.github.com/users/aweary/events{/privacy}",
                "received_events_url": "https://api.github.com/users/aweary/received_events",
                "type": "User",
                "site_admin": false
            }
        ],
        "milestone": null,
        "comments": 14,
        "created_at": "2017-08-04T20:50:39Z",
        "updated_at": "2018-04-04T18:20:24Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "As @gaearon [mentioned](https://twitter.com/dan_abramov/status/893511715463340033), React does not guarantee an *attribute* will be set, so probably this is not a bug.\r\n\r\nIf I understand well, react will ensure the property is set anyway. \r\n\r\n**Current behaviour**\r\nReact renders the html `<video />` element without the attribute `muted` when explicitly passed.\r\n\r\n**Demo time**\r\nIn [this pen](https://codepen.io/elrumordelaluz/pen/ba4b5294cec7ea455c66e9b9d0a6c889?editors=0010) I made a simple example setting `muted` to the element and obtaining the result below:\r\n![pen-screen-shot](https://user-images.githubusercontent.com/784056/28986491-7b2dd45e-7967-11e7-9f63-b4db88db9989.png)\r\n\r\nActually the property is set well, since the [original medial file](http://clips.vorwaerts-gmbh.de/VfE_html5.mp4) has an audio track and in the pen result is muted.\r\n\r\n**The point**\r\nI think is most a _specific need_ than the _expected behaviour_.\r\nFrom the functionality POV, it is absolutely ok, my _Component_ renders a `<video />` muted as requested and so on.\r\n\r\nBut there are _browsers_ and _policies_, more specifically related to this issue, Webkit and the [New <video> Policies for iOS](https://webkit.org/blog/6784/new-video-policies-for-ios/) updated one year ago, with some interesting changes for the `<video />` element.\r\nThe part interested is\r\n> `<video muted>` elements will also be allowed to autoplay without a user gesture.\r\n\r\nSo, the _specific need_ is to have the _explicit_ `attribute` to tell the browser that this video could be `autoPlay`ed.\r\n\r\nThere's a similar [issue](https://github.com/facebook/react/issues/6544)",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/10390",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/10390/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/10390/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/10390/events",
        "html_url": "https://github.com/facebook/react/issues/10390",
        "id": 248137551,
        "number": 10390,
        "title": "react-test-renderer and shallow API mismatch",
        "user": {
            "login": "statianzo",
            "id": 57737,
            "avatar_url": "https://avatars0.githubusercontent.com/u/57737?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/statianzo",
            "html_url": "https://github.com/statianzo",
            "followers_url": "https://api.github.com/users/statianzo/followers",
            "following_url": "https://api.github.com/users/statianzo/following{/other_user}",
            "gists_url": "https://api.github.com/users/statianzo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/statianzo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/statianzo/subscriptions",
            "organizations_url": "https://api.github.com/users/statianzo/orgs",
            "repos_url": "https://api.github.com/users/statianzo/repos",
            "events_url": "https://api.github.com/users/statianzo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/statianzo/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 204945357,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Shallow%20Renderer",
                "name": "Component: Shallow Renderer",
                "color": "eb6420",
                "default": false
            },
            {
                "id": 710400704,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Test%20Renderer",
                "name": "Component: Test Renderer",
                "color": "006b75",
                "default": false
            },
            {
                "id": 710375792,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
                "name": "Type: Discussion",
                "color": "fef2c0",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2017-08-04T23:13:20Z",
        "updated_at": "2017-10-04T20:31:02Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nFeature\r\n\r\nCurrently, `react-test-renderer` and `react-test-renderer/shallow` have different APIs. Is there a reason for this? It would be helpful switching between them if shallow supported `create`. I can put together a PR for it if there's interest.\r\n\r\n## react-test-renderer\r\n\r\n```javascript\r\nimport TestRenderer from 'react-test-renderer';\r\n\r\nit('renders', () => {\r\n  const result = TestRenderer.create(<MyComponent />);\r\n  expect(result).toMatchSnapshot();\r\n});\r\n```\r\n\r\n## shallow\r\n\r\n```javascript\r\nimport ShallowRenderer from 'react-test-renderer/shallow';\r\n\r\nit('renders', () => {\r\n  const renderer = new ShallowRenderer()\r\n  const result = renderer.render(<MyComponent />);\r\n  expect(result).toMatchSnapshot();\r\n});\r\n```",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/10401",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/10401/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/10401/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/10401/events",
        "html_url": "https://github.com/facebook/react/issues/10401",
        "id": 248504337,
        "number": 10401,
        "title": "Add tests for <select multiple> => <select> transition",
        "user": {
            "login": "gaearon",
            "id": 810438,
            "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gaearon",
            "html_url": "https://github.com/gaearon",
            "followers_url": "https://api.github.com/users/gaearon/followers",
            "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
            "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
            "organizations_url": "https://api.github.com/users/gaearon/orgs",
            "repos_url": "https://api.github.com/users/gaearon/repos",
            "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gaearon/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 40929153,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement",
                "name": "Type: Enhancement",
                "color": "84b6eb",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": {
            "login": "jquense",
            "id": 339286,
            "avatar_url": "https://avatars2.githubusercontent.com/u/339286?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jquense",
            "html_url": "https://github.com/jquense",
            "followers_url": "https://api.github.com/users/jquense/followers",
            "following_url": "https://api.github.com/users/jquense/following{/other_user}",
            "gists_url": "https://api.github.com/users/jquense/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jquense/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jquense/subscriptions",
            "organizations_url": "https://api.github.com/users/jquense/orgs",
            "repos_url": "https://api.github.com/users/jquense/repos",
            "events_url": "https://api.github.com/users/jquense/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jquense/received_events",
            "type": "User",
            "site_admin": false
        },
        "assignees": [
            {
                "login": "jquense",
                "id": 339286,
                "avatar_url": "https://avatars2.githubusercontent.com/u/339286?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/jquense",
                "html_url": "https://github.com/jquense",
                "followers_url": "https://api.github.com/users/jquense/followers",
                "following_url": "https://api.github.com/users/jquense/following{/other_user}",
                "gists_url": "https://api.github.com/users/jquense/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/jquense/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jquense/subscriptions",
                "organizations_url": "https://api.github.com/users/jquense/orgs",
                "repos_url": "https://api.github.com/users/jquense/repos",
                "events_url": "https://api.github.com/users/jquense/events{/privacy}",
                "received_events_url": "https://api.github.com/users/jquense/received_events",
                "type": "User",
                "site_admin": false
            },
            {
                "login": "nhunzaker",
                "id": 590904,
                "avatar_url": "https://avatars3.githubusercontent.com/u/590904?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/nhunzaker",
                "html_url": "https://github.com/nhunzaker",
                "followers_url": "https://api.github.com/users/nhunzaker/followers",
                "following_url": "https://api.github.com/users/nhunzaker/following{/other_user}",
                "gists_url": "https://api.github.com/users/nhunzaker/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/nhunzaker/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nhunzaker/subscriptions",
                "organizations_url": "https://api.github.com/users/nhunzaker/orgs",
                "repos_url": "https://api.github.com/users/nhunzaker/repos",
                "events_url": "https://api.github.com/users/nhunzaker/events{/privacy}",
                "received_events_url": "https://api.github.com/users/nhunzaker/received_events",
                "type": "User",
                "site_admin": false
            },
            {
                "login": "aweary",
                "id": 6886061,
                "avatar_url": "https://avatars2.githubusercontent.com/u/6886061?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/aweary",
                "html_url": "https://github.com/aweary",
                "followers_url": "https://api.github.com/users/aweary/followers",
                "following_url": "https://api.github.com/users/aweary/following{/other_user}",
                "gists_url": "https://api.github.com/users/aweary/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/aweary/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aweary/subscriptions",
                "organizations_url": "https://api.github.com/users/aweary/orgs",
                "repos_url": "https://api.github.com/users/aweary/repos",
                "events_url": "https://api.github.com/users/aweary/events{/privacy}",
                "received_events_url": "https://api.github.com/users/aweary/received_events",
                "type": "User",
                "site_admin": false
            }
        ],
        "milestone": null,
        "comments": 0,
        "created_at": "2017-08-07T19:13:54Z",
        "updated_at": "2017-10-04T20:33:19Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "I deleted it in https://github.com/facebook/react/pull/10281 because it wasn\u2019t testing the public API, and it was hard to say if it tested the path the code actually took.\r\n\r\nWe should either add a similar test against public API or an equivalent test to manual fixtures.\r\nSee https://github.com/facebook/react/pull/10281#issuecomment-320471544 for details.",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/10441",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/10441/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/10441/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/10441/events",
        "html_url": "https://github.com/facebook/react/issues/10441",
        "id": 249669043,
        "number": 10441,
        "title": "Cross-origin error passed to componentDidCatch incorrectly",
        "user": {
            "login": "bvaughn",
            "id": 29597,
            "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bvaughn",
            "html_url": "https://github.com/bvaughn",
            "followers_url": "https://api.github.com/users/bvaughn/followers",
            "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
            "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
            "organizations_url": "https://api.github.com/users/bvaughn/orgs",
            "repos_url": "https://api.github.com/users/bvaughn/repos",
            "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bvaughn/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 710722093,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
                "name": "Type: Needs Investigation",
                "color": "fbca04",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": {
            "login": "bvaughn",
            "id": 29597,
            "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bvaughn",
            "html_url": "https://github.com/bvaughn",
            "followers_url": "https://api.github.com/users/bvaughn/followers",
            "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
            "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
            "organizations_url": "https://api.github.com/users/bvaughn/orgs",
            "repos_url": "https://api.github.com/users/bvaughn/repos",
            "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bvaughn/received_events",
            "type": "User",
            "site_admin": false
        },
        "assignees": [
            {
                "login": "bvaughn",
                "id": 29597,
                "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/bvaughn",
                "html_url": "https://github.com/bvaughn",
                "followers_url": "https://api.github.com/users/bvaughn/followers",
                "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
                "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
                "organizations_url": "https://api.github.com/users/bvaughn/orgs",
                "repos_url": "https://api.github.com/users/bvaughn/repos",
                "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
                "received_events_url": "https://api.github.com/users/bvaughn/received_events",
                "type": "User",
                "site_admin": false
            }
        ],
        "milestone": null,
        "comments": 53,
        "created_at": "2017-08-11T15:25:18Z",
        "updated_at": "2018-05-11T09:00:18Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "body": "tl;dr React is passing \"A cross-origin error was thrown\" to `componentDidCatch` when there are no cross-origin scripts.\r\n\r\nSee [this discussion thread](https://github.com/facebook/react/pull/10353#issuecomment-321528685) and [this repro case](https://github.com/tessin/tessin-mini).\r\n\r\nI was able to confirm the behavior. A quick look at `onError` showed a null `event.error`.",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/10468",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/10468/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/10468/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/10468/events",
        "html_url": "https://github.com/facebook/react/issues/10468",
        "id": 250607684,
        "number": 10468,
        "title": "DOM Fixture Form Coverage: Restored State and Auto-fill",
        "user": {
            "login": "nhunzaker",
            "id": 590904,
            "avatar_url": "https://avatars3.githubusercontent.com/u/590904?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nhunzaker",
            "html_url": "https://github.com/nhunzaker",
            "followers_url": "https://api.github.com/users/nhunzaker/followers",
            "following_url": "https://api.github.com/users/nhunzaker/following{/other_user}",
            "gists_url": "https://api.github.com/users/nhunzaker/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nhunzaker/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nhunzaker/subscriptions",
            "organizations_url": "https://api.github.com/users/nhunzaker/orgs",
            "repos_url": "https://api.github.com/users/nhunzaker/repos",
            "events_url": "https://api.github.com/users/nhunzaker/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nhunzaker/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 71502270,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Build%20Infrastructure",
                "name": "Component: Build Infrastructure",
                "color": "f9d0c4",
                "default": false
            },
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 725156255,
                "url": "https://api.github.com/repos/facebook/react/labels/good%20first%20issue%20(taken)",
                "name": "good first issue (taken)",
                "color": "b60205",
                "default": false
            },
            {
                "id": 877481224,
                "url": "https://api.github.com/repos/facebook/react/labels/mentorship",
                "name": "mentorship",
                "color": "3B5998",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 5,
        "created_at": "2017-08-16T12:21:43Z",
        "updated_at": "2018-05-04T03:02:32Z",
        "closed_at": null,
        "author_association": "COLLABORATOR",
        "body": "Follow up from https://github.com/facebook/react/pull/10456. Presently, we don't have a manual fixture that ensures that form state is captured when the browser provides input on behalf of the user.\r\n\r\n- [ ] Restored form state\r\n- [ ] Autocomplete state\r\n\r\n**Other notes**\r\n\r\nAs a reference point, I'd like to find some documentation around how restored state works. I think I might be using the wrong search terms. Does anyone have a link handy?",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/10474",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/10474/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/10474/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/10474/events",
        "html_url": "https://github.com/facebook/react/issues/10474",
        "id": 250734072,
        "number": 10474,
        "title": "The fake event trick for rethrowing errors in DEV fires unexpected global error handlers and makes testing harder",
        "user": {
            "login": "brandonbloom",
            "id": 119164,
            "avatar_url": "https://avatars0.githubusercontent.com/u/119164?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/brandonbloom",
            "html_url": "https://github.com/brandonbloom",
            "followers_url": "https://api.github.com/users/brandonbloom/followers",
            "following_url": "https://api.github.com/users/brandonbloom/following{/other_user}",
            "gists_url": "https://api.github.com/users/brandonbloom/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/brandonbloom/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/brandonbloom/subscriptions",
            "organizations_url": "https://api.github.com/users/brandonbloom/orgs",
            "repos_url": "https://api.github.com/users/brandonbloom/repos",
            "events_url": "https://api.github.com/users/brandonbloom/events{/privacy}",
            "received_events_url": "https://api.github.com/users/brandonbloom/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 710375792,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
                "name": "Type: Discussion",
                "color": "fef2c0",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 40,
        "created_at": "2017-08-16T19:28:44Z",
        "updated_at": "2018-05-11T22:10:47Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "body": "I'm trying to make use of componentDidCatch in the React 16 beta. I already had a global window error handler which was working fine, but it unexpectedly catches errors that I would expect componentDidCatch to have handled. That is, component-local errors are being treated as window-global errors in dev builds.\r\n\r\nThe problem seems to stem from `invokeGuardedCallbackDev` in `ReactErrorUtils.js`. I think that this entire `__DEV__` block of code is problematic. The stated rational is:\r\n\r\n```\r\n  // In DEV mode, we swap out invokeGuardedCallback for a special version\r\n  // that plays more nicely with the browser's DevTools. The idea is to preserve\r\n  // \"Pause on exceptions\" behavior. Because React wraps all user-provided\r\n  // functions in invokeGuardedCallback, and the production version of\r\n  // invokeGuardedCallback uses a try-catch, all user exceptions are treated\r\n  // like caught exceptions, and the DevTools won't pause unless the developer\r\n  // takes the extra step of enabling pause on caught exceptions. This is\r\n  // untintuitive, though, because even though React has caught the error, from\r\n  // the developer's perspective, the error is uncaught.\r\n```\r\n\r\nThis is misguided because it's not about pausing on exceptions, it's about \"pause on _uncaught_ exceptions.\" However, `componentDidCatch` makes exceptions _caught_!\r\n\r\nRather than switching on prod vs dev and using try/catch in prod and window's error handler in dev, React should always use try/catch, but rethrow if you reach the root without hitting a componentDidCatch handler. This would preserve the correct \"pause on uncaught exceptions\" behavior without messing with global error handlers.",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/10506",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/10506/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/10506/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/10506/events",
        "html_url": "https://github.com/facebook/react/issues/10506",
        "id": 251810580,
        "number": 10506,
        "title": "Symbol Tagging for dangerouslySetInnerHTML to Help Prevent XSS",
        "user": {
            "login": "sebmarkbage",
            "id": 63648,
            "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sebmarkbage",
            "html_url": "https://github.com/sebmarkbage",
            "followers_url": "https://api.github.com/users/sebmarkbage/followers",
            "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
            "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
            "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
            "repos_url": "https://api.github.com/users/sebmarkbage/repos",
            "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 710375792,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
                "name": "Type: Discussion",
                "color": "fef2c0",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2017-08-22T01:13:23Z",
        "updated_at": "2017-10-04T21:02:38Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "If you're spreading props from a user provided source we have a XSS. E.g.\r\n\r\n```js\r\nvar data = JSON.parse(decodeURI(location.search.substr(1)));\r\n\r\nfunction Foo(props) {\r\n  return <div><div {...props} /><span>{props.content}</span></div>;\r\n}\r\n\r\nReactDOM.render(<Foo {...data} />, container);\r\n```\r\n\r\nThat's already true today because this URL is now an XSS hole:\r\n```\r\n?{\"content\":\"Hello\",\"dangerouslySetInnerHTML\":{\"__html\":\"<a%20onclick=\\\"alert(%27p0wned%27)\\\">Click%20me</a>\"}}\r\n```\r\n\r\nThis is very uncommon. There are many different ways to screw up getting user data. However doing that + also spreading is unusual. We decided in #3473 that React should add an extra layer of protection for these types of mistakes. This one is __much__ more uncommon than the one in #3473 though.\r\n\r\nYou should already have a pretty centralized way of sanitizing these objects so it seems to me that adding a Symbol to this object shouldn't be that big of a deal though.\r\n\r\nEither:\r\n\r\n```js\r\n{ $$typeof:Symbol.for('react.rawhtml'), __html: myHTML }\r\n```\r\nor:\r\n```js\r\n{ [Symbol.for('react.rawhtml')]: myHTML }\r\n```",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/10519",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/10519/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/10519/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/10519/events",
        "html_url": "https://github.com/facebook/react/issues/10519",
        "id": 252309676,
        "number": 10519,
        "title": "OnMouseMove outside window while MouseDown",
        "user": {
            "login": "upanicon",
            "id": 29457762,
            "avatar_url": "https://avatars1.githubusercontent.com/u/29457762?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/upanicon",
            "html_url": "https://github.com/upanicon",
            "followers_url": "https://api.github.com/users/upanicon/followers",
            "following_url": "https://api.github.com/users/upanicon/following{/other_user}",
            "gists_url": "https://api.github.com/users/upanicon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/upanicon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/upanicon/subscriptions",
            "organizations_url": "https://api.github.com/users/upanicon/orgs",
            "repos_url": "https://api.github.com/users/upanicon/repos",
            "events_url": "https://api.github.com/users/upanicon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/upanicon/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 710722093,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
                "name": "Type: Needs Investigation",
                "color": "fbca04",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2017-08-23T14:46:12Z",
        "updated_at": "2017-10-04T21:03:17Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "The SyntheticEvent OnMouseMove will stop triggering when the mouse is moved outside the window.\r\nWhile instead the browser event of Chrome will continue to trigger mousemove when mousedown is active. \r\nCan this behavior be implemented for the SyntheticEvent?",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/10580",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/10580/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/10580/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/10580/events",
        "html_url": "https://github.com/facebook/react/issues/10580",
        "id": 254194828,
        "number": 10580,
        "title": "Implement Silent Updates in the State Update Queue",
        "user": {
            "login": "sebmarkbage",
            "id": 63648,
            "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sebmarkbage",
            "html_url": "https://github.com/sebmarkbage",
            "followers_url": "https://api.github.com/users/sebmarkbage/followers",
            "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
            "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
            "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
            "repos_url": "https://api.github.com/users/sebmarkbage/repos",
            "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 121709921,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 6,
        "created_at": "2017-08-31T02:48:27Z",
        "updated_at": "2017-11-03T15:36:12Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "[Reason React](https://github.com/reasonml/reason-react) has silent updates. Meaning it's a normal update in the state queue that can be reverted. The only difference is, it doesn't need a rerender by itself. If props have changed, it does rerender.\r\n\r\nUnclear if we expose this to the existing ClassComponent API or make it a feature of new APIs.",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/10581",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/10581/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/10581/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/10581/events",
        "html_url": "https://github.com/facebook/react/issues/10581",
        "id": 254196253,
        "number": 10581,
        "title": "Accept Ref Objects as Refs?",
        "user": {
            "login": "sebmarkbage",
            "id": 63648,
            "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sebmarkbage",
            "html_url": "https://github.com/sebmarkbage",
            "followers_url": "https://api.github.com/users/sebmarkbage/followers",
            "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
            "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
            "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
            "repos_url": "https://api.github.com/users/sebmarkbage/repos",
            "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 739777675,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Component%20API",
                "name": "Component: Component API",
                "color": "d4c5f9",
                "default": false
            },
            {
                "id": 270986513,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Big%20Picture",
                "name": "Type: Big Picture",
                "color": "61dafb",
                "default": false
            },
            {
                "id": 121709921,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 5,
        "created_at": "2017-08-31T02:56:51Z",
        "updated_at": "2017-11-03T15:47:27Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "[Reason React](https://github.com/reasonml/reason-react) uses first class OCaml refs to store mutable values (instead of on `this` instances).\r\n\r\nThese are basically just an object with a mutable `contents` property. These can be updated with callback refs `n => ref.contents = n` but it would be a nice convenience feature to just have that built-in.\r\n\r\nWe could also make these first class objects on isomorphic React.\r\n\r\n```js\r\nReact.createRef = () => ({ contents: null });\r\n```\r\n\r\n```js\r\nclass Foo extends React.Component {\r\n  state = {\r\n    myDiv: React.createRef()\r\n  };\r\n  componentDidMount() {\r\n    if (myDiv.contents) {\r\n      myDiv.contents.focus();\r\n    }\r\n  }\r\n  render() {\r\n    return <div ref={this.state.myDiv} />;\r\n  }\r\n}\r\n```\r\n\r\nBasically the implementation would just be:\r\n\r\n```js\r\nif (typeof ref === 'function') {\r\n  ref(newValue);\r\n} else if (typeof ref === 'object') {\r\n  ref.contents = newValue;\r\n} else if (typeof ref === 'string') {\r\n  owner.refs[ref] = newValue;\r\n}\r\n```\r\n\r\nThis is something that needs to be implemented in the core runtime and not as part of any particular component API since refs cross that boundary.\r\n\r\ncc @adamjernst\r\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/10589",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/10589/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/10589/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/10589/events",
        "html_url": "https://github.com/facebook/react/issues/10589",
        "id": 254514316,
        "number": 10589,
        "title": "Make on/off, yes/no boolean attributes work",
        "user": {
            "login": "gaearon",
            "id": 810438,
            "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gaearon",
            "html_url": "https://github.com/gaearon",
            "followers_url": "https://api.github.com/users/gaearon/followers",
            "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
            "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
            "organizations_url": "https://api.github.com/users/gaearon/orgs",
            "repos_url": "https://api.github.com/users/gaearon/repos",
            "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gaearon/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 121709921,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 6,
        "created_at": "2017-09-01T01:49:25Z",
        "updated_at": "2017-10-04T21:04:28Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "When you pass a boolean to some attributes (e.g. `autoSave`, `autoCorrect`) in 15, they don't work correctly because they actually want a specific string (`yes` and `no`). I think there were also some attributes that want `on` and `off`.\r\n\r\nLet's just \u201cmake them work\u201d? Could use a special flag/whitelist for that. There should be very few of these.\r\n\r\nSimilarly we should probably make `<script crossOrigin />` be valid and turn into `<script crossOrigin=\"anonymous\" />`. Currently I don\u2019t think this works on master.",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/10657",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/10657/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/10657/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/10657/events",
        "html_url": "https://github.com/facebook/react/issues/10657",
        "id": 256445676,
        "number": 10657,
        "title": "BFcache, SSR and form elements",
        "user": {
            "login": "oliviertassinari",
            "id": 3165635,
            "avatar_url": "https://avatars2.githubusercontent.com/u/3165635?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/oliviertassinari",
            "html_url": "https://github.com/oliviertassinari",
            "followers_url": "https://api.github.com/users/oliviertassinari/followers",
            "following_url": "https://api.github.com/users/oliviertassinari/following{/other_user}",
            "gists_url": "https://api.github.com/users/oliviertassinari/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/oliviertassinari/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/oliviertassinari/subscriptions",
            "organizations_url": "https://api.github.com/users/oliviertassinari/orgs",
            "repos_url": "https://api.github.com/users/oliviertassinari/repos",
            "events_url": "https://api.github.com/users/oliviertassinari/events{/privacy}",
            "received_events_url": "https://api.github.com/users/oliviertassinari/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 121709921,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2017-09-09T15:23:08Z",
        "updated_at": "2017-10-17T16:07:11Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\n Bug\r\n\r\n**What is the current behavior?**\r\n\r\nLet's say you start filling a form input type text or a select element with `foo`. Then you click on a link and press the back button. The browser back-forward cache will kick in and change the initial value of the form elements. We will get our `foo` value back.\r\nHowever, React doesn't account for it when the component is controlled.\r\n\r\nI have tried reproducing the behavior with jsfiddle with [react@latest](https://jsfiddle.net/d4fovwxx/) and [react@next](https://jsfiddle.net/vm5vouqo/) with no luck as the BFcache doesn't kick in without SSR.\r\n\r\n**What is the expected behavior?**\r\n\r\nI expect React triggering a `onChange` event to replicate the actual form value.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n- React `@latest`.\r\n- Chrome `@latest`\r\n\r\nWe have been [using the following hack](https://github.com/callemall/material-ui/blob/v1-beta/src/Input/Input.js#L349-#L356) on Material-UI:\r\n```js\r\n  componentDidMount() {\r\n    // Fix SSR issue with the go back feature of the browsers.\r\n    // Let's say you start filling the input with \"foo\", you change the page then after comes back.\r\n    // The browser will reset the input value to \"foo\", but we also need to tell React about it.\r\n    this.handleChange({\r\n      target: this.input,\r\n    });\r\n  }\r\n```\r\n\r\nBut it comes with issues: https://github.com/callemall/material-ui/pull/8110.\r\nSo instead, we tried simulating a change event [as suggested in StackOverflow](https://stackoverflow.com/questions/23892547/what-is-the-best-way-to-trigger-onchange-event-in-react-js) but it doesn't work anymore\r\n```js\r\nvar event = new Event('input', { bubbles: true });\r\nelement.dispatchEvent(event);\r\n```\r\n\r\nSo for now, we are going to disable the BFcache with `<form autoComplete=\"off\">`.",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/10687",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/10687/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/10687/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/10687/events",
        "html_url": "https://github.com/facebook/react/issues/10687",
        "id": 257165626,
        "number": 10687,
        "title": "In react 15.6 and greater (safari only), onChange does not fire for input boxes when using sendkeys in the test automation framework selenium",
        "user": {
            "login": "stephenweaver",
            "id": 5230027,
            "avatar_url": "https://avatars2.githubusercontent.com/u/5230027?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/stephenweaver",
            "html_url": "https://github.com/stephenweaver",
            "followers_url": "https://api.github.com/users/stephenweaver/followers",
            "following_url": "https://api.github.com/users/stephenweaver/following{/other_user}",
            "gists_url": "https://api.github.com/users/stephenweaver/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/stephenweaver/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/stephenweaver/subscriptions",
            "organizations_url": "https://api.github.com/users/stephenweaver/orgs",
            "repos_url": "https://api.github.com/users/stephenweaver/repos",
            "events_url": "https://api.github.com/users/stephenweaver/events{/privacy}",
            "received_events_url": "https://api.github.com/users/stephenweaver/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 178761159,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Regression",
                "name": "Type: Regression",
                "color": "e11d21",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 9,
        "created_at": "2017-09-12T20:09:45Z",
        "updated_at": "2018-05-25T13:46:19Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nI believe this is a bug that was introduced in version 15.6. It also exists in the latest tagged version.\r\n(v16.0.0-rc.2)\r\n\r\n\r\n**What is the current behavior?**\r\n\r\nWhen running functional tests using selenium and the safari web driver (https://github.com/SeleniumHQ/selenium/wiki/SafariDriver), using the \"sendKeys\" method doesn't trigger an onChange event of an input field. This appears to be safari only, however, I've only tested in Chrome and Safari. The result is the the app doesn't see the text in the form input fields. (In our case, we can't log in when running our automation tests, because the username field thinks it's empty, even though the text appears to be in the field)\r\n\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template: https://jsfiddle.net/ebsrpraL/).**\r\n\r\nIt's a rather complicated setup process if you don't already have selenium working, but assuming you have a selenium test set up, it's very simple to reproduce.\r\n\r\n\r\nCreate a clean react 15.6 app. \r\nEdit the App.js file to include `<input id='test-text' onChange={this.onTextChanged}/>`\r\nAdd this method above the render function `onTextChanged() {\r\n    console.log('onTextChanged');\r\n  }` \r\nRun the selenium test that types into the new input field.\r\nYou'll notice that the console logs have not mention of \"onTextChanged\"\r\n\r\nIf you edit the packages.json file to use react 15.5, remove the node_modules folder, and re-run yarn install and yarn start; you'll notice the you do in\r\n\r\n**What is the expected behavior?**\r\n\r\nYou should notice a console log instance of \"onTextChanged\" for each character typed into the input field.\r\n\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nAs mentioned above, chrome is not effected by this issue, and the issue appears to be introduced in version 15.6.0. \r\n\r\nReverting our app back to 15.5.4 allows our automation tests to run, if this could be fixed in v16, that would be great as we won't be upgrading until this is resolved. Please let me know if I can provide any more useful information.",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/10691",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/10691/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/10691/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/10691/events",
        "html_url": "https://github.com/facebook/react/issues/10691",
        "id": 257307941,
        "number": 10691,
        "title": "`select` should warn if `value` is not available",
        "user": {
            "login": "jochenberger",
            "id": 370733,
            "avatar_url": "https://avatars1.githubusercontent.com/u/370733?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jochenberger",
            "html_url": "https://github.com/jochenberger",
            "followers_url": "https://api.github.com/users/jochenberger/followers",
            "following_url": "https://api.github.com/users/jochenberger/following{/other_user}",
            "gists_url": "https://api.github.com/users/jochenberger/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jochenberger/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jochenberger/subscriptions",
            "organizations_url": "https://api.github.com/users/jochenberger/orgs",
            "repos_url": "https://api.github.com/users/jochenberger/repos",
            "events_url": "https://api.github.com/users/jochenberger/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jochenberger/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 121709921,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2017-09-13T09:06:11Z",
        "updated_at": "2018-04-13T05:52:32Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "IMO, \r\n```\r\n<select value=\"foo\" onChange={...}>\r\n  <option value=\"yes\">Yes</option>\r\n  <option value=\"no\">No</option>\r\n</select>\r\n```\r\nshould warn because there is no \"foo\" option. It should probably also warn if `value` is not specified, because there is no \"empty\" option either.\r\nOne could also argue that the change handler should be called with {value: 'yes'} when the component renders and the first option is selected instead of an invalid/non-existing one.",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/10703",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/10703/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/10703/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/10703/events",
        "html_url": "https://github.com/facebook/react/issues/10703",
        "id": 257551625,
        "number": 10703,
        "title": "A faster diff algorithm",
        "user": {
            "login": "thomas-jeepe",
            "id": 12104698,
            "avatar_url": "https://avatars1.githubusercontent.com/u/12104698?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/thomas-jeepe",
            "html_url": "https://github.com/thomas-jeepe",
            "followers_url": "https://api.github.com/users/thomas-jeepe/followers",
            "following_url": "https://api.github.com/users/thomas-jeepe/following{/other_user}",
            "gists_url": "https://api.github.com/users/thomas-jeepe/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/thomas-jeepe/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/thomas-jeepe/subscriptions",
            "organizations_url": "https://api.github.com/users/thomas-jeepe/orgs",
            "repos_url": "https://api.github.com/users/thomas-jeepe/repos",
            "events_url": "https://api.github.com/users/thomas-jeepe/events{/privacy}",
            "received_events_url": "https://api.github.com/users/thomas-jeepe/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 739761016,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Reconciler",
                "name": "Component: Reconciler",
                "color": "f9a798",
                "default": false
            },
            {
                "id": 710375792,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
                "name": "Type: Discussion",
                "color": "fef2c0",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 21,
        "created_at": "2017-09-13T23:33:37Z",
        "updated_at": "2018-03-14T10:50:29Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "This is an invitation to discussion...\r\n\r\nSo, react is pretty freaking awesome and I used it quite a bit. One thing unfortunately where react is not as strong is in performance, which gave roots to Inferno and Preact. Although, this is generally a non-issue on desktop, while mobile might be a bottleneck.\r\n\r\nI know many members of the team have been working on improving bundle size (I believe through rollup support in a talk I heard), asynchronous scheduling, etc. I am also aware that @trueadm (the creator of inferno) joined the React team and is working on improving it.\r\n\r\nThe point I want to bring up is this library [petit-dom](https://github.com/yelouafi/petit-dom). It uses, is a diff algorithm (links that explain it provided in the README) and it seems to score incredibly on [vdom performance tests](https://github.com/krausest/js-framework-benchmark). In fact, it is only beat by 2 technologies, vanillajs and surplusjs [per the benchmark snapshot](https://rawgit.com/krausest/js-framework-benchmark/master/webdriver-ts-results/table.html).\r\n\r\npetit-dom beats inferno, preact, mithril, vue, angular, etc. Of course, it is not a proper js framework, however the point I am trying to make is that it is far faster and a major difference between the other frameworks seems to be its diff algorithm.\r\n\r\nI realize this would mean a rewrite of a good portion of react-dom, which is why it is simply a discussion :D.\r\n\r\nIf this is unfeasible, or simply going after the wrong target/bottleneck, let me know as it is after all a discussion.",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/10711",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/10711/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/10711/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/10711/events",
        "html_url": "https://github.com/facebook/react/issues/10711",
        "id": 257710044,
        "number": 10711,
        "title": "Support for string targets for isomorphic createPortal",
        "user": {
            "login": "thysultan",
            "id": 810601,
            "avatar_url": "https://avatars2.githubusercontent.com/u/810601?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/thysultan",
            "html_url": "https://github.com/thysultan",
            "followers_url": "https://api.github.com/users/thysultan/followers",
            "following_url": "https://api.github.com/users/thysultan/following{/other_user}",
            "gists_url": "https://api.github.com/users/thysultan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/thysultan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/thysultan/subscriptions",
            "organizations_url": "https://api.github.com/users/thysultan/orgs",
            "repos_url": "https://api.github.com/users/thysultan/repos",
            "events_url": "https://api.github.com/users/thysultan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/thysultan/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 139653724,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Core%20Utilities",
                "name": "Component: Core Utilities",
                "color": "c5def5",
                "default": false
            },
            {
                "id": 121709921,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 7,
        "created_at": "2017-09-14T12:57:40Z",
        "updated_at": "2018-01-02T17:45:10Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "This is a proposal for the `createPortal` API to in addition to Nodes support strings for the second argument(container), which could pave a declarative way to achieve out of order server side rendering.\r\n\r\n```js\r\n#createPortal(..., container: Node|String, ...)\r\n```\r\n\r\nThe server could render a portals children in-place and have the client-side hydration process move it to the right location client-side using `document.querySelector` if the container is a string.",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/10713",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/10713/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/10713/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/10713/events",
        "html_url": "https://github.com/facebook/react/issues/10713",
        "id": 257866486,
        "number": 10713,
        "title": "What should portals do when container has a child managed by React?",
        "user": {
            "login": "siddharthkp",
            "id": 1863771,
            "avatar_url": "https://avatars0.githubusercontent.com/u/1863771?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/siddharthkp",
            "html_url": "https://github.com/siddharthkp",
            "followers_url": "https://api.github.com/users/siddharthkp/followers",
            "following_url": "https://api.github.com/users/siddharthkp/following{/other_user}",
            "gists_url": "https://api.github.com/users/siddharthkp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/siddharthkp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/siddharthkp/subscriptions",
            "organizations_url": "https://api.github.com/users/siddharthkp/orgs",
            "repos_url": "https://api.github.com/users/siddharthkp/repos",
            "events_url": "https://api.github.com/users/siddharthkp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/siddharthkp/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 710375792,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
                "name": "Type: Discussion",
                "color": "fef2c0",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 15,
        "created_at": "2017-09-14T21:46:38Z",
        "updated_at": "2018-03-20T17:23:10Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\n`ReactDOM.unstable_createPortal(<Component/>, target)` appends the rendered component in the target instead of replacing the contents of the target\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template: https://jsfiddle.net/ebsrpraL/).**\r\n\r\nhttps://codesandbox.io/s/pjx8x9z2o7\r\n\r\n**What is the expected behavior?**\r\n\r\nIt should replace the contents of the target with the new rendered component\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nreact@16.0.0-rc.3\r\nreact-dom@16.0.0-rc.3\r\n\r\n\r\nNote: I might have completely misunderstood how portals work. @gaearon [encouraged me](https://twitter.com/dan_abramov/status/908443416173924352) to open this issue \ud83d\ude04 ",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/10729",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/10729/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/10729/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/10729/events",
        "html_url": "https://github.com/facebook/react/issues/10729",
        "id": 258361171,
        "number": 10729,
        "title": "`unstable_deferredUpdates` can trigger duplicate `setState` calls and miss out others",
        "user": {
            "login": "ryanwilliams",
            "id": 1215,
            "avatar_url": "https://avatars3.githubusercontent.com/u/1215?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ryanwilliams",
            "html_url": "https://github.com/ryanwilliams",
            "followers_url": "https://api.github.com/users/ryanwilliams/followers",
            "following_url": "https://api.github.com/users/ryanwilliams/following{/other_user}",
            "gists_url": "https://api.github.com/users/ryanwilliams/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ryanwilliams/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ryanwilliams/subscriptions",
            "organizations_url": "https://api.github.com/users/ryanwilliams/orgs",
            "repos_url": "https://api.github.com/users/ryanwilliams/repos",
            "events_url": "https://api.github.com/users/ryanwilliams/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ryanwilliams/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 739761016,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Reconciler",
                "name": "Component: Reconciler",
                "color": "f9a798",
                "default": false
            },
            {
                "id": 710722093,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
                "name": "Type: Needs Investigation",
                "color": "fbca04",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2017-09-18T03:13:17Z",
        "updated_at": "2017-11-03T15:19:51Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "Bug\r\n\r\nI know deferredUpdates are unstable, so maybe this is a known problem.\r\n\r\nThis one is tricky to trigger, but when spamming `setState(function(){})` inside `unstable_deferredUpdates` a LOT you can end up with the same update happening multiple times while other calls are skipped entirely. \r\n\r\nExample code: https://gist.github.com/ryanwilliams/9cfa1bbaa43d8eae6792520a166ae1df\r\nResult: https://i.imgur.com/AOyCNFe.png\r\n\r\nIf you mouse wheel up and down real fast in the red area you see that console output. I would expect the `bar` number that's output in the console to be unique and in sequence as it's incremented every time before the closure captures it inside the new `setState()`.\r\n\r\nVersion: react-16-rc3\r\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/10736",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/10736/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/10736/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/10736/events",
        "html_url": "https://github.com/facebook/react/issues/10736",
        "id": 258483033,
        "number": 10736,
        "title": "Attach third-party tools to monitor component state updates",
        "user": {
            "login": "omerts",
            "id": 4996164,
            "avatar_url": "https://avatars2.githubusercontent.com/u/4996164?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/omerts",
            "html_url": "https://github.com/omerts",
            "followers_url": "https://api.github.com/users/omerts/followers",
            "following_url": "https://api.github.com/users/omerts/following{/other_user}",
            "gists_url": "https://api.github.com/users/omerts/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/omerts/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/omerts/subscriptions",
            "organizations_url": "https://api.github.com/users/omerts/orgs",
            "repos_url": "https://api.github.com/users/omerts/repos",
            "events_url": "https://api.github.com/users/omerts/events{/privacy}",
            "received_events_url": "https://api.github.com/users/omerts/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 139653724,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Core%20Utilities",
                "name": "Component: Core Utilities",
                "color": "c5def5",
                "default": false
            },
            {
                "id": 121709921,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 3,
        "created_at": "2017-09-18T13:39:07Z",
        "updated_at": "2017-10-04T21:20:13Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nfeature, that exists in previous releases of react\r\n\r\n**What is the current behavior?**\r\nfeature is not implemented\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** React 16, worked in previous versions\r\n\r\nHey,\r\nWe would really like to be able to use ReactInstrumentation with Fiber. I have found @gaearon 's pull request, but work on it was stopped. Would like to know why? and if we can pick this up and implement it.\r\n\r\nhttps://github.com/facebook/react/pull/8152\r\n(I have also asked why in the pull request, but figured it might get ignored since it is a closed pull request)\r\n\r\nOmer\r\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/10871",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/10871/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/10871/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/10871/events",
        "html_url": "https://github.com/facebook/react/issues/10871",
        "id": 260970779,
        "number": 10871,
        "title": "Multiple onFocus events fired on single focus in Safari",
        "user": {
            "login": "mbryla",
            "id": 1191038,
            "avatar_url": "https://avatars3.githubusercontent.com/u/1191038?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mbryla",
            "html_url": "https://github.com/mbryla",
            "followers_url": "https://api.github.com/users/mbryla/followers",
            "following_url": "https://api.github.com/users/mbryla/following{/other_user}",
            "gists_url": "https://api.github.com/users/mbryla/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mbryla/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mbryla/subscriptions",
            "organizations_url": "https://api.github.com/users/mbryla/orgs",
            "repos_url": "https://api.github.com/users/mbryla/repos",
            "events_url": "https://api.github.com/users/mbryla/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mbryla/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 40929151,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
                "name": "Type: Bug",
                "color": "b60205",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 13,
        "created_at": "2017-09-27T13:18:30Z",
        "updated_at": "2017-11-28T06:09:35Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "I'd like to report a possible bug.\r\n\r\n1. Brief description\r\nOnFocus synthetic event is fired multiple times on single focus occurrence in Safari. Expected behaviour is for it to be fired only once per focus.\r\n\r\n2. Live demo: https://codesandbox.io/s/101pnjxq27\r\n\r\n3. Minimal steps to reproduce\r\n- install create-react-app\r\n`$ npm install -g create-react-app`\r\n\r\n- create an example application\r\n`$ create-react-app input-focus-test`\r\n`$ cd input-focus-test`\r\n\r\n- edit application file and add input with onFocus event handler\r\n`$ vi src/App.js`\r\n\r\n```javascript\r\nimport React, { Component } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  handleOnFocus = evt => {\r\n        console.log('handleOnFocus', evt);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n          <h1 className=\"App-title\">Welcome to React</h1>\r\n        </header>\r\n        <p className=\"App-intro\">\r\n          To get started, edit <code>src/App.js</code> and save to reload.\r\n        </p>\r\n        <p>\r\n          Input\r\n          <input onFocus={this.handleOnFocus}/>\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n```\r\n\r\n- start application\r\n`$ npm run start`\r\n\r\n- open up locahost:3000 in Safari\r\n- click on the input field with developer\u2019s console opened\r\n- notice focus event fired multiple times\r\n\r\n4. Additional info\r\nThis issue has been found in the following environment:\r\n- macOS Sierra version 10.12.6 (also tested and found on High Sierra)\r\n- Safari 10.1.2 (also tested and found in Safari 10.0 and Safari 11, seems to work on latest Safari mobile, Chrome and Firefox)\r\n- React JS 15.5.4 (also tested and found in React 16)\r\n- example steps to reproduce above generated with create-react-app version 1.4.1\r\n\r\nSome of our observations that might come in handy:\r\n- this issue seems to behave randomly to some extent\r\n- event is usually fired twice when changing focus from input to input (so first click on input fires two events, consequential fire only one, but when changing focus to a different input field it fires twice again)\r\n- additional interesting behavior happens with multiple input fields; for instance with input fields 1 and 2, first focus on input 1 generates two events onFocus with input 1, but then focus on input 2 sometimes generates three events: onFocus with input 1, then input 2, then input 1 again as targets.\r\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/10879",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/10879/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/10879/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/10879/events",
        "html_url": "https://github.com/facebook/react/issues/10879",
        "id": 261028024,
        "number": 10879,
        "title": "\"Did not expect server HTML to contain the text node\" due to whitespace in React 16",
        "user": {
            "login": "TimoRuetten",
            "id": 7010059,
            "avatar_url": "https://avatars1.githubusercontent.com/u/7010059?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/TimoRuetten",
            "html_url": "https://github.com/TimoRuetten",
            "followers_url": "https://api.github.com/users/TimoRuetten/followers",
            "following_url": "https://api.github.com/users/TimoRuetten/following{/other_user}",
            "gists_url": "https://api.github.com/users/TimoRuetten/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/TimoRuetten/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/TimoRuetten/subscriptions",
            "organizations_url": "https://api.github.com/users/TimoRuetten/orgs",
            "repos_url": "https://api.github.com/users/TimoRuetten/repos",
            "events_url": "https://api.github.com/users/TimoRuetten/events{/privacy}",
            "received_events_url": "https://api.github.com/users/TimoRuetten/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 121709921,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 18,
        "created_at": "2017-09-27T15:55:53Z",
        "updated_at": "2017-11-18T09:07:50Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "We have updated our React v15 Application to v16. Everything seems to work fine instead the fact that this error appears:\r\n\r\n`Warning: Did not expect server HTML to contain the text node \"\r\n  \" in <div>.`\r\n\r\nWe are using ReactDOM.hydrate and our App was completely SSR Ready in v15. I've found an old issue on Stackoverflow where someone wrote that this could be a problem with the markup which is send from Server -> Client, but as far as we can see the HTML code is the same without any markup problem.",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/10923",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/10923/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/10923/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/10923/events",
        "html_url": "https://github.com/facebook/react/issues/10923",
        "id": 261393419,
        "number": 10923,
        "title": "How to prevent React from modifying elements manipulated by external code?  ",
        "user": {
            "login": "giratikanon",
            "id": 333527,
            "avatar_url": "https://avatars2.githubusercontent.com/u/333527?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/giratikanon",
            "html_url": "https://github.com/giratikanon",
            "followers_url": "https://api.github.com/users/giratikanon/followers",
            "following_url": "https://api.github.com/users/giratikanon/following{/other_user}",
            "gists_url": "https://api.github.com/users/giratikanon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/giratikanon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/giratikanon/subscriptions",
            "organizations_url": "https://api.github.com/users/giratikanon/orgs",
            "repos_url": "https://api.github.com/users/giratikanon/repos",
            "events_url": "https://api.github.com/users/giratikanon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/giratikanon/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 710332294,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Server%20Rendering",
                "name": "Component: Server Rendering",
                "color": "d4c5f9",
                "default": false
            },
            {
                "id": 40929155,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Question",
                "name": "Type: Question",
                "color": "cc317c",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 4,
        "created_at": "2017-09-28T17:07:31Z",
        "updated_at": "2017-11-03T15:38:00Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "The New York Times is [rebuilding its website](https://open.nytimes.com/react-relay-and-graphql-under-the-hood-of-the-times-website-redesign-22fb62ea9764) using React. Currently, it\u2019s an isomorphic app that has both server- and client-side renders. \r\n\r\n**Our question: What's the best way to include a non-React interactive graphic \u2014 maps, charts and other visualizations created by custom code \u2014 within a fully React page?**\r\n\r\nOur ideal scenario: \r\n\r\n* Server-side React renders the initial HTML for a graphic, using `dangerouslySetInnerHTML`, as part of a React page\r\n* Client-side React never touches those elements again, even during component mounting\r\n\r\nWe thought React 16 might solve this with `hydrate` method, but it still removes nodes that it doesn't expect, such as nodes generated by D3 or other client-side code. None of the options in [Integrating with Other Libraries](https://facebook.github.io/react/docs/integrating-with-other-libraries.html) seem to be an exact match either.\r\n\r\nThe classic use case is a graphic with a D3 map. The server-side HTML includes text and a placeholder <div> for the map, as well as the map JS. On page load, the map is immediately drawn by D3 but gets erased when React mounts client-side. The D3 nodes aren\u2019t included in the server-side output, because they often vary based on viewport, device, etc.\r\n\r\nHere\u2019s a [trivial example](https://jsfiddle.net/6zdhrych/), showing React 16\u2019s `hydrate` removing client-created nodes after one second. On mobile devices, loading the React library and potentially other dependencies could take some seconds.\r\n\r\nThe simplest solution I can think of is a `shouldComponentMount` function, where we could return false. The rest of the React components on the page would mount, but leave the interactive graphic part alone. There are probably other solutions.\r\n \r\nConstraints:\r\n\r\n* We need to use dangerouslySetInnerHTML, because we need to deploy graphics outside of site releases\r\n* We need to render the initial HTML server-side for performance and simplicity\r\n* We can\u2019t use iFrames for everything, as they\u2019re not flexible enough\r\n* We can\u2019t re-render or reattach elements, as that causes many problems \u2014 CSS animations restart, media playback is interrupted, input cursors and text selections are lost, etc.\r\n\r\nAny guidance is appreciated.\r\n\r\ncc @gaearon @leeb \r\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11013",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11013/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11013/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11013/events",
        "html_url": "https://github.com/facebook/react/issues/11013",
        "id": 261937204,
        "number": 11013,
        "title": "Warn about unexpected HTML inside SVG",
        "user": {
            "login": "caub",
            "id": 3134574,
            "avatar_url": "https://avatars0.githubusercontent.com/u/3134574?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/caub",
            "html_url": "https://github.com/caub",
            "followers_url": "https://api.github.com/users/caub/followers",
            "following_url": "https://api.github.com/users/caub/following{/other_user}",
            "gists_url": "https://api.github.com/users/caub/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/caub/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/caub/subscriptions",
            "organizations_url": "https://api.github.com/users/caub/orgs",
            "repos_url": "https://api.github.com/users/caub/repos",
            "events_url": "https://api.github.com/users/caub/events{/privacy}",
            "received_events_url": "https://api.github.com/users/caub/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 121709921,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2017-10-01T18:51:32Z",
        "updated_at": "2017-11-30T08:24:39Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "react and react-dom versions: 16.0.0\r\n\r\n```js\r\nconst { createElement: h } = require('react');\r\nconst { renderToStaticMarkup } = require('react-dom-server');\r\n\r\nrenderToStaticMarkup(h('div', null, h('svg', null, h('span')))) \r\n// '<div><svg><span></span></svg></div>'\r\n```\r\n\r\nBut they shouldn't be mixed:\r\n\r\nin browser console:\r\n\r\n```js\r\nnew Range().createContextualFragment('<div><svg><span></span></svg></div>')\r\n// \"<div><svg></svg><span></span></div>\"\r\n```\r\nI guess it's programmer responsibility to avoid that case? I understand that for performance you don't check this",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11019",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11019/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11019/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11019/events",
        "html_url": "https://github.com/facebook/react/issues/11019",
        "id": 261957590,
        "number": 11019,
        "title": "Deprecate and remove TestUtils.mockComponent",
        "user": {
            "login": "gaearon",
            "id": 810438,
            "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gaearon",
            "html_url": "https://github.com/gaearon",
            "followers_url": "https://api.github.com/users/gaearon/followers",
            "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
            "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
            "organizations_url": "https://api.github.com/users/gaearon/orgs",
            "repos_url": "https://api.github.com/users/gaearon/repos",
            "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gaearon/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 139734344,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Test%20Utils",
                "name": "Component: Test Utils",
                "color": "eb6420",
                "default": false
            },
            {
                "id": 40929153,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement",
                "name": "Type: Enhancement",
                "color": "84b6eb",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 3,
        "created_at": "2017-10-02T00:06:18Z",
        "updated_at": "2018-01-28T21:58:25Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "It is a Jest-ism that shouldn't be in our open source package.\r\nPeople using Jest can implement a similar pattern directly.",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11022",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11022/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11022/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11022/events",
        "html_url": "https://github.com/facebook/react/issues/11022",
        "id": 262025600,
        "number": 11022,
        "title": "Error and error info logged in wrong order in Firefox",
        "user": {
            "login": "xMartin",
            "id": 112532,
            "avatar_url": "https://avatars2.githubusercontent.com/u/112532?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xMartin",
            "html_url": "https://github.com/xMartin",
            "followers_url": "https://api.github.com/users/xMartin/followers",
            "following_url": "https://api.github.com/users/xMartin/following{/other_user}",
            "gists_url": "https://api.github.com/users/xMartin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xMartin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xMartin/subscriptions",
            "organizations_url": "https://api.github.com/users/xMartin/orgs",
            "repos_url": "https://api.github.com/users/xMartin/repos",
            "events_url": "https://api.github.com/users/xMartin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xMartin/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 710722093,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
                "name": "Type: Needs Investigation",
                "color": "fbca04",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2017-10-02T09:19:21Z",
        "updated_at": "2017-11-03T15:25:27Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "In React 16 when a component throws an error in development mode the error itself (\"ReferenceError: x is not defined\") and additional info (\"The above error occurred in the <HelloWorld> component: ...\") is logged.\r\n\r\nIn Firefox this happens in the wrong order so that \"the above error\" is actually below:\r\n![bildschirmfoto 2017-10-02 um 11 08 08](https://user-images.githubusercontent.com/112532/31070963-a4147534-a762-11e7-88cd-5c15f263f219.png)\r\n\r\nWorks fine in Google Chrome.\r\n\r\nFirefox version: macOS 56.0 and 57.0b4\r\nReact v16.0.0\r\n\r\nHow to reproduce:\r\nOpen browser console and have a component throw an error like:\r\n```javascript\r\nconst HelloWorld = () => (\r\n  <h1>Hello, world {x}!</h1>\r\n);\r\n\r\nReactDOM.render(\r\n  <HelloWorld />,\r\n  document.getElementById('root')\r\n);\r\n```\r\nhttps://codepen.io/anon/pen/mBMGyV",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11062",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11062/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11062/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11062/events",
        "html_url": "https://github.com/facebook/react/issues/11062",
        "id": 262393023,
        "number": 11062,
        "title": "onBlur event triggers when trying to set focus on input[type\"number\"] on conditional rendering in Firefox",
        "user": {
            "login": "mdekalka",
            "id": 5993559,
            "avatar_url": "https://avatars2.githubusercontent.com/u/5993559?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mdekalka",
            "html_url": "https://github.com/mdekalka",
            "followers_url": "https://api.github.com/users/mdekalka/followers",
            "following_url": "https://api.github.com/users/mdekalka/following{/other_user}",
            "gists_url": "https://api.github.com/users/mdekalka/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mdekalka/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mdekalka/subscriptions",
            "organizations_url": "https://api.github.com/users/mdekalka/orgs",
            "repos_url": "https://api.github.com/users/mdekalka/repos",
            "events_url": "https://api.github.com/users/mdekalka/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mdekalka/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 710722093,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
                "name": "Type: Needs Investigation",
                "color": "fbca04",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2017-10-03T11:29:13Z",
        "updated_at": "2017-12-19T02:34:12Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n**What is the current behavior?**\r\nWhen trying to render `input[type=\"number\"]` with active focus on `click` \r\n```javascript\r\nstate = {\r\n    isShown: true,\r\n    value: 0\r\n}\r\ncomponentDidUpdate() {\r\n    this.input && this.input.focus();\r\n}\r\n//...\r\nrender() {\r\n    return (\r\n      <td className=\"editable\">\r\n        {!this.state.isShown ? (\r\n          <input\r\n            type=\"number\"\r\n            ref={(input) => { this.input = input }}\r\n            value={this.state.value}\r\n            onChange={e =>\r\n              this.setState({\r\n                value: e.target.value\r\n              })}\r\n            onBlur={() => {this.setState({ isShown: true })}}\r\n          />\r\n        ) : (\r\n            <span onClick={() => {this.setState({ isShown: false })}}>Click me</span>\r\n          )}\r\n      </td>\r\n    )\r\n}\r\n```\r\n`onBlur` event triggers in Firefox, before even focus is set.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem:**\r\nClick on **name** column to render `input[type=\"number\"]` with active focus(works in Chrome, IE11, Edge, does not in Firefox). Please see live example:\r\nhttps://codepen.io/piupiupiu/pen/KXXQdb?editors=0010\r\n\r\n**What is the expected behavior?**\r\nAfter clicking on **name** column input should appears with active `focus`\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact v15.4.2\r\nFirefox v56.0 Win10\r\n\r\nI'm not sure if this React issue actually, because I noticed that if you will change input type to `text` if will works perfectly in Firefox(so the problem related only to input[type=\"number\"])",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11073",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11073/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11073/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11073/events",
        "html_url": "https://github.com/facebook/react/issues/11073",
        "id": 262588829,
        "number": 11073,
        "title": "Performance enhancements in niche situations",
        "user": {
            "login": "dakom",
            "id": 6406986,
            "avatar_url": "https://avatars3.githubusercontent.com/u/6406986?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dakom",
            "html_url": "https://github.com/dakom",
            "followers_url": "https://api.github.com/users/dakom/followers",
            "following_url": "https://api.github.com/users/dakom/following{/other_user}",
            "gists_url": "https://api.github.com/users/dakom/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dakom/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dakom/subscriptions",
            "organizations_url": "https://api.github.com/users/dakom/orgs",
            "repos_url": "https://api.github.com/users/dakom/repos",
            "events_url": "https://api.github.com/users/dakom/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dakom/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 739761016,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Reconciler",
                "name": "Component: Reconciler",
                "color": "f9a798",
                "default": false
            },
            {
                "id": 710375792,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
                "name": "Type: Discussion",
                "color": "fef2c0",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": {
            "login": "gaearon",
            "id": 810438,
            "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gaearon",
            "html_url": "https://github.com/gaearon",
            "followers_url": "https://api.github.com/users/gaearon/followers",
            "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
            "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
            "organizations_url": "https://api.github.com/users/gaearon/orgs",
            "repos_url": "https://api.github.com/users/gaearon/repos",
            "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gaearon/received_events",
            "type": "User",
            "site_admin": false
        },
        "assignees": [
            {
                "login": "gaearon",
                "id": 810438,
                "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/gaearon",
                "html_url": "https://github.com/gaearon",
                "followers_url": "https://api.github.com/users/gaearon/followers",
                "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
                "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
                "organizations_url": "https://api.github.com/users/gaearon/orgs",
                "repos_url": "https://api.github.com/users/gaearon/repos",
                "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
                "received_events_url": "https://api.github.com/users/gaearon/received_events",
                "type": "User",
                "site_admin": false
            }
        ],
        "milestone": null,
        "comments": 5,
        "created_at": "2017-10-03T21:14:04Z",
        "updated_at": "2017-11-03T15:25:10Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "I hit on a couple things that were a bit surprising to me... not sure what I'm really asking here, other than if these things are documented somewhere. Also kinda just going with the flow where this seems to be the place to raise generic \"issues\" even if they're not bugs :)\r\n\r\n1. keys can make things slower\r\n\r\nI had a bunch of items, and the only thing that changed was their x/y positions. adding a key with index made rendering slower. It's possible this is short-sighted though since it could very well change once that \"layer\" has more items changing above/below it, but I found it interesting.\r\n\r\n2. rendering null makes a _huge_ difference\r\n\r\nI had two test cases - a full graphics pipeline vs. an essentially empty POJO renderer. The difference in speed didn't matter about the data or graphics, but rather about what was returned in the components `render()`. For DOM this doesn't work of course - but for custom renderers, when it's known that a certain type of element will be an edge node - doing the side effects in render() (or some other lifecycle) and then returning `null` is _significantly_ faster than even a straight functional component that returns a simple element (which does the same side effects). This makes sense, since react then has less branches to consider (even if those branches point to nothing other than simple objects).\r\n\r\n\r\n\r\n\r\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11079",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11079/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11079/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11079/events",
        "html_url": "https://github.com/facebook/react/issues/11079",
        "id": 262647846,
        "number": 11079,
        "title": "Improving Browser QA",
        "user": {
            "login": "nhunzaker",
            "id": 590904,
            "avatar_url": "https://avatars3.githubusercontent.com/u/590904?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nhunzaker",
            "html_url": "https://github.com/nhunzaker",
            "followers_url": "https://api.github.com/users/nhunzaker/followers",
            "following_url": "https://api.github.com/users/nhunzaker/following{/other_user}",
            "gists_url": "https://api.github.com/users/nhunzaker/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nhunzaker/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nhunzaker/subscriptions",
            "organizations_url": "https://api.github.com/users/nhunzaker/orgs",
            "repos_url": "https://api.github.com/users/nhunzaker/repos",
            "events_url": "https://api.github.com/users/nhunzaker/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nhunzaker/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 71502270,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Build%20Infrastructure",
                "name": "Component: Build Infrastructure",
                "color": "f9d0c4",
                "default": false
            },
            {
                "id": 710615342,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Umbrella",
                "name": "Type: Umbrella",
                "color": "5319e7",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 12,
        "created_at": "2017-10-04T02:31:39Z",
        "updated_at": "2018-04-27T21:04:18Z",
        "closed_at": null,
        "author_association": "COLLABORATOR",
        "body": "We manually test a lot of behavior that can not be captured by JSDOM. Change events, number input quirks, event pooling, error handling, etc.\r\n\r\nDespite this test suite, comprehensive unit tests, alpha, beta, and release candidates, a number of bugs have slipped through. Particularly around change events.\r\n\r\nI want to explore what it would look like to reduce the burden of manual browser QA when possible. Particularly around things like change events, which hook into JavaScript DOM APIs and should be automatable.\r\n\r\nI've filed this issue for myself to explore the following areas (though I'd be happy for others to pitch in \ud83d\ude04):\r\n\r\n- [ ] Deploying the [DOM Test Fixtures](https://github.com/facebook/react/tree/master/fixtures/dom) to a public URL to distribute manual QA and run automated tests against it\r\n- [ ] Investigate [BrowserStack](https://browserstack.com) or [Sauce Labs](https://saucelabs.com) as possible browser automation options\r\n- [ ] Deploy a nightly or edge build of React with an accompanying JSFiddle to make it easier to determine if a fix works on master without needing to know how to setup React locally.\r\n- [ ] With automation in place, what extremely laborious (but comprehensive) tests could we run to help fight regressions?\r\n\r\n---\r\n\r\nI'm probably missing something, but this is where I'm going to start. I'll post follow-up comments as I learn stuff.",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11088",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11088/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11088/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11088/events",
        "html_url": "https://github.com/facebook/react/issues/11088",
        "id": 262853112,
        "number": 11088,
        "title": "React 16 Spillover",
        "user": {
            "login": "gaearon",
            "id": 810438,
            "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gaearon",
            "html_url": "https://github.com/gaearon",
            "followers_url": "https://api.github.com/users/gaearon/followers",
            "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
            "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
            "organizations_url": "https://api.github.com/users/gaearon/orgs",
            "repos_url": "https://api.github.com/users/gaearon/repos",
            "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gaearon/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 710615342,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Umbrella",
                "name": "Type: Umbrella",
                "color": "5319e7",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 5,
        "created_at": "2017-10-04T16:35:35Z",
        "updated_at": "2017-12-24T02:59:21Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "Just dumping these items here since I want to close the 16 umbrella.\r\n\r\n- [x] Convert OSS repo to ES6 modules (does not block release; nice-to-have follow up)\r\n- [x] Move https://gist.github.com/gaearon/9a4d54653ae9c50af6c54b4e0e56b583 to docs and update fb.me/react-polyfills to point there\r\n- [x] Fix RN crash in DEV https://github.com/facebook/react/issues/10518\r\n- [x] It's worth looking into existing `ssr error` entries in the attribute table. They might mean bugs.\r\n- [x] Decide: after flat bundles, how does one create a custom Fiber renderer? (doesn't block final, but ideally do for final. internal PR WIP at FB, @gaearon or @bvaughn has context)\r\n- [ ] Update \"unknown property\" warning documentation for new behavior in https://github.com/facebook/react/issues/10399 (currently the warning points to the blog post https://fb.me/react-attribute-behavior)\r\n- [ ] Update crossorigin doc and warning to clarify thrower/catcher semantics (@gaearon @bvaughn @sebmarkbage)\r\n- [ ] Add Closure Compiler with ADVANCED and deal with mangling properly (does not block release; nice-to-have follow up)\r\n- [ ] Whitelist/blacklist warnings\r\n- [ ] Add yellow box for warnings https://github.com/facebook/react/pull/7360 (could make opt-in in minor release) (@bvaughn ) [let's make this opt-in in 16.x, on by default in 17]\r\n- [ ] RN: [what is this?] Make sure instanceProps in\u00a0ReactNativeComponentTree\u00a0doesn't leak. (@sebmarkbage,\u00a0@bvaughn)\r\n- [ ] RN: ensure we keep all important invariants (such as that\u00a0text must be wrapped\u00a0in\u00a0`<Text>`) (Dan: I moved this back to blockers because shipping without invariants and adding them later will be painful)\r\n- [ ] Decide how to handle the situation where a container has its content changed outside of React. Right now we warn for this, and it also either silently fails or throws a cryptic error. Should we also throw an error? Or can/should we fix this behavior to match previous React? See comments on https://github.com/facebook/react/issues/10294 (@flarnie)\r\n- [ ] Consider logging caught errors immediately rather than during commit (@gaearon @bvaughn)\r\n- [ ] Improve component stack usability (issue #10461 / PR #10484)\r\n- [ ] https://github.com/facebook/react/issues/10863 SSR should probably lowercase attributes in HTML namespace. PR: https://github.com/facebook/react/pull/11110.\r\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11092",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11092/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11092/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11092/events",
        "html_url": "https://github.com/facebook/react/issues/11092",
        "id": 262900647,
        "number": 11092,
        "title": "Investigate Compiling React with Google Closure Compiler Advanced Mode",
        "user": {
            "login": "gaearon",
            "id": 810438,
            "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gaearon",
            "html_url": "https://github.com/gaearon",
            "followers_url": "https://api.github.com/users/gaearon/followers",
            "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
            "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
            "organizations_url": "https://api.github.com/users/gaearon/orgs",
            "repos_url": "https://api.github.com/users/gaearon/repos",
            "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gaearon/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 71502270,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Build%20Infrastructure",
                "name": "Component: Build Infrastructure",
                "color": "f9d0c4",
                "default": false
            },
            {
                "id": 760751171,
                "url": "https://api.github.com/repos/facebook/react/labels/Difficulty:%20challenging",
                "name": "Difficulty: challenging",
                "color": "f2687c",
                "default": false
            },
            {
                "id": 725156255,
                "url": "https://api.github.com/repos/facebook/react/labels/good%20first%20issue%20(taken)",
                "name": "good first issue (taken)",
                "color": "b60205",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 11,
        "created_at": "2017-10-04T19:19:24Z",
        "updated_at": "2018-01-03T22:08:48Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "Just creating this to track it. We already compile the bundles with GCC simple mode. There's a bunch of things that will break in advanced mode but we're gradually moving closer to being able to do this. \r\n\r\n<s>I think https://github.com/facebook/react/issues/9955 is a prerequisite since otherwise we can never be sure we're still being correct.</s> Landed!\r\n\r\nOpen question is if we can still keep DevTools working. I wonder if Fiber could be an array with fixed indexes and then we wouldn't need any \"sourcemapping\".",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11097",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11097/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11097/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11097/events",
        "html_url": "https://github.com/facebook/react/issues/11097",
        "id": 262945079,
        "number": 11097,
        "title": "Umbrella: React DOM Bugs",
        "user": {
            "login": "gaearon",
            "id": 810438,
            "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gaearon",
            "html_url": "https://github.com/gaearon",
            "followers_url": "https://api.github.com/users/gaearon/followers",
            "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
            "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
            "organizations_url": "https://api.github.com/users/gaearon/orgs",
            "repos_url": "https://api.github.com/users/gaearon/repos",
            "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gaearon/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 710615342,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Umbrella",
                "name": "Type: Umbrella",
                "color": "5319e7",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 4,
        "created_at": "2017-10-04T22:02:59Z",
        "updated_at": "2018-03-23T17:16:54Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "Since I was going through all open issues yesterday and today, I also compiled a list of things that seem broken in ReactDOM, grouped by areas.\r\n\r\nI don\u2019t think all of these issues are equally important but I\u2019d like to start a discussion around how we can start attacking them\u2014both in shorter and in longer term. For example any potential fixes to the onChange event logic would need to take https://github.com/facebook/react/issues/9657 into account (or even inform it).\r\n\r\nI think it would be a good topic for our next chat, cc @jquense @aweary @nhunzaker. Maybe we could also broadcast it this time? \ud83d\ude03  \r\n\r\n## Autofill\r\n\r\n* [ ] https://github.com/facebook/react/issues/1159 Provide a way to handle browser-autocompleted form values on controlled components\r\n* [ ] https://github.com/facebook/react/issues/2585 Handle browser autofill gracefully when server-side rendering\r\n* [ ] https://github.com/facebook/react/issues/7328 IE 11 and Edge no longer prompt to remember password on controlled form\r\n* [ ] https://github.com/facebook/react/issues/10468 DOM Fixture Form Coverage: Restored State and Auto-fill \r\n\r\n## Composition Events\r\n\r\n### Issues\r\n\r\n* [ ] https://github.com/facebook/react/issues/3926 Change event fires too many times when inputing Chinese characters\r\n* [ ] https://github.com/facebook/react/issues/10217 Incorrect data in compositionend event when typing Korean on IE11\r\n* [ ] https://github.com/facebook/react/issues/8683 Composition Events(Chinese, Japanese IME) problem in controlled components(input, textarea)\r\n* [ ] https://github.com/facebook/react/issues/8423 onChange does not work well with IE11 at Japanese IME. in React 15.4.0\r\n\r\n### PRs\r\n\r\n* [ ] https://github.com/facebook/react/pull/7926 Try to generate a beforeInput event for buggy composition scenarios in IE\r\n* [ ] https://github.com/facebook/react/pull/8438 Handle composition events in ChangeEventPlugin\r\n\r\n## Mouse Enter / Leave\r\n\r\n* [ ] https://github.com/facebook/react/issues/4251 mouseenter fires on disabled inputs whereas mouseleave does not\r\n* [ ] https://github.com/facebook/react/issues/10109 Mouseenter event not triggered when cursor moves from disabled button\r\n* [ ] https://github.com/facebook/react/issues/5739 MouseEnter event bubbling happens in reverse order?\r\n* [ ] https://github.com/facebook/react/issues/7135 onMouseEnter propagation in double reactroot\r\n* [ ] https://github.com/facebook/react/issues/6807 onMouseLeave not working as expected\r\n\r\n## Input, Checkbox, and Select\r\n\r\n* [ ] https://github.com/facebook/react/issues/4672 Change event does not fire in IE and Edge under certain circumstances\r\n* [ ] https://github.com/facebook/react/issues/4854 Pressing spacebar on a checked radio button only fires click in some browsers\r\n* [ ] https://github.com/facebook/react/issues/6368 Input type 'email' as controlled component does not control white spaces\r\n* [ ] https://github.com/facebook/react/issues/6951 Changing state in onFocus and onChange for a select multiple element does not work in Firefox\r\n* [ ] https://github.com/facebook/react/issues/7024 select onChange not firing when using keyboard\r\n* [ ] https://github.com/facebook/react/issues/7281 Input onChange not triggered every time in IE11 if e.preventDefault() used\r\n* [ ] https://github.com/facebook/react/issues/7489 input element `setSelectionRange` after backspace does not work in IE10\r\n* [x] https://github.com/facebook/react/issues/7630 Radio buttons are not correctly checked when using multiple lists of radio buttons\r\n* [ ] https://github.com/facebook/react/issues/7769 input autoFocus causes focus to be emitted before ref\r\n* [ ] https://github.com/facebook/react/issues/8514 Undo behavior in controlled textareas works differently from the default behaviour in chrome\r\n* [ ] https://github.com/facebook/react/issues/8531 IE10 triggers onChange twice when replacing a text selection \r\n* [x] https://github.com/facebook/react/issues/8642 textarea + onFocus + stopPropagation = incorrect cursor rendering on Firefox\r\n* [x] https://github.com/facebook/react/issues/8876 onBeforeInput fires after Edge updates the DOM\r\n* [ ] https://github.com/facebook/react/issues/8938 Clear button on iOS date input does not return correct event value \r\n* [ ] https://github.com/facebook/react/issues/9023 event.preventDefault in click handler does not prevent onChange from being called \r\n* [x] https://github.com/facebook/react/issues/11010 Reset of select ignores defaultValue\r\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11098",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11098/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11098/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11098/events",
        "html_url": "https://github.com/facebook/react/issues/11098",
        "id": 262949027,
        "number": 11098,
        "title": "Allow suppressing error boundary logs from intentionally thrown/caught errors",
        "user": {
            "login": "gaearon",
            "id": 810438,
            "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gaearon",
            "html_url": "https://github.com/gaearon",
            "followers_url": "https://api.github.com/users/gaearon/followers",
            "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
            "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
            "organizations_url": "https://api.github.com/users/gaearon/orgs",
            "repos_url": "https://api.github.com/users/gaearon/repos",
            "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gaearon/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 588833528,
                "url": "https://api.github.com/repos/facebook/react/labels/Difficulty:%20medium",
                "name": "Difficulty: medium",
                "color": "fbca04",
                "default": false
            },
            {
                "id": 40929153,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement",
                "name": "Type: Enhancement",
                "color": "84b6eb",
                "default": false
            },
            {
                "id": 725156255,
                "url": "https://api.github.com/repos/facebook/react/labels/good%20first%20issue%20(taken)",
                "name": "good first issue (taken)",
                "color": "b60205",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 17,
        "created_at": "2017-10-04T22:20:27Z",
        "updated_at": "2018-04-10T11:07:14Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "-----\r\n\r\n**(This is a repost of https://github.com/facebook/jest/issues/4597 by @erikras.)**\r\n\r\n----\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nSomewhere in between?\r\n\r\n**What is the current behavior?**\r\n\r\nWhen I'm running tests on [my library](https://github.com/erikras/redux-form), there are some behaviors that I want to test _do_ throw an error. These currently result in:\r\n\r\n```\r\nConsider adding an error boundary to your tree to customize error handling behavior.\r\nYou can learn more about error boundaries at https://fb.me/react-error-boundaries.\r\n```\r\n\r\n...being output to the console. This error is great in an application, but not so great for a library test.\r\n\r\n**What is the expected behavior?**\r\n\r\nIt would be great if I could do something like:\r\n```jsx\r\nexpect(() => {\r\n  TestUtils.renderIntoDocument(<DoSomething naughty/>)\r\n})\r\n.toThrow(/Bad developer!/)\r\n.andCatch() // <---- prevents React 16 error boundary warning\r\n```\r\n\r\n**Please provide your exact Jest configuration and mention your Jest, node, yarn/npm version and operating system.**\r\n\r\n```\r\njest@21.2.1\r\nreact@16.0.0\r\nreact-dom@16.0.0\r\n```\r\n\r\n**See also**\r\n\r\n- https://github.com/facebook/react/issues/11083\r\n- https://github.com/facebook/react/issues/10474#issuecomment-334164834\r\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11101",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11101/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11101/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11101/events",
        "html_url": "https://github.com/facebook/react/issues/11101",
        "id": 262961656,
        "number": 11101,
        "title": "Type Fiber by tag as disjoint union",
        "user": {
            "login": "gaearon",
            "id": 810438,
            "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gaearon",
            "html_url": "https://github.com/gaearon",
            "followers_url": "https://api.github.com/users/gaearon/followers",
            "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
            "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
            "organizations_url": "https://api.github.com/users/gaearon/orgs",
            "repos_url": "https://api.github.com/users/gaearon/repos",
            "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gaearon/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 739761016,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Reconciler",
                "name": "Component: Reconciler",
                "color": "f9a798",
                "default": false
            },
            {
                "id": 40929153,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement",
                "name": "Type: Enhancement",
                "color": "84b6eb",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2017-10-04T23:26:51Z",
        "updated_at": "2017-11-03T15:18:11Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "@sebmarkbage tried this in https://github.com/facebook/react/pull/8545 but Flow couldn't handle it well.\r\nMight be worth trying again someday.",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11102",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11102/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11102/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11102/events",
        "html_url": "https://github.com/facebook/react/issues/11102",
        "id": 262970397,
        "number": 11102,
        "title": "Make undefined ref message better",
        "user": {
            "login": "gaearon",
            "id": 810438,
            "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gaearon",
            "html_url": "https://github.com/gaearon",
            "followers_url": "https://api.github.com/users/gaearon/followers",
            "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
            "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
            "organizations_url": "https://api.github.com/users/gaearon/orgs",
            "repos_url": "https://api.github.com/users/gaearon/repos",
            "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gaearon/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 139653724,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Core%20Utilities",
                "name": "Component: Core Utilities",
                "color": "c5def5",
                "default": false
            },
            {
                "id": 40929153,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement",
                "name": "Type: Enhancement",
                "color": "84b6eb",
                "default": false
            },
            {
                "id": 725156255,
                "url": "https://api.github.com/repos/facebook/react/labels/good%20first%20issue%20(taken)",
                "name": "good first issue (taken)",
                "color": "b60205",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 7,
        "created_at": "2017-10-05T00:21:13Z",
        "updated_at": "2017-12-06T03:42:06Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "As reported in https://blog.discordapp.com/lessons-from-migrating-a-large-codebase-to-react-16-e60e49102aa6, it could've been clearer. ",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11115",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11115/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11115/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11115/events",
        "html_url": "https://github.com/facebook/react/issues/11115",
        "id": 263152967,
        "number": 11115,
        "title": "How to wrap events in React 16",
        "user": {
            "login": "tolmasky",
            "id": 23753,
            "avatar_url": "https://avatars2.githubusercontent.com/u/23753?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/tolmasky",
            "html_url": "https://github.com/tolmasky",
            "followers_url": "https://api.github.com/users/tolmasky/followers",
            "following_url": "https://api.github.com/users/tolmasky/following{/other_user}",
            "gists_url": "https://api.github.com/users/tolmasky/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/tolmasky/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/tolmasky/subscriptions",
            "organizations_url": "https://api.github.com/users/tolmasky/orgs",
            "repos_url": "https://api.github.com/users/tolmasky/repos",
            "events_url": "https://api.github.com/users/tolmasky/events{/privacy}",
            "received_events_url": "https://api.github.com/users/tolmasky/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 739761016,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Reconciler",
                "name": "Component: Reconciler",
                "color": "f9a798",
                "default": false
            },
            {
                "id": 710375792,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
                "name": "Type: Discussion",
                "color": "fef2c0",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 8,
        "created_at": "2017-10-05T14:46:18Z",
        "updated_at": "2017-11-03T15:24:54Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "Per the discussion from React 16 RC, [I was asked to open a separate issue](https://github.com/facebook/react/issues/10294#issuecomment-319475548) regarding opening up the event system in React. We currently use: \r\n\r\n```javascript\r\nrequire(\"react-dom/lib/EventPluginUtils\").executeDispatchesInOrder\r\n```\r\n\r\nBut this disappeared in React 16, which is blocking our ability to upgrade to it.\r\n\r\nBasically we grab `executeDispatchesInOrder` in order to wrap it so a certain piece of code can fire afterward. I was asked [here](https://github.com/facebook/react/issues/10294#issuecomment-319480224) why we don't just wrap `addEventListener` instead, and at least at the time, I believe my experiments showed that this didn't work because React seemed to firing its internal synthetic events at a later time (possibly batching them? I don't know). If there is a new hacky way to do this same thing, I'm happy to do that and punt on this question.\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nDepends, certainly used to work, so in that sense a bug, but would require API creation perhaps, so maybe a feature?\r\n\r\n**What is the current behavior?**\r\nNo access to event firing.\r\n\r\n**What is the expected behavior?**\r\nSome way to inject code to fire after events fire.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact 16, solution existed in React 15 and down.\r\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11131",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11131/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11131/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11131/events",
        "html_url": "https://github.com/facebook/react/issues/11131",
        "id": 263410713,
        "number": 11131,
        "title": "DOM Test Fixtures: Add caveats for IE9 range inputs (and other unsupported things)",
        "user": {
            "login": "nhunzaker",
            "id": 590904,
            "avatar_url": "https://avatars3.githubusercontent.com/u/590904?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nhunzaker",
            "html_url": "https://github.com/nhunzaker",
            "followers_url": "https://api.github.com/users/nhunzaker/followers",
            "following_url": "https://api.github.com/users/nhunzaker/following{/other_user}",
            "gists_url": "https://api.github.com/users/nhunzaker/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nhunzaker/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nhunzaker/subscriptions",
            "organizations_url": "https://api.github.com/users/nhunzaker/orgs",
            "repos_url": "https://api.github.com/users/nhunzaker/repos",
            "events_url": "https://api.github.com/users/nhunzaker/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nhunzaker/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 71502270,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Build%20Infrastructure",
                "name": "Component: Build Infrastructure",
                "color": "f9d0c4",
                "default": false
            },
            {
                "id": 40929153,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement",
                "name": "Type: Enhancement",
                "color": "84b6eb",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": {
            "login": "nhunzaker",
            "id": 590904,
            "avatar_url": "https://avatars3.githubusercontent.com/u/590904?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nhunzaker",
            "html_url": "https://github.com/nhunzaker",
            "followers_url": "https://api.github.com/users/nhunzaker/followers",
            "following_url": "https://api.github.com/users/nhunzaker/following{/other_user}",
            "gists_url": "https://api.github.com/users/nhunzaker/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nhunzaker/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nhunzaker/subscriptions",
            "organizations_url": "https://api.github.com/users/nhunzaker/orgs",
            "repos_url": "https://api.github.com/users/nhunzaker/repos",
            "events_url": "https://api.github.com/users/nhunzaker/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nhunzaker/received_events",
            "type": "User",
            "site_admin": false
        },
        "assignees": [
            {
                "login": "nhunzaker",
                "id": 590904,
                "avatar_url": "https://avatars3.githubusercontent.com/u/590904?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/nhunzaker",
                "html_url": "https://github.com/nhunzaker",
                "followers_url": "https://api.github.com/users/nhunzaker/followers",
                "following_url": "https://api.github.com/users/nhunzaker/following{/other_user}",
                "gists_url": "https://api.github.com/users/nhunzaker/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/nhunzaker/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nhunzaker/subscriptions",
                "organizations_url": "https://api.github.com/users/nhunzaker/orgs",
                "repos_url": "https://api.github.com/users/nhunzaker/repos",
                "events_url": "https://api.github.com/users/nhunzaker/events{/privacy}",
                "received_events_url": "https://api.github.com/users/nhunzaker/received_events",
                "type": "User",
                "site_admin": false
            }
        ],
        "milestone": null,
        "comments": 6,
        "created_at": "2017-10-06T11:07:02Z",
        "updated_at": "2017-10-11T09:51:21Z",
        "closed_at": null,
        "author_association": "COLLABORATOR",
        "body": "It can be confusing to recall that the range input type is not supported in IE9, invalidating a few of our test cases. For example:\r\n\r\n<img width=\"924\" alt=\"screen shot 2017-10-06 at 7 03 18 am\" src=\"https://user-images.githubusercontent.com/590904/31275269-97e687ac-aa64-11e7-97fb-e430e7dfc369.png\">\r\n\r\nThis test case verifies that changing a range slider with arrow keys works as expected, however it looks like a standard input in IE9. If we plan to make these test fixtures more public, I wonder if it would be worth adding some caveat language or marking a test as invalid for a certain browser.\r\n\r\nMaybe this would be annoying, but I thought it might be nice to collect the opinion of others.",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11171",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11171/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11171/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11171/events",
        "html_url": "https://github.com/facebook/react/issues/11171",
        "id": 264145756,
        "number": 11171,
        "title": "Should React use requestAnimationFrame by default?",
        "user": {
            "login": "dakom",
            "id": 6406986,
            "avatar_url": "https://avatars3.githubusercontent.com/u/6406986?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dakom",
            "html_url": "https://github.com/dakom",
            "followers_url": "https://api.github.com/users/dakom/followers",
            "following_url": "https://api.github.com/users/dakom/following{/other_user}",
            "gists_url": "https://api.github.com/users/dakom/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dakom/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dakom/subscriptions",
            "organizations_url": "https://api.github.com/users/dakom/orgs",
            "repos_url": "https://api.github.com/users/dakom/repos",
            "events_url": "https://api.github.com/users/dakom/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dakom/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 739761016,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Reconciler",
                "name": "Component: Reconciler",
                "color": "f9a798",
                "default": false
            },
            {
                "id": 710375792,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
                "name": "Type: Discussion",
                "color": "fef2c0",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 32,
        "created_at": "2017-10-10T08:47:25Z",
        "updated_at": "2018-01-17T14:58:04Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "Consider the following sample code: (pasted [here too](https://gist.github.com/dakom/e68503e59c7a73c3bc926b7e8ae65a07))\r\n\r\n```\r\nclass extends React.Component {\r\n    private canRender: boolean = false;\r\n    private latestData: any;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        let nJobs = 0;\r\n        let lastRenderTime: number;\r\n        props.someObservableThing.listen(data => {\r\n            nJobs++;\r\n\r\n            this.latestData = data;\r\n\r\n            if (this.canRender) {\r\n                const now = performance.now();\r\n                this.canRender = false;\r\n                this.setState({\r\n                    data: this.latestData,\r\n                    jobsPerRender: nJobs,\r\n                    fps: (lastRenderTime === undefined) ? 0 : 1000 / (now - lastRenderTime)\r\n                });\r\n                nJobs = 0;\r\n                lastRenderTime = now;\r\n            }\r\n        });\r\n\r\n        this.state = {};\r\n    }\r\n\r\n    /* Lifecycle */\r\n    componentDidMount() {\r\n        this.canRender = true;\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.canRender = true;\r\n    }\r\n\r\n    render() {\r\n        outputStats(this.state);\r\n        return this.state.data === undefined ? null : <View {...this.state.data} />\r\n    }\r\n}\r\n```\r\n\r\nWhen outputStats is hit - I'm getting framerates of like 2000fps. In other words `requestAnimationFrame` does _not_ seem to be a limiter for react itself.\r\n\r\nIs this correct? \r\n\r\n(as a slightly separate topic- if that is true, for animation things do you think it would be good to simply wrap the `if (this.canRender) {}` block in a `requestAnimationFrame()`? I guess that's not really a React question though since the observableThing could also be capped via ticks...)\r\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11211",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11211/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11211/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11211/events",
        "html_url": "https://github.com/facebook/react/issues/11211",
        "id": 265143974,
        "number": 11211,
        "title": "Use the native `beforeinput` event if it's supported",
        "user": {
            "login": "ianstormtaylor",
            "id": 311752,
            "avatar_url": "https://avatars0.githubusercontent.com/u/311752?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ianstormtaylor",
            "html_url": "https://github.com/ianstormtaylor",
            "followers_url": "https://api.github.com/users/ianstormtaylor/followers",
            "following_url": "https://api.github.com/users/ianstormtaylor/following{/other_user}",
            "gists_url": "https://api.github.com/users/ianstormtaylor/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ianstormtaylor/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ianstormtaylor/subscriptions",
            "organizations_url": "https://api.github.com/users/ianstormtaylor/orgs",
            "repos_url": "https://api.github.com/users/ianstormtaylor/repos",
            "events_url": "https://api.github.com/users/ianstormtaylor/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ianstormtaylor/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 121709921,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 5,
        "created_at": "2017-10-13T01:45:04Z",
        "updated_at": "2018-01-09T18:28:22Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nImprovement.\r\n\r\n**What is the current behavior?**\r\n\r\nRight now, the synthetic `onBeforeInput` event is being created based on two other events:\r\n\r\n- `textInput` when possible\u2014which is in Webkit.\r\n- `keypress` as a fallback.\r\n\r\nBut these days in Chrome and Safari the spec'd `beforeinput` event is available and actually fires. And when it does, it includes other [spec'd properties](https://developer.mozilla.org/en-US/docs/Web/API/InputEvent) which can be extremely helpful:\r\n\r\n- `inputType` tells you whether the event is inserting text, replacing text, inserting a line break, etc.\r\n- `getTargetRanges()` tells you where the input is taking place in the DOM.\r\n\r\nRight now this information isn't exposed, because even if the browser supports `beforeinput`, it's not being checked for.\r\n\r\n**What is the expected behavior?**\r\n\r\nInstead React should treat `textInput` as a slightly-preferred fallback for native `beforeinput` support, but add `beforeinput` as the true goal. So we'd end up with a fallback stack of:\r\n\r\n- `beforeinput`\r\n- `textInput`\r\n- `keypress`\r\n\r\nWhich guarantees that the `nativeEvent` will always be the most spec'd and have the most relevant information associated with it.\r\n\r\n---\r\n\r\nThe `beforeinput` event's extra properties are critical in `contenteditable` situations, when you want to prevent the default browser behavior from firing but perform the logic on an internal model instead. (I'm looking to do this for [Slate](https://github.com/ianstormtaylor/slate).) \r\n\r\nWithout that extra information you have to fallback to hackier behavior\u2014allowing the event to occur, trying to parse the DOM for what the change was, then re-rendering to remove it, etc. I want to avoid this on the more modern browsers, because it results in reduced performance.\r\n\r\n---\r\n\r\nThere is another situation that this fixes, which is that spellcheck right now doesn't trigger React's `onBeforeInput` handler, even though modern browsers fire the `beforeinput` event, because it's not being listened for right now.\r\n\r\n\r\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11231",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11231/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11231/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11231/events",
        "html_url": "https://github.com/facebook/react/issues/11231",
        "id": 265669301,
        "number": 11231,
        "title": "keyup event not fired on Firefox for Android",
        "user": {
            "login": "nicofrand",
            "id": 3419050,
            "avatar_url": "https://avatars3.githubusercontent.com/u/3419050?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nicofrand",
            "html_url": "https://github.com/nicofrand",
            "followers_url": "https://api.github.com/users/nicofrand/followers",
            "following_url": "https://api.github.com/users/nicofrand/following{/other_user}",
            "gists_url": "https://api.github.com/users/nicofrand/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nicofrand/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nicofrand/subscriptions",
            "organizations_url": "https://api.github.com/users/nicofrand/orgs",
            "repos_url": "https://api.github.com/users/nicofrand/repos",
            "events_url": "https://api.github.com/users/nicofrand/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nicofrand/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 710722093,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
                "name": "Type: Needs Investigation",
                "color": "fbca04",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2017-10-16T07:21:36Z",
        "updated_at": "2017-10-31T08:15:28Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nA bug.\r\n\r\n**What is the current behavior?**\r\n\r\nThe keyup event is not fired. When using vanilla JS, there is no issue (https://codepen.io/anon/pen/LzggQW).\r\n\r\n**STR:**\r\n\r\n1. On an Android smartphone, ensure both autocompletion and autocorrect are enabled\r\n0. Open https://codepen.io/anon/pen/xXyaLe in Firefox for Android (it works on desktop and with Chrome for Android)\r\n0. Type any letter in the input field\r\n\r\n**What is the expected behavior?**\r\n\r\nFor each alphanumeric char typed an alert should be displayed.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n* Version used : React 15.6.1\r\n* Browser : Firefox for Android (56+)\r\n* Did this work in previous versions of React : I don't know\r\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11290",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11290/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11290/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11290/events",
        "html_url": "https://github.com/facebook/react/issues/11290",
        "id": 266972664,
        "number": 11290,
        "title": "Branch on tag before doing type checking",
        "user": {
            "login": "clemmy",
            "id": 3696934,
            "avatar_url": "https://avatars0.githubusercontent.com/u/3696934?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/clemmy",
            "html_url": "https://github.com/clemmy",
            "followers_url": "https://api.github.com/users/clemmy/followers",
            "following_url": "https://api.github.com/users/clemmy/following{/other_user}",
            "gists_url": "https://api.github.com/users/clemmy/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/clemmy/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/clemmy/subscriptions",
            "organizations_url": "https://api.github.com/users/clemmy/orgs",
            "repos_url": "https://api.github.com/users/clemmy/repos",
            "events_url": "https://api.github.com/users/clemmy/events{/privacy}",
            "received_events_url": "https://api.github.com/users/clemmy/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 739761016,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Reconciler",
                "name": "Component: Reconciler",
                "color": "f9a798",
                "default": false
            },
            {
                "id": 40929153,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement",
                "name": "Type: Enhancement",
                "color": "84b6eb",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": {
            "login": "clemmy",
            "id": 3696934,
            "avatar_url": "https://avatars0.githubusercontent.com/u/3696934?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/clemmy",
            "html_url": "https://github.com/clemmy",
            "followers_url": "https://api.github.com/users/clemmy/followers",
            "following_url": "https://api.github.com/users/clemmy/following{/other_user}",
            "gists_url": "https://api.github.com/users/clemmy/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/clemmy/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/clemmy/subscriptions",
            "organizations_url": "https://api.github.com/users/clemmy/orgs",
            "repos_url": "https://api.github.com/users/clemmy/repos",
            "events_url": "https://api.github.com/users/clemmy/events{/privacy}",
            "received_events_url": "https://api.github.com/users/clemmy/received_events",
            "type": "User",
            "site_admin": false
        },
        "assignees": [
            {
                "login": "clemmy",
                "id": 3696934,
                "avatar_url": "https://avatars0.githubusercontent.com/u/3696934?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/clemmy",
                "html_url": "https://github.com/clemmy",
                "followers_url": "https://api.github.com/users/clemmy/followers",
                "following_url": "https://api.github.com/users/clemmy/following{/other_user}",
                "gists_url": "https://api.github.com/users/clemmy/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/clemmy/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clemmy/subscriptions",
                "organizations_url": "https://api.github.com/users/clemmy/orgs",
                "repos_url": "https://api.github.com/users/clemmy/repos",
                "events_url": "https://api.github.com/users/clemmy/events{/privacy}",
                "received_events_url": "https://api.github.com/users/clemmy/received_events",
                "type": "User",
                "site_admin": false
            }
        ],
        "milestone": null,
        "comments": 0,
        "created_at": "2017-10-19T20:10:16Z",
        "updated_at": "2017-11-03T15:25:42Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "body": "Follow up for https://github.com/facebook/react/pull/10783/files/ab1a58ec0675b34d6eb15854c4b573f2abebe489#r145577198\r\n\r\n>  This is neat but it also means that we're sometimes comparing strings to numbers/symbols. That could potentially deopt the type hints in this function. It might actually be better to check the child.tag to ensure that it is a HostComponent or Fragment and compare the type in separate branches.\r\n>\r\n> In fact, that might already be a bug incase we ever add strings to fiber.type on other fibers than HostComponent.\r\n\r\nBy checking for tags before we do type comparison branches, we can ensure we don't have possible bugs from this, as well as optimize type hints by having monomorphic functions.",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11299",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11299/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11299/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11299/events",
        "html_url": "https://github.com/facebook/react/issues/11299",
        "id": 267200825,
        "number": 11299,
        "title": "Express more tests via public API",
        "user": {
            "login": "gaearon",
            "id": 810438,
            "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gaearon",
            "html_url": "https://github.com/gaearon",
            "followers_url": "https://api.github.com/users/gaearon/followers",
            "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
            "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
            "organizations_url": "https://api.github.com/users/gaearon/orgs",
            "repos_url": "https://api.github.com/users/gaearon/repos",
            "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gaearon/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 588833528,
                "url": "https://api.github.com/repos/facebook/react/labels/Difficulty:%20medium",
                "name": "Difficulty: medium",
                "color": "fbca04",
                "default": false
            },
            {
                "id": 725156255,
                "url": "https://api.github.com/repos/facebook/react/labels/good%20first%20issue%20(taken)",
                "name": "good first issue (taken)",
                "color": "b60205",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 131,
        "created_at": "2017-10-20T14:49:07Z",
        "updated_at": "2018-01-04T16:23:37Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "This is a great contribution opportunity.\r\nWe need to rewrite more unit tests in terms of public API.\r\n\r\nThis means that they can only import npm entry points like `react`, `react-dom`, `react-dom/test-utils`, `react-test-renderer`, etc, but not internal modules like `SyntheticEvent` or `ReactDOMComponentTree`. The \u201cbad\u201d requires are already marked with a TODO in tests so you won\u2019t miss them.\r\n\r\nTo help with this:\r\n\r\n1. Find **`// TODO: can we express this test with only public API?`** in the unclaimed test files below.\r\n2. Comment in this issue if you want to take a particular unit test file, with its name.\r\n3. Submit a PR that rewrites the test to use public APIs instead.\r\n\r\nStep 3 requires some thinking. You can use previous examples where we rewrote tests with public API for inspiration. For example:\r\n\r\n* https://github.com/facebook/react/pull/10429\r\n* https://github.com/facebook/react/pull/10281\r\n* https://github.com/facebook/react/pull/9080\r\n* https://github.com/facebook/react/pull/8148\r\n\r\nGenerally, you need to think about how the behavior you\u2019re testing actually reproduces in a React app, and then test for that. In rare cases it may involve exposing some API as public which we\u2019ll need to discuss separately, so don\u2019t hesitate to start a discussion! If you can\u2019t figure out how to rewrite some particular test with a public API, comment here and we can brainstorm.\r\n\r\nHere is the full list of tests that need to change. Some of them may be simple one-liner changes, some may involve a bit of a rewrite, some may require rewriting from scratch. Some may even be impossible, but research leading to that conclusion is still very valuable and we\u2019d love to know that.\r\n\r\nTry them and let us know:\r\n\r\n**Update: all tests are taken now. Subscribe to this issue! They might free up in the future if somebody doesn\u2019t have the time to finish the work. We\u2019ll comment if some test becomes available to try again.**\r\n\r\n- [ ] `ReactBrowserEventEmitter-test.js` (see https://github.com/facebook/react/issues/11299#issuecomment-346915238)\r\n- [ ] `getNodeForCharacterOffset-test.js` (taken by @accordeiro)\r\n- [ ] `BeforeInputEventPlugin-test.js` + `FallbackCompositionState-test.js` (taken by @GordyD)\r\n- [ ] `ReactErrorUtils-test.js` (taken by @reznord)\r\n- [x] `validateDOMNesting-test.js` (taken by @anushreesubramani) https://github.com/facebook/react/pull/11742\r\n- [x] <s>`ReactIncrementalPerf-test.js` (taken by @dphurley)</s> https://github.com/facebook/react/pull/11724\r\n- [x] <s>`SelectEventPlugin-test.js` (taken by @skiritsis)</s> https://github.com/facebook/react/issues/11299\r\n- [x] <s>`ReactTreeTraversal-test.js` (taken by @timjacobi) </s> https://github.com/facebook/react/pull/11664\r\n- [x] <s>`SyntheticKeyboardEvent-test.js` + `getEventCharCode-test.js` (taken by @aarboleda1)</s>\r\n- [x] <s>`escapeTextContentForBrowser-test.js` (taken by @jeremenichelli)</s> https://github.com/facebook/react/pull/11331\r\n- [x] <s>`inputValueTracking-test.js` \r\n- [x] <s>`quoteAttributeValueForBrowser-test.js` (taken by @jeremenichelli)</s> https://github.com/facebook/react/pull/11331\r\n- [x] <s>`ReactDOMComponent-test.js` (taken by @AudyOdi)</s> https://github.com/facebook/react/pull/11337\r\n- [x] <s>`ReactDOMComponentTree-test.js` (taken by @GordyD)</s> https://github.com/facebook/react/pull/11383\r\n- [x] <s>`ReactDOMEventListener-test.js` (taken by @enapupe)</s> https://github.com/facebook/react/pull/11327\r\n- [x] <s>`ReactDOMInput-test.js` (taken by @SadPandaBear)</s> https://github.com/facebook/react/pull/11309\r\n- [x] <s>`ReactDOMServerIntegration-test.js` (taken by @minerado)</s>\r\n- [x] <s>`setInnerHTML-test.js` (taken by @silvestrijonathan)</s> https://github.com/facebook/react/pull/11385\r\nhttps://github.com/facebook/react/pull/11631\r\n- [x] <s>`getEventKey-test.js` (taken by @mjw56)</s> https://github.com/facebook/react/pull/11317\r\n- [x] <s>`SyntheticClipboardEvent-test.js` (taken by @smaniotto)</s> https://github.com/facebook/react/pull/11365\r\n- [x] <s>`SyntheticEvent-test.js` (taken by @timjacobi)</s> https://github.com/facebook/react/pull/11525\r\n- [x] <s>`SyntheticWheelEvent-test.js` (taken by @douglasgimli)</s> https://github.com/facebook/react/pull/11367\r\n- [x] <s>`ChangeEventPlugin-test.js` (taken by @Ethan-Arrowood)</s> https://github.com/facebook/react/pull/11333\r\n- [x] <s>`EnterLeaveEventPlugin-test.js` (taken by @accordeiro)</s> https://github.com/facebook/react/pull/11316\r\n- [x] <s>`ReactCoroutine-test.js` (taken by @jstejada)</s>\r\n- [x] <s>`ReactFiberHostContext-test.js` (taken by @adsonpleal)</s>\r\n\r\n----\r\n\r\n**First-time contributor? Refer to our [contribution instructions](https://reactjs.org/docs/how-to-contribute.html).**\r\n\r\n**Not clear how to fix a specific test? Comment with what you tried, and we can brainstorm.**\r\n\r\n**If you gave up on some test, please post your findings in a comment so we can decide what to do next. It\u2019s fine if you just didn\u2019t find the time or couldn\u2019t figure it out\u2014we can try to help, and maybe somebody else can pick it up later.**\r\n\r\n----",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11306",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11306/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11306/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11306/events",
        "html_url": "https://github.com/facebook/react/issues/11306",
        "id": 267311280,
        "number": 11306,
        "title": "Add `code` property to `SyntheticKeyboardEvent`",
        "user": {
            "login": "jacobcarpenter",
            "id": 194333,
            "avatar_url": "https://avatars3.githubusercontent.com/u/194333?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jacobcarpenter",
            "html_url": "https://github.com/jacobcarpenter",
            "followers_url": "https://api.github.com/users/jacobcarpenter/followers",
            "following_url": "https://api.github.com/users/jacobcarpenter/following{/other_user}",
            "gists_url": "https://api.github.com/users/jacobcarpenter/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jacobcarpenter/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jacobcarpenter/subscriptions",
            "organizations_url": "https://api.github.com/users/jacobcarpenter/orgs",
            "repos_url": "https://api.github.com/users/jacobcarpenter/repos",
            "events_url": "https://api.github.com/users/jacobcarpenter/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jacobcarpenter/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 121709921,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2017-10-20T21:34:42Z",
        "updated_at": "2018-03-17T12:10:21Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nImprovement\r\n\r\n**What is the current behavior?**\r\n\r\n[`SyntheticKeyboardEvent`](https://github.com/facebook/react/blob/e779c39dfeb41ae8f6611dc4f9830d1b1ac64f9b/packages/react-dom/src/events/SyntheticKeyboardEvent.js) does not currently support the `code` property.\r\n\r\n`code` ([MDN](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/code)) is nice to have when you want to write key-specific handling\u2014rather than input-specific (dependent on layout and modifier keys) handling.\r\n\r\n**What is the expected behavior?**\r\n\r\n`SyntheticKeyboardEvent` already exposes a `keyCode` property. It should have a `code` property as well.\r\n\r\nCurrently, if you want to use the `keyboardEvent`'s  `code`, you must access it through `SyntheticKeyboardEvent`'s `nativeEvent`.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nAffects React 16 and earlier (I assume).\r\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11326",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11326/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11326/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11326/events",
        "html_url": "https://github.com/facebook/react/issues/11326",
        "id": 267488292,
        "number": 11326,
        "title": "Release a tool for statistical perf analysis (a replacement for ReactPerf)",
        "user": {
            "login": "Pajn",
            "id": 817422,
            "avatar_url": "https://avatars1.githubusercontent.com/u/817422?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Pajn",
            "html_url": "https://github.com/Pajn",
            "followers_url": "https://api.github.com/users/Pajn/followers",
            "following_url": "https://api.github.com/users/Pajn/following{/other_user}",
            "gists_url": "https://api.github.com/users/Pajn/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Pajn/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Pajn/subscriptions",
            "organizations_url": "https://api.github.com/users/Pajn/orgs",
            "repos_url": "https://api.github.com/users/Pajn/repos",
            "events_url": "https://api.github.com/users/Pajn/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Pajn/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 710573595,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
                "name": "Component: Developer Tools",
                "color": "fbca04",
                "default": false
            },
            {
                "id": 121709921,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 3,
        "created_at": "2017-10-22T18:42:36Z",
        "updated_at": "2017-12-10T20:47:37Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nA feature\r\n\r\n**What is the current behavior?**\r\nN/A\r\n\r\n**What is the expected behavior?**\r\nIt's great that React 16 integrates with the timeline in browsers dev tools and that is very helpful in cases where you are trying to fix the performance of a specific thing. However I do miss the perf tool from previous versions and could not find any issue tracking a re-implementation of such a tool.\r\n\r\nWhat was great in the perf tool that is not covered as well with timeline integration?\r\n - Easily see which components render needlessly and therefore should be easily eliminated with sCU (and what impact it will give)\r\n - Easily see the collective render time of a component. I might for example have a component that renders very fast but which have very many instances and thus contribute to a significant render time anyway.\r\n - Give an overview of which components are slow by themselves and which are fast by themselves but render slow components. The flamegraph shows this, but I find it to specific in some scenarios with too much detail that can distract.\r\n\r\nBasically the wasted, exclusive and inclusive tables. The DOM table I feel is much better represented by the timeline integration.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n16, yes the perf addon in 15 was good.",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11328",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11328/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11328/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11328/events",
        "html_url": "https://github.com/facebook/react/issues/11328",
        "id": 267500171,
        "number": 11328,
        "title": "Get React to full Flow coverage",
        "user": {
            "login": "VladBlow",
            "id": 11356585,
            "avatar_url": "https://avatars2.githubusercontent.com/u/11356585?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/VladBlow",
            "html_url": "https://github.com/VladBlow",
            "followers_url": "https://api.github.com/users/VladBlow/followers",
            "following_url": "https://api.github.com/users/VladBlow/following{/other_user}",
            "gists_url": "https://api.github.com/users/VladBlow/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/VladBlow/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/VladBlow/subscriptions",
            "organizations_url": "https://api.github.com/users/VladBlow/orgs",
            "repos_url": "https://api.github.com/users/VladBlow/repos",
            "events_url": "https://api.github.com/users/VladBlow/events{/privacy}",
            "received_events_url": "https://api.github.com/users/VladBlow/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 71502270,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Build%20Infrastructure",
                "name": "Component: Build Infrastructure",
                "color": "f9d0c4",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 10,
        "created_at": "2017-10-22T21:26:25Z",
        "updated_at": "2017-10-24T13:09:56Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "body": "After our dialog with @gaeron in [#11323](https://github.com/facebook/react/pull/11323) I want to update typings for all package React, but I think I need help by community.",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11330",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11330/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11330/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11330/events",
        "html_url": "https://github.com/facebook/react/issues/11330",
        "id": 267503579,
        "number": 11330,
        "title": "Consider Publishing External requestIdleCallback Polyfill",
        "user": {
            "login": "sebmarkbage",
            "id": 63648,
            "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sebmarkbage",
            "html_url": "https://github.com/sebmarkbage",
            "followers_url": "https://api.github.com/users/sebmarkbage/followers",
            "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
            "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
            "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
            "repos_url": "https://api.github.com/users/sebmarkbage/repos",
            "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 71502270,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Build%20Infrastructure",
                "name": "Component: Build Infrastructure",
                "color": "f9d0c4",
                "default": false
            },
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": {
            "login": "aweary",
            "id": 6886061,
            "avatar_url": "https://avatars2.githubusercontent.com/u/6886061?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/aweary",
            "html_url": "https://github.com/aweary",
            "followers_url": "https://api.github.com/users/aweary/followers",
            "following_url": "https://api.github.com/users/aweary/following{/other_user}",
            "gists_url": "https://api.github.com/users/aweary/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/aweary/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/aweary/subscriptions",
            "organizations_url": "https://api.github.com/users/aweary/orgs",
            "repos_url": "https://api.github.com/users/aweary/repos",
            "events_url": "https://api.github.com/users/aweary/events{/privacy}",
            "received_events_url": "https://api.github.com/users/aweary/received_events",
            "type": "User",
            "site_admin": false
        },
        "assignees": [
            {
                "login": "aweary",
                "id": 6886061,
                "avatar_url": "https://avatars2.githubusercontent.com/u/6886061?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/aweary",
                "html_url": "https://github.com/aweary",
                "followers_url": "https://api.github.com/users/aweary/followers",
                "following_url": "https://api.github.com/users/aweary/following{/other_user}",
                "gists_url": "https://api.github.com/users/aweary/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/aweary/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aweary/subscriptions",
                "organizations_url": "https://api.github.com/users/aweary/orgs",
                "repos_url": "https://api.github.com/users/aweary/repos",
                "events_url": "https://api.github.com/users/aweary/events{/privacy}",
                "received_events_url": "https://api.github.com/users/aweary/received_events",
                "type": "User",
                "site_admin": false
            }
        ],
        "milestone": null,
        "comments": 2,
        "created_at": "2017-10-22T22:16:59Z",
        "updated_at": "2018-02-05T07:42:40Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "We require a high fidelity requestIdleCallback polyfill and pretty much all of them out there are not. We can always fallback to our internal fallback but that still means that others have to ship their own, which isn't cooperating with ours. (Even at FB we have two.)\r\n\r\nOur built-in one is not yet implementing the `timeout` option but since we want to start using it, we probably should.\r\n\r\nThis can become even more interesting if a [priority queue option](https://github.com/w3c/requestidlecallback/issues/68) lands (if it is sufficient for us), since we can start polyfilling that option even in native requestIdleCallback implementations.",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11347",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11347/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11347/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11347/events",
        "html_url": "https://github.com/facebook/react/issues/11347",
        "id": 267902244,
        "number": 11347,
        "title": "RFC: Plan for custom element attributes/properties in React 17",
        "user": {
            "login": "robdodson",
            "id": 1066253,
            "avatar_url": "https://avatars0.githubusercontent.com/u/1066253?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/robdodson",
            "html_url": "https://github.com/robdodson",
            "followers_url": "https://api.github.com/users/robdodson/followers",
            "following_url": "https://api.github.com/users/robdodson/following{/other_user}",
            "gists_url": "https://api.github.com/users/robdodson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/robdodson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/robdodson/subscriptions",
            "organizations_url": "https://api.github.com/users/robdodson/orgs",
            "repos_url": "https://api.github.com/users/robdodson/repos",
            "events_url": "https://api.github.com/users/robdodson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/robdodson/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 710375792,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
                "name": "Type: Discussion",
                "color": "fef2c0",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 67,
        "created_at": "2017-10-24T05:28:49Z",
        "updated_at": "2018-02-02T02:02:15Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "This is meant to address #7249. The doc outlines the pros and cons of various approaches React could use to handle attributes and properties on custom elements.\r\n\r\n# TOC/Summary\r\n\r\n- Background\r\n- Proposals\r\n  * Option 1: Only set properties\r\n    + Pros\r\n      - Easy to understand/implement\r\n      - Avoids conflict with future global attributes\r\n      - Takes advantage of custom element \"upgrade\"\r\n      - Custom elements treated like any other React component\r\n    + Cons\r\n      - Possibly a breaking change\r\n      - Need ref to set attribute\r\n      - Not clear how server-side rendering would work\r\n  * Option 2: Properties-if-available\r\n    + Pros\r\n      - Non-breaking change\r\n    + Cons\r\n      - Developers need to understand the heuristic\r\n      - Falling back to attributes may conflict with future globals\r\n  * Option 3: Differentiate properties with a sigil\r\n    + Pros\r\n      - Non-breaking change that developers can opt-in to\r\n      - Similar to how other libraries handle attributes/properties\r\n      - The system is explicit\r\n    + Cons\r\n      - It\u2019s new syntax\r\n      - Not clear how server-side rendering would work\r\n  * Option 4: Add an attributes object\r\n    + Pros\r\n      - The system is explicit\r\n      - Extending syntax may also solve issues with event handling\r\n    + Cons\r\n      - It\u2019s new syntax\r\n      - It may be a breaking change\r\n      - It may be a larger change than any of the previous proposals\r\n  * Option 5: An API for consuming custom elements\r\n    + Pros\r\n      - The system is explicit\r\n      - Non-breaking change\r\n      - Idiomatic to React\r\n    + Cons\r\n      - Could be a lot of work for a complex component\r\n      - May bloat bundle size\r\n      - Config needs to keep pace with the component\r\n\r\n# Background\r\n\r\nWhen React tries to pass data to a custom element it always does so using HTML attributes.\r\n\r\n```jsx\r\n<x-foo bar={baz}> // same as setAttribute('bar', baz)\r\n```\r\n\r\nBecause attributes must be serialized to strings, this approach creates problems when the data being passed is an object or array. In that scenario, we end up with something like:\r\n\r\n```html\r\n<x-foo bar=\"[object Object]\">\r\n```\r\n\r\nThe workaround for this is to use a `ref` to manually set the property.\r\n\r\n```jsx\r\n<x-foo ref={el => el.bar = baz}>\r\n```\r\n\r\nThis workaround feels a bit unnecessary as the majority of custom elements being shipped today are written with libraries which automatically generate JavaScript properties that back all of their exposed attributes. And anyone hand-authoring a vanilla custom element is [encouraged to follow this practice](https://developers.google.com/web/fundamentals/web-components/best-practices#attributes-properties) as well. We'd like to ideally see runtime communication with custom elements in React use JavaScript properties by default.\r\n\r\nThis doc outlines a few proposals for how React could be updated to make this happen.\r\n\r\n# Proposals\r\n\r\n## Option 1: Only set properties\r\n\r\nRather than try to decide if a property or attribute should be set, React could *always* set properties on custom elements. React would **NOT** check to see if the property exists on the element beforehand.\r\n\r\n**Example:**\r\n\r\n```jsx\r\n<x-foo bar={baz}>\r\n```\r\n\r\nThe above code would result in React setting the `.bar` property of the `x-foo` element equal to the value of `baz`.\r\n\r\nFor camelCased property names, React could use the same style it uses today for properties like `tabIndex`.\r\n\r\n```jsx\r\n<x-foo squidInk={pasta}> // sets .squidInk = pasta\r\n```\r\n\r\n### Pros\r\n\r\n#### Easy to understand/implement\r\n\r\nThis model is simple, explicit, and dovetails with React\u2019s [\"JavaScript-centric API to the DOM\"](https://reactjs.org/blog/2017/09/08/dom-attributes-in-react-16.html#why-are-we-changing-this).\r\n\r\nAny element created with libraries like Polymer or Skate will automatically generate properties to back their exposed attributes. These elements should all \"just work\" with the above approach. Developers hand-authoring vanilla components are encouraged to [back attributes with properties](https://developers.google.com/web/fundamentals/web-components/best-practices#always-accept-primitive-data-strings-numbers-booleans-as-either-attributes--or-properties) as that mirrors how *modern* (i.e. not oddballs like `<input>`) HTML5 elements (`<video>`, `<audio>`, etc.) have been implemented.\r\n\r\n#### Avoids conflict with future global attributes\r\n\r\nWhen React sets an attribute on a custom element there\u2019s always the risk that a future version of HTML will ship a similarly named attribute and break things. This concern was [discussed with spec authors](https://github.com/w3c/webcomponents/issues/654) but there is no clear solution to the problem. Avoiding attributes entirely (except when a developer explicitly sets one using `ref`) may sidestep this issue until the browsers come up with a better solution.\r\n\r\n#### Takes advantage of custom element \"upgrade\"\r\n\r\nCustom elements can be lazily [upgraded](https://developers.google.com/web/fundamentals/web-components/customelements#upgrades) on the page and some PRPL patterns rely on this technique. During the upgrade process, a custom element can access the properties passed to it by React\u2014even if those properties were set before the definition loaded\u2014and use them to render initial state.\r\n\r\n#### Custom elements treated like any other React component\r\n\r\nWhen React components pass data to one another they already use properties. This would just make custom elements behave the same way.\r\n\r\n### Cons\r\n\r\n#### Possibly a breaking change\r\n\r\nIf a developer has been hand-authoring vanilla custom elements which only have an attributes API, then they will need to update their code or their app will break. The fix would be to use a `ref` to set the attribute (explained below).\r\n\r\n#### Need ref to set attribute\r\n\r\nBy changing the behavior so properties are preferred, it means developers will need to use a `ref` in order to explicitly set an attribute on a custom element.\r\n\r\n```jsx\r\n<custom-element ref={el => el.setAttribute('my-attr', val)} />\r\n```\r\n\r\nThis is just a reversal of the current behavior where developers need a `ref` in order to set a property. Since developers should rarely need to set attributes on custom elements, this seems like a reasonable trade-off.\r\n\r\n#### Not clear how server-side rendering would work\r\n\r\nIt's not clear how this model would map to server-side rendering custom elements. React could assume that the properties map to similarly named attributes and attempt to set those on the server, but this is far from bulletproof and would possibly require a heuristic for things like camelCased properties -> dash-cased attributes.\r\n\r\n## Option 2: Properties-if-available\r\n\r\nAt runtime React could attempt to detect if a property is present on a custom element. If the property is present React will use it, otherwise it will fallback to setting an attribute. This is the model Preact uses to deal with custom elements.\r\n\r\n**Pseudocode implementation:**\r\n\r\n```js\r\nif (propName in element) {\r\n  element[propName] = value;\r\n} else {\r\n  element.setAttribute(propName.toLowerCase(), value);\r\n}\r\n```\r\n\r\n**Possible steps:**\r\n\r\n* If an element has a defined property, React will use it.\r\n\r\n* If an element has an undefined property, and React is trying to pass it primitive data (string/number/boolean), it will use an attribute.\r\n\r\n    * Alternative: Warn and don\u2019t set.\r\n\r\n* If an element has an undefined property, and React is trying to pass it an object/array it will set it as a property. This is because some-attr=\"[object Object]\u201d is not useful.\r\n\r\n    * Alternative: Warn and don\u2019t set.\r\n\r\n* If the element is being rendered on the server, and React is trying to pass it a string/number/boolean, it will use an attribute.\r\n\r\n* If the element is being rendered on the server, and React is trying to pass it a object/array, it will not do anything.\r\n\r\n### Pros\r\n\r\n#### Non-breaking change\r\n\r\nIt is possible to create a custom element that only uses attributes as its interface. This authoring style is **NOT** encouraged, but it may happen regardless. If a custom element author is relying on this behavior then this change would be non-breaking for them.\r\n\r\n### Cons\r\n\r\n#### Developers need to understand the heuristic\r\n\r\nDevelopers might be confused when React sets an attribute instead of a property depending on how they\u2019ve chosen to load their element.\r\n\r\n#### Falling back to attributes may conflict with future globals\r\n\r\nSebastian [raised a concern](https://github.com/facebook/react/issues/10399#issuecomment-320847065) that using `in` to check for the existence of a property on a custom element might accidentally detect a property on the superclass (HTMLElement).\r\n\r\nThere are also other potential conflicts with global attributes [discussed previously](#avoids-conflict-with-future-global-attributes) in this doc.\r\n\r\n## Option 3: Differentiate properties with a sigil\r\n\r\nReact could continue setting attributes on custom elements, but provide a sigil that developers could use to explicitly set properties instead. This is similar to [the approach used by Glimmer.js](https://www.emberjs.com/blog/2017/10/10/glimmer-progress-report.html#toc_component-attributes).\r\n\r\n**Glimmer example:**\r\n\r\n```html\r\n<custom-img @src=\"corgi.jpg\" @hiResSrc=\"corgi@2x.jpg\" width=\"100%\">\r\n```\r\n\r\nIn the above example, the @ sigil indicates that `src` and `hiResSrc` should pass data to the custom element using properties, and `width` should be serialized to an attribute string.\r\n\r\nBecause React components already pass data to one another using properties, there would be no need for them to use the sigil (although it would work if they did, it would just be redundant). Instead, it would primarily be used as an explicit instruction to pass data to a custom element using JavaScript properties.\r\n\r\n*h/t to @developit of Preact for suggesting this approach :)*\r\n\r\n### Pros\r\n\r\n#### Non-breaking change that developers can opt-in to\r\n\r\nAll pre-existing React + custom element apps would continue to work exactly as they have. Developers could choose if they wanted to update their code to use the new sigil style.\r\n\r\n#### Similar to how other libraries handle attributes/properties\r\n\r\nSimilar to Glimmer, both Angular and Vue use modifiers to differentiate between attributes and properties.\r\n\r\n**Vue example:**\r\n\r\n```html\r\n<!-- Vue will serialize `foo` to an attribute string, and set `squid` using a JavaScript property -->\r\n<custom-element :foo=\"bar\u201d :squid.prop=\u201dink\u201d>\r\n```\r\n\r\n**Angular example:**\r\n\r\n```html\r\n<!-- Angular will serialize `foo` to an attribute string, and set `squid` using a JavaScript property -->\r\n<custom-element [attr.foo]=\"bar\u201d [squid]=\u201dink\u201d>\r\n```\r\n\r\n#### The system is explicit\r\n\r\nDevelopers can tell React exactly what they want instead of relying on a heuristic like the [properties-if-available](#option-2--properties-if-available) approach.\r\n\r\n### Cons\r\n\r\n#### It\u2019s new syntax\r\n\r\nDevelopers need to be taught how to use it and it needs to be thoroughly tested to make sure it is backwards compatible.\r\n\r\n#### Not clear how server-side rendering would work\r\n\r\nShould the sigil switch to using a similarly named attribute?\r\n\r\n## Option 4: Add an attributes object\r\n\r\nReact could add additional syntax which lets authors explicitly pass data as attributes. If developers do not use this attributes object, then their data will be passed using JavaScript properties.\r\n\r\n**Example:**\r\n\r\n```jsx\r\nconst bar = 'baz';\r\nconst hello = 'World';\r\nconst width = '100%';\r\nconst ReactElement = <Test\r\n  foo={bar} // uses JavaScript property\r\n  attrs={{ hello, width }} // serialized to attributes\r\n/>;\r\n```\r\n\r\nThis idea was [originally proposed](https://gist.github.com/treshugart/2fb509a8828adf7fee5245bfa2a54ba7) by @treshugart, author of Skate.js, and is implemented in the [val](https://github.com/skatejs/val) library.\r\n\r\n### Pros\r\n\r\n#### The system is explicit\r\n\r\nDevelopers can tell React exactly what they want instead of relying on a heuristic like the [properties-if-available](#option-2--properties-if-available) approach.\r\n\r\n#### Extending syntax may also solve issues with event handling\r\n\r\n*Note: This is outside the scope of this document but maybe worth mentioning :)*\r\n\r\nIssue [#7901](https://github.com/facebook/react/issues/7901) requests that React bypass its synthetic event system when declarative event handlers are added to custom elements. Because custom element event names are arbitrary strings, it means they can be capitalized in any fashion. To bypass the synthetic event system today will also mean needing to come up with a heuristic for mapping event names from JSX to `addEventListener`.\r\n\r\n```js\r\n// should this listen for: 'foobar', 'FooBar', or 'fooBar'?\r\nonFooBar={handleFooBar}\r\n```\r\n\r\nHowever, if the syntax is extended to allow attributes it could also be extended to allow events as well:\r\n\r\n```js\r\nconst bar = 'baz';\r\nconst hello = 'World';\r\nconst SquidChanged = e => console.log('yo');\r\nconst ReactElement = <Test\r\n  foo={bar}\r\n  attrs={{ hello }}\r\n  events={{ SquidChanged}} // addEventListener('SquidChanged', \u2026)\r\n/>;\r\n```\r\n\r\nIn this model the variable name is used as the event name. No heuristic is needed.\r\n\r\n### Cons\r\n\r\n#### It\u2019s new syntax\r\n\r\nDevelopers need to be taught how to use it and it needs to be thoroughly tested to make sure it is backwards compatible.\r\n\r\n#### It may be a breaking change\r\n\r\nIf any components already rely on properties named `attrs` or `events`, it could break them.\r\n\r\n#### It may be a larger change than any of the previous proposals\r\n\r\nFor React 17 it may be easier to make an incremental change (like one of the previous proposals) and position this proposal as something to take under consideration for a later, bigger refactor.\r\n\r\n## Option 5: An API for consuming custom elements\r\n\r\n*This proposal was offered by @sophiebits and @gaearon from the React team*\r\n\r\nReact could create a new API for consuming custom elements that maps the element\u2019s behavior with a configuration object.\r\n\r\n**Pseudocode example:**\r\n\r\n```js\r\nconst XFoo = ReactDOM.createCustomElementType({\r\n  element: \u2018x-foo\u2019,\r\n  \u2018my-attr\u2019: // something that tells React what to do with it\r\n  someRichDataProp: // something that tells React what to do with it\r\n});\r\n```\r\n\r\nThe above code returns a proxy component, `XFoo` that knows how to pass data to a custom element depending on the configuration you provide. You would use this proxy component in your app instead of using the custom element directly.\r\n\r\n**Example usage:**\r\n\r\n```jsx\r\n<XFoo someRichDataProp={...} />\r\n```\r\n\r\n### Pros\r\n\r\n#### The system is explicit\r\n\r\nDevelopers can tell React the exact behavior they want.\r\n\r\n#### Non-breaking change\r\n\r\nDevelopers can opt-in to using the object or continue using the current system.\r\n\r\n#### Idiomatic to React\r\n\r\nThis change doesn\u2019t require new JSX syntax, and feels more like other APIs in React. For example, PropTypes (even though it\u2019s being moved into its own package) has a somewhat similar approach.\r\n\r\n### Cons\r\n\r\n#### Could be a lot of work for a complex component\r\n\r\nPolymer\u2019s [paper-input](https://www.webcomponents.org/element/PolymerElements/paper-input/elements/paper-input) element has 37 properties, so it would produce a very large config. If developers are using a lot of custom elements in their app, that may equal a lot of configs they need to write.\r\n\r\n#### May bloat bundle size\r\n\r\nRelated to the above point, each custom element class now incurs the cost of its definition + its config object size.\r\n\r\n*Note: I'm not 100% sure if this is true. Someone more familiar with the React build process could verify.*\r\n\r\n#### Config needs to keep pace with the component\r\n\r\nEvery time the component does a minor version revision that adds a new property, the config will need to be updated as well. That\u2019s not difficult, but it does add maintenance. Maybe if configs are generated from source this is less of a burden, but that may mean needing to create a new tool to generate configs for each web component library.\r\n\r\n\r\ncc @sebmarkbage @gaearon @developit @treshugart @justinfagnani",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11366",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11366/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11366/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11366/events",
        "html_url": "https://github.com/facebook/react/issues/11366",
        "id": 268720167,
        "number": 11366,
        "title": "Add a way to opt out of User Timing API calls",
        "user": {
            "login": "artin-phares",
            "id": 671082,
            "avatar_url": "https://avatars2.githubusercontent.com/u/671082?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/artin-phares",
            "html_url": "https://github.com/artin-phares",
            "followers_url": "https://api.github.com/users/artin-phares/followers",
            "following_url": "https://api.github.com/users/artin-phares/following{/other_user}",
            "gists_url": "https://api.github.com/users/artin-phares/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/artin-phares/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/artin-phares/subscriptions",
            "organizations_url": "https://api.github.com/users/artin-phares/orgs",
            "repos_url": "https://api.github.com/users/artin-phares/repos",
            "events_url": "https://api.github.com/users/artin-phares/events{/privacy}",
            "received_events_url": "https://api.github.com/users/artin-phares/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 121709921,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 3,
        "created_at": "2017-10-26T11:13:56Z",
        "updated_at": "2017-10-26T19:28:41Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "**Do you want to request a *feature* or report a *bug*?**  \r\n\r\nbug or v16 feature (dont know)\r\n\r\n**What is the current behavior?**  \r\n\r\nWhen building in dev environment, performance timeline measures appear by default,  \r\nie. without `?react_perf` query string as in v15 described [here](https://reactjs.org/docs/optimizing-performance.html#profiling-components-with-the-chrome-performance-tab)\r\n\r\n`react@16.0.0`\r\n\r\nif it's not a bug, then what's the way to disable `react` perf measures?  \r\n\r\nNeed a way to clear timeline to focus on my own custom perf measures.\r\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11369",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11369/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11369/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11369/events",
        "html_url": "https://github.com/facebook/react/issues/11369",
        "id": 268762895,
        "number": 11369,
        "title": "React should recognize the `valueAsDate` property on DOM elements",
        "user": {
            "login": "kreba",
            "id": 1609828,
            "avatar_url": "https://avatars2.githubusercontent.com/u/1609828?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/kreba",
            "html_url": "https://github.com/kreba",
            "followers_url": "https://api.github.com/users/kreba/followers",
            "following_url": "https://api.github.com/users/kreba/following{/other_user}",
            "gists_url": "https://api.github.com/users/kreba/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/kreba/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/kreba/subscriptions",
            "organizations_url": "https://api.github.com/users/kreba/orgs",
            "repos_url": "https://api.github.com/users/kreba/repos",
            "events_url": "https://api.github.com/users/kreba/events{/privacy}",
            "received_events_url": "https://api.github.com/users/kreba/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 121709921,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2017-10-26T13:37:14Z",
        "updated_at": "2017-12-06T23:05:08Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "The `valueAsDate` property on the ES6 definition of `HTMLInputElement` is not yet recognized by React. It should be, though.\r\n\r\nThe `valueAsDate` property relieves the pain of having to deal with both browsers that support HTML5 date inputs and those who don't; the former require the `value` property to be of the form `\"YYYY-MM-DD\"` and the latter require a nicely formatted date (e.g. `\"MM/DD/YYYY\"`) since the user will see exactly that. (React won't even allow that in conjunction with `type=\"date\"`, though, and proclaim that the machine readable format should be used.) \r\nThe browsers that do support HTML5 date input (should) alternatively support the date being passed in through the `valueAsDate` property. If we use that, we can always put a nicely formatted date in the `value` property. Pain relieved! (And also React should allow any format in the `value` property in that case.)\r\n\r\nAs indicated above, browser support is still lacky at best, even with the most avant garde browsers. Hence this is not an urgent issue for React. It will get relevant, though, and is herein duly noted.",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11379",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11379/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11379/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11379/events",
        "html_url": "https://github.com/facebook/react/issues/11379",
        "id": 268935502,
        "number": 11379,
        "title": "onDrop breaks onSelect event",
        "user": {
            "login": "tobiasandersen",
            "id": 3599069,
            "avatar_url": "https://avatars2.githubusercontent.com/u/3599069?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/tobiasandersen",
            "html_url": "https://github.com/tobiasandersen",
            "followers_url": "https://api.github.com/users/tobiasandersen/followers",
            "following_url": "https://api.github.com/users/tobiasandersen/following{/other_user}",
            "gists_url": "https://api.github.com/users/tobiasandersen/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/tobiasandersen/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/tobiasandersen/subscriptions",
            "organizations_url": "https://api.github.com/users/tobiasandersen/orgs",
            "repos_url": "https://api.github.com/users/tobiasandersen/repos",
            "events_url": "https://api.github.com/users/tobiasandersen/events{/privacy}",
            "received_events_url": "https://api.github.com/users/tobiasandersen/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 710722093,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
                "name": "Type: Needs Investigation",
                "color": "fbca04",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": {
            "login": "clemmy",
            "id": 3696934,
            "avatar_url": "https://avatars0.githubusercontent.com/u/3696934?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/clemmy",
            "html_url": "https://github.com/clemmy",
            "followers_url": "https://api.github.com/users/clemmy/followers",
            "following_url": "https://api.github.com/users/clemmy/following{/other_user}",
            "gists_url": "https://api.github.com/users/clemmy/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/clemmy/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/clemmy/subscriptions",
            "organizations_url": "https://api.github.com/users/clemmy/orgs",
            "repos_url": "https://api.github.com/users/clemmy/repos",
            "events_url": "https://api.github.com/users/clemmy/events{/privacy}",
            "received_events_url": "https://api.github.com/users/clemmy/received_events",
            "type": "User",
            "site_admin": false
        },
        "assignees": [
            {
                "login": "clemmy",
                "id": 3696934,
                "avatar_url": "https://avatars0.githubusercontent.com/u/3696934?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/clemmy",
                "html_url": "https://github.com/clemmy",
                "followers_url": "https://api.github.com/users/clemmy/followers",
                "following_url": "https://api.github.com/users/clemmy/following{/other_user}",
                "gists_url": "https://api.github.com/users/clemmy/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/clemmy/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clemmy/subscriptions",
                "organizations_url": "https://api.github.com/users/clemmy/orgs",
                "repos_url": "https://api.github.com/users/clemmy/repos",
                "events_url": "https://api.github.com/users/clemmy/events{/privacy}",
                "received_events_url": "https://api.github.com/users/clemmy/received_events",
                "type": "User",
                "site_admin": false
            }
        ],
        "milestone": null,
        "comments": 5,
        "created_at": "2017-10-26T22:46:34Z",
        "updated_at": "2017-11-19T20:08:15Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nAfter an `onDrop` event has fired inside an \"editable\" element (input, textarea, contentEditable), the `onSelect` event on that element will no longer fire when changing selection using the keyboard. \r\n\r\nAs you can see in this gif below, the onSelect event gets called each time I move the cursor around (using the arrow keys). But once the `onDrop` event has fired, `onSelect` will no longer fire when I move the cursor around (also using the keys):\r\n\r\n![react-onselect-bug](https://user-images.githubusercontent.com/3599069/32080216-bd42f580-baae-11e7-98ee-93a482ed80ca.gif)\r\n\r\n[Here's the jsfiddle](https://jsfiddle.net/owmL8n6u/1/) I used to record the video above.\r\n\r\n**What is the expected behavior?**\r\nThe `onSelect` event should always fire when selection changes.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact 16 / Chrome 62",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11387",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11387/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11387/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11387/events",
        "html_url": "https://github.com/facebook/react/issues/11387",
        "id": 269148824,
        "number": 11387,
        "title": "createPortal: support option to stop propagation of events in React tree",
        "user": {
            "login": "kib357",
            "id": 347668,
            "avatar_url": "https://avatars3.githubusercontent.com/u/347668?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/kib357",
            "html_url": "https://github.com/kib357",
            "followers_url": "https://api.github.com/users/kib357/followers",
            "following_url": "https://api.github.com/users/kib357/following{/other_user}",
            "gists_url": "https://api.github.com/users/kib357/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/kib357/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/kib357/subscriptions",
            "organizations_url": "https://api.github.com/users/kib357/orgs",
            "repos_url": "https://api.github.com/users/kib357/repos",
            "events_url": "https://api.github.com/users/kib357/events{/privacy}",
            "received_events_url": "https://api.github.com/users/kib357/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 121709921,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 45,
        "created_at": "2017-10-27T15:36:49Z",
        "updated_at": "2018-04-27T14:58:09Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nFeature, but also a bug cause new API breaks old `unstable_rendersubtreeintocontainer`\r\n\r\n**What is the current behavior?**\r\nWe cannot stop all events propagation from portal to its React tree ancestors. Our layers mechanism with modals/popovers completely broken. For example, we have a dropdown button. When we click on it, click opens popover. We also want to close this popover when clicking on same button. With createPortal, click inside popover fires click on button, and it's closing. We can use stopPropagation in this simple case. But we have tons of such cases, and we need use stopPropagation for all of them. Also, we cannot stop all events.\r\n\r\n**What is the expected behavior?**\r\ncreatePortal should have an option to stop synthetic events propagation through React tree without manually stopping every event. What do you think?\r\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11396",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11396/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11396/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11396/events",
        "html_url": "https://github.com/facebook/react/issues/11396",
        "id": 269471319,
        "number": 11396,
        "title": "A function that is also an iterable is treated inconsistently",
        "user": {
            "login": "kentcdodds",
            "id": 1500684,
            "avatar_url": "https://avatars0.githubusercontent.com/u/1500684?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/kentcdodds",
            "html_url": "https://github.com/kentcdodds",
            "followers_url": "https://api.github.com/users/kentcdodds/followers",
            "following_url": "https://api.github.com/users/kentcdodds/following{/other_user}",
            "gists_url": "https://api.github.com/users/kentcdodds/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/kentcdodds/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/kentcdodds/subscriptions",
            "organizations_url": "https://api.github.com/users/kentcdodds/orgs",
            "repos_url": "https://api.github.com/users/kentcdodds/repos",
            "events_url": "https://api.github.com/users/kentcdodds/events{/privacy}",
            "received_events_url": "https://api.github.com/users/kentcdodds/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 739761016,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Reconciler",
                "name": "Component: Reconciler",
                "color": "f9a798",
                "default": false
            },
            {
                "id": 588833528,
                "url": "https://api.github.com/repos/facebook/react/labels/Difficulty:%20medium",
                "name": "Difficulty: medium",
                "color": "fbca04",
                "default": false
            },
            {
                "id": 40929151,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
                "name": "Type: Bug",
                "color": "b60205",
                "default": false
            },
            {
                "id": 725156255,
                "url": "https://api.github.com/repos/facebook/react/labels/good%20first%20issue%20(taken)",
                "name": "good first issue (taken)",
                "color": "b60205",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 7,
        "created_at": "2017-10-30T03:25:08Z",
        "updated_at": "2018-02-05T18:54:03Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n*bug* (I think)\r\n\r\n**What is the current behavior?**\r\nHere's a [codesandbox](https://codesandbox.io/s/0ml3roomr0). Or just plop this in an `index.html`:\r\n\r\n```html\r\n<body>\r\n<div id=\"root\"></div>\r\n<script src=\"https://unpkg.com/react@16.0.0/umd/react.development.js\"></script>\r\n<script src=\"https://unpkg.com/react-dom@16.0.0/umd/react-dom.development.js\"></script>\r\n<script src=\"https://unpkg.com/babel-standalone@6.26.0/babel.js\"></script>\r\n<script type=\"text/babel\">\r\nfunction makeRenderable(fn, valueGetter) {\r\n  const ITERATOR_SYMBOL =\r\n    (typeof Symbol === 'function' && Symbol.iterator) || '@@iterator'\r\n  function iterator() {\r\n    let timesCalled = 0\r\n    return {\r\n      next() {\r\n        const done = timesCalled++ > 0\r\n        return {done, value: done ? undefined : valueGetter()}\r\n      },\r\n    }\r\n  }\r\n  fn[ITERATOR_SYMBOL] = iterator\r\n  return fn\r\n}\r\n\r\nconst renderableFunction = makeRenderable(function(a, b) {\r\n  // kinda irrelevant what goes on in here...\r\n  return a + b\r\n}, () => 'I am the rendered version of the function')\r\n\r\nfunction Working() {\r\n  return (\r\n    <div>\r\n      This works: <div>{renderableFunction}</div>\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction NotWorking() {\r\n  return <div>This does not work: {renderableFunction}</div>\r\n}\r\n\r\nReactDOM.render(\r\n  <div>\r\n    <Working />\r\n    <hr />\r\n    <NotWorking />\r\n  </div>,\r\n  document.getElementById('root'),\r\n)\r\n</script>\r\n</body>\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\nI expect that things will render the same regardless of whether they're an only child or a member of an array of children.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nYes, [it worked in React@15](https://codesandbox.io/s/8zlpvjzjy9).\r\n\r\n**Suggested Solution**\r\n\r\nI'm fairly confident that the issue is in the array of children case, the [`getIteratorFn` call](https://github.com/facebook/react/blob/2c0a8fb99e945315c9dce7a15c85775d51f5755d/packages/react-reconciler/src/ReactChildFiber.js#L578-L586) is within a `typeof newChild === 'object' && newChild !== null` if statement, whereas the original [reconcileChildFibers](https://github.com/facebook/react/blob/2c0a8fb99e945315c9dce7a15c85775d51f5755d/packages/react-reconciler/src/ReactChildFiber.js#L1358) puts the [`getIteratorFn` call outside it](https://github.com/facebook/react/blob/2c0a8fb99e945315c9dce7a15c85775d51f5755d/packages/react-reconciler/src/ReactChildFiber.js#L1434-L1441).\r\n\r\nIf I'm not mistaken, a simple fix would be to move [this curly brace](https://github.com/facebook/react/blob/2c0a8fb99e945315c9dce7a15c85775d51f5755d/packages/react-reconciler/src/ReactChildFiber.js#L589) a few lines up :wink:\r\n\r\nI'm happy to do so complete with a test given a little direction (like, where the test should go). Thanks!",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11401",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11401/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11401/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11401/events",
        "html_url": "https://github.com/facebook/react/issues/11401",
        "id": 269655958,
        "number": 11401,
        "title": "WIP RFC: Improvements to the \"ref\" system",
        "user": {
            "login": "trueadm",
            "id": 1519870,
            "avatar_url": "https://avatars0.githubusercontent.com/u/1519870?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/trueadm",
            "html_url": "https://github.com/trueadm",
            "followers_url": "https://api.github.com/users/trueadm/followers",
            "following_url": "https://api.github.com/users/trueadm/following{/other_user}",
            "gists_url": "https://api.github.com/users/trueadm/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/trueadm/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/trueadm/subscriptions",
            "organizations_url": "https://api.github.com/users/trueadm/orgs",
            "repos_url": "https://api.github.com/users/trueadm/repos",
            "events_url": "https://api.github.com/users/trueadm/events{/privacy}",
            "received_events_url": "https://api.github.com/users/trueadm/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 739777675,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Component%20API",
                "name": "Component: Component API",
                "color": "d4c5f9",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 28,
        "created_at": "2017-10-30T16:01:55Z",
        "updated_at": "2018-05-07T07:32:03Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "body": "This is a formal discussion to talk about the future of refs within React and how we can improve upon them. \r\n\r\n## Current Behavior\r\n\r\nCurrently, there are two ways of doing refs in React, string refs and callback refs.\r\n\r\n### String refs\r\n\r\nString refs can be applied to \"composite\" components that are class components (i.e. `<MyComponent />`) and \"host\" components (i.e. `<span />`). \r\n\r\nAn example of how this might look like for both types:\r\n\r\n```jsx\r\n// host components\r\nclass MyComponent extends React.Component {\r\n  componentDidMount() {\r\n    this.refs.input.focus();\r\n  }\r\n  render() {\r\n    return <div><input ref=\"input\" type=\"text\" /></div>\r\n  }\r\n}\r\n\r\n// composite components\r\nclass InputWrapper extends React.Component {\r\n  focus() {\r\n    this.refs.input.focus();\r\n  }\r\n  render() {\r\n    return <input ref=\"input\" type=\"text\" />\r\n  }\r\n}\r\nclass FormComponent extends React.Component {\r\n  componentDidMount() {\r\n    this.refs.inputWrapper.focus()\r\n  }\r\n  render() {\r\n    return <InputWrapper ref=\"inputWrapper\" />\r\n  }\r\n}\r\n```\r\n\r\n### Callback refs\r\n\r\nCallback refs can also be applied to \"composite\" components that are class components (i.e. `<MyComponent />`) and \"host\" components (i.e. `<span />`). \r\n\r\nAn example of how this might look like for both types:\r\n\r\n```jsx\r\n// host components\r\nclass MyComponent extends React.Component {\r\n  componentDidMount() {\r\n    if (this._inputNode) {\r\n      this._inputNode.focus();\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <input ref={domNode => this._inputNode = domNode} type=\"text\" />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// composite components\r\nclass InputWrapper extends React.Component {\r\n  focus() {\r\n    this._input.focus();\r\n  }\r\n  render() {\r\n    return <input ref={domNode => this._input = domNode} type=\"text\" />\r\n  }\r\n}\r\nclass FormComponent extends React.Component {\r\n  componentDidMount() {\r\n    this._inputWrapper.focus()\r\n  }\r\n  render() {\r\n    return <InputWrapper ref={instance => this._inputWrapper = instance} />\r\n  }\r\n}\r\n```\r\n\r\n## Proposed Behavior\r\n\r\nI propose three major changes to how the current ref system works:\r\n\r\n### Deprecate string refs for removal in React 17\r\n\r\nThe ref API is broken is several aspects (taken from https://github.com/facebook/react/issues/1373).\r\n\r\n- You have to refer to this.refs['myname'] as strings to be Closure Compiler Advanced Mode compatible.\r\n- It doesn't allow the notion of multiple owners of a single instance.\r\n- Magical dynamic strings potentially break optimizations in VMs.\r\n- It needs to be always consistent, because it's synchronously resolved. This means that asynchronous batching of rendering introduces potential bugs.\r\n- We currently have a hook to get sibling refs so that you can have one component refer to it's sibling as a context reference. This only works one level. This breaks the ability to wrap one of those in an encapsulation.\r\n- It can't be statically typed. You have to cast it at any use in languages like Flow or TypeScript.\r\n- There's no way to attach the ref to the correct \"owner\" in a callback invoked by a child. `<Child renderer={index => <div ref=\"test\">{index}</div>} />` -- this ref will be attached where the callback is issued, not in the current owner.\r\n- They require access to the React runtime to find the current owner during the creation of a ReactElement, making ahead-of-time optimizations hard to deal with.\r\n\r\nCallback refs do not have the above issues and have been the recommended choice by the React team for some time. You can already do everything and more with callback refs, so I personally feel there's no need to keep the string ref system around.\r\n\r\nOther libraries, such as Inferno and Preact have already removed string refs and have reported performance optimization from doing so.\r\n\r\n### Deprecate the \"ref\" prop entirely\r\n\r\nI feel refs on components lead to problematic patterns that make apps much harder to scale because it can easily break the uni-direction flow of a component tree. In my opinion, class components shouldn't be able to access the instances of other components for communication \u2013 they should use `props` instead. Alternatively, in cases where access of a root DOM node is needed but unavailable, a wrapper component (https://github.com/facebook/react/issues/11401#issuecomment-340543801) could be used as an escape hatch.\r\n\r\nThe below example is something that I personally feel is a problematic pattern and one that I've seen bite teams in the past:\r\n\r\n```jsx\r\nclass ItemContainer extends React.Component {\r\n  render() {\r\n    let { subscribe, unsubscribe } = props.SubscriptionHandler;\r\n\r\n    return (\r\n      <ul>\r\n        { this.props.items.map( item => (\r\n           <ListItem \r\n              key={item.uid}\r\n              data={item.data}\r\n              ref={\r\n                _ref => _ref ? subscribe(item.uid, _ref) : unsubscribe(item.uid, _ref)\r\n              }\r\n           />\r\n         ) }\r\n      </ul>\r\n    );\r\n  }\r\n}\r\n```\r\n\r\nThe above example couples all the handling of the items in the item container, breaking the control flow. Ideally, the `SubscriptionHandler` should be passed to the child as a prop, then the child can control its own flow.\r\n\r\nAnother usage of refs on composite components is related to `ReactDOM.findDOMNode(...)` usage. By passing `findDOMNode` the component instance from the ref, you can get back the root DOM node. An example of this follows:\r\n\r\n```jsx\r\nclass DOMContainer extends React.Component {\r\n  render() {\r\n    if (this.props.type === \"inline\") {\r\n      return <span />;\r\n    } else {\r\n      return <div />;\r\n    }\r\n  }\r\n}\r\nclass Appender extends React.Component {\r\n  componentDidMount() {\r\n    ReactDOM.findDOMNode(this._domContainer).appendChild(this.props.node);\r\n  }\r\n  render() {\r\n   return <DOMContainer ref={_ref => this._domContainer = _ref} type=\"inline\" />\r\n  }\r\n}\r\n```\r\n\r\nThis approach can be avoided in this instance by passing refs via props:\r\n\r\n```jsx\r\nfunction DOMContainer(props) {\r\n  if (props.type === \"inline\") {\r\n    return <span ref={props.rootRef} />;\r\n  } else {\r\n    return <div ref={props.rootRef} />;\r\n  }\r\n}\r\nclass Appender extends React.Component {\r\n  componentDidMount() {\r\n     this._rootRef.appendChild(this.props.node);\r\n  }\r\n  render() {\r\n   return <DOMContainer rootRef={_ref => this._rootRef = _ref} type=\"inline\" />\r\n  }\r\n}\r\n```\r\n\r\n### Add a special \"hostRef\" prop that only works on host components\r\n\r\nThis is to reduce confusion, as `hostRef` would be a normal prop on composite components. Keeping the current \"ref\" naming might cause unintended problems. This would also allow apps to move over to the new system incrementally. Furthermore, `hostRef` should only accept callback refs, not string refs. An example of this:\r\n\r\n```jsx\r\nfunction Button({ className, ...props }) {\r\n  return (\r\n    <button\r\n      {...props}\r\n      className={classNames(className, 'my-btn')}\r\n    />\r\n  );\r\n}\r\n\r\n// \"hostRef\" is a simple prop here, and gets passed through to the <button> child via JSX spread\r\n<Button hostRef={ _ref => console.log(_ref) } className=\"headerBtn\" />\r\n```\r\n\r\n## Downsides\r\n\r\n### Migration Cost\r\n\r\nBoth changes in this proposal have a cost for migration. \r\n\r\n- String refs are still widely used in third-party components but are likely to be trackable and upgraded via codemodding.\r\n- Refs on composite components are far more widely used than string refs, so it may not make sense to make those changes vs the cost it will have on the React ecosystem. It's unlikely that they can be upgraded via a codemod.\r\n\r\n### Codemodding\r\n\r\nIt may be possible to automate the vast majority of string refs to callback refs via a codemod. There will need to be some form of checking for where the owner of a ref differs in cases of string refs vs callback refs. [This point needs to be broken apart and discussed more]\r\n\r\nIt might not be possible to automate a codemod for refs on composite components as it would require a change in how the structure of the components in an app work. [This point needs to be broken apart and discussed more]\r\n\r\n## Other Considerations?\r\n\r\nReact Native currently doesn't have host components, only composite components. So refs on core components such as `<View />` will need special consideration for how they may function as they do now. Maybe they could function by a prop called `viewRef` or something similar, which would work like refs currently do.",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11417",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11417/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11417/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11417/events",
        "html_url": "https://github.com/facebook/react/issues/11417",
        "id": 270120147,
        "number": 11417,
        "title": "Treat value={null} as empty string",
        "user": {
            "login": "IndifferentDisdain",
            "id": 1360908,
            "avatar_url": "https://avatars0.githubusercontent.com/u/1360908?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/IndifferentDisdain",
            "html_url": "https://github.com/IndifferentDisdain",
            "followers_url": "https://api.github.com/users/IndifferentDisdain/followers",
            "following_url": "https://api.github.com/users/IndifferentDisdain/following{/other_user}",
            "gists_url": "https://api.github.com/users/IndifferentDisdain/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/IndifferentDisdain/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/IndifferentDisdain/subscriptions",
            "organizations_url": "https://api.github.com/users/IndifferentDisdain/orgs",
            "repos_url": "https://api.github.com/users/IndifferentDisdain/repos",
            "events_url": "https://api.github.com/users/IndifferentDisdain/events{/privacy}",
            "received_events_url": "https://api.github.com/users/IndifferentDisdain/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 710375792,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
                "name": "Type: Discussion",
                "color": "fef2c0",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 9,
        "created_at": "2017-10-31T21:10:34Z",
        "updated_at": "2018-05-10T21:42:27Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "Per @gaearon's request, I'm opening up a new issue based on https://github.com/facebook/react/issues/5013#issuecomment-340898727.\r\n\r\nCurrently, if you create an input like `<input value={null} onChange={this.handleChange} />`, the null value is a flag for React to treat this as an uncontrolled input, and a console warning is generated. However, this is often a valid condition. For example, when creating a new object (initialized w/ default values from the server then passed to the component as props) in a form that requires address, Address Line 2 is often optional. As such, passing null as value to this controlled component is a very reasonable thing to do.\r\n\r\nOne can do a workaround, i.e. `<input value={foo || ''} onChange={this.handleChange} />`, but this is an error-prone approach and quite awkward.\r\n\r\nPer issue referenced above, the React team has planned on treating null as an empty string, but that hasn't yet occurred. I'd like to propose tackling this problem in the near future.\r\n\r\nPlease let me know if I can help further.",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11423",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11423/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11423/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11423/events",
        "html_url": "https://github.com/facebook/react/issues/11423",
        "id": 270314794,
        "number": 11423,
        "title": "Ignore <noscript> content on the client and don't warn about mismatches ",
        "user": {
            "login": "stephen-last",
            "id": 16349203,
            "avatar_url": "https://avatars1.githubusercontent.com/u/16349203?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/stephen-last",
            "html_url": "https://github.com/stephen-last",
            "followers_url": "https://api.github.com/users/stephen-last/followers",
            "following_url": "https://api.github.com/users/stephen-last/following{/other_user}",
            "gists_url": "https://api.github.com/users/stephen-last/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/stephen-last/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/stephen-last/subscriptions",
            "organizations_url": "https://api.github.com/users/stephen-last/orgs",
            "repos_url": "https://api.github.com/users/stephen-last/repos",
            "events_url": "https://api.github.com/users/stephen-last/events{/privacy}",
            "received_events_url": "https://api.github.com/users/stephen-last/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 710332294,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Server%20Rendering",
                "name": "Component: Server Rendering",
                "color": "d4c5f9",
                "default": false
            },
            {
                "id": 588833528,
                "url": "https://api.github.com/repos/facebook/react/labels/Difficulty:%20medium",
                "name": "Difficulty: medium",
                "color": "fbca04",
                "default": false
            },
            {
                "id": 710375792,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
                "name": "Type: Discussion",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 717031390,
                "url": "https://api.github.com/repos/facebook/react/labels/good%20first%20issue",
                "name": "good first issue",
                "color": "6ce26a",
                "default": true
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 34,
        "created_at": "2017-11-01T13:51:13Z",
        "updated_at": "2018-02-16T10:34:26Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "React 16.0.0 with SSR & [lazysizes](https://github.com/aFarkas/lazysizes) 4.0.1.\r\n\r\nTrying to use the [\"the noscript pattern\"](https://github.com/aFarkas/lazysizes#the-noscript-pattern) to lazy load images with [lazysizes](https://github.com/aFarkas/lazysizes) but I'm seeing this:\r\n\r\n> Warning: Expected server HTML to contain a matching &lt;img&gt; in &lt;noscript&gt;.\r\n\r\nImage component render method:\r\n\r\n```js\r\nrender () {\r\n    const { cdn, url, width, height } = this.props\r\n\r\n    if (!url) return null\r\n\r\n    const noScriptImgProps = {\r\n      src: `${cdn}${url}`,\r\n      className: classNames('product-image'),\r\n      width,\r\n      height\r\n    }\r\n\r\n    const imgProps = {\r\n      'data-src': `${cdn}${url}`,\r\n      className: classNames('product-image', 'lazyload'),\r\n      width,\r\n      height\r\n    }\r\n\r\n    return (\r\n      <span>\r\n        <noscript>\r\n          <img {...noScriptImgProps} />\r\n        </noscript>\r\n        <img {...imgProps} />\r\n      </span>\r\n    )\r\n  }\r\n```\r\n\r\nDoes React have an issue with `noscript` tags..?\r\n\r\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11461",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11461/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11461/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11461/events",
        "html_url": "https://github.com/facebook/react/issues/11461",
        "id": 271271397,
        "number": 11461,
        "title": "[RN] Don't receive events on unknown tags",
        "user": {
            "login": "gaearon",
            "id": 810438,
            "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gaearon",
            "html_url": "https://github.com/gaearon",
            "followers_url": "https://api.github.com/users/gaearon/followers",
            "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
            "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
            "organizations_url": "https://api.github.com/users/gaearon/orgs",
            "repos_url": "https://api.github.com/users/gaearon/repos",
            "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gaearon/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 710722093,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
                "name": "Type: Needs Investigation",
                "color": "fbca04",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2017-11-05T12:03:39Z",
        "updated_at": "2017-11-05T12:03:43Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "Flow uncovered this:\r\n\r\nhttps://github.com/facebook/react/blob/92b7b172cce9958b846844f0b46fd7bbd8c5140d/packages/react-native-renderer/src/ReactNativeEventEmitter.js#L174-L175\r\n\r\nNeed to verify if we can just return early and not process the events in this case.",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11478",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11478/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11478/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11478/events",
        "html_url": "https://github.com/facebook/react/issues/11478",
        "id": 271785008,
        "number": 11478,
        "title": "let `yarn build` warn if local yarn version not support workspaces",
        "user": {
            "login": "monkindey",
            "id": 6913898,
            "avatar_url": "https://avatars0.githubusercontent.com/u/6913898?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/monkindey",
            "html_url": "https://github.com/monkindey",
            "followers_url": "https://api.github.com/users/monkindey/followers",
            "following_url": "https://api.github.com/users/monkindey/following{/other_user}",
            "gists_url": "https://api.github.com/users/monkindey/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/monkindey/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/monkindey/subscriptions",
            "organizations_url": "https://api.github.com/users/monkindey/orgs",
            "repos_url": "https://api.github.com/users/monkindey/repos",
            "events_url": "https://api.github.com/users/monkindey/events{/privacy}",
            "received_events_url": "https://api.github.com/users/monkindey/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 71502270,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Build%20Infrastructure",
                "name": "Component: Build Infrastructure",
                "color": "f9d0c4",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 9,
        "created_at": "2017-11-07T10:42:05Z",
        "updated_at": "2017-11-09T07:38:03Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nFeature\r\n\r\n**What is the current behavior?**\r\n\r\nI got the error below when my local yarn version was v0.21.\r\n\r\n```js\r\nError: Cannot find module 'react'\r\n    at Function.Module._resolveFilename (module.js:485:15)\r\n    at Function.resolve (internal/module.js:18:19)\r\n    at createBundle (~/Documents/repo/dev/react/scripts/rollup/build.js:536:31)\r\n    at tasks.push (~/Documents/repo/dev/react/scripts/rollup/build.js:632:13)\r\n    at runWaterfall (~/Documents/repo/dev/react/scripts/rollup/build.js:687:23)\r\n    at nextPromise.then (~/Documents/repo/dev/react/scripts/rollup/build.js:693:12)\r\n    at <anonymous> code: 'MODULE_NOT_FOUND'\r\n```\r\n\r\nI think maybe should upgrade my yarn because the `react` module land at package folder.\r\n\r\nAnd I upgrade yarn, and try to exec the `yarn` command, then `yarn build`, and it work.\r\n\r\n~~**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template for React 16: https://jsfiddle.net/Luktwrdm/, template for React 15: https://jsfiddle.net/hmbg7e9w/).**~~\r\n\r\nNo\r\n\r\n**What is the expected behavior?**\r\n\r\nI think it would be great if we throw a warning not a ambiguous error.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n* React v16.1\r\n* OSX ",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11503",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11503/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11503/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11503/events",
        "html_url": "https://github.com/facebook/react/issues/11503",
        "id": 272615283,
        "number": 11503,
        "title": "Formalize top-level ES exports",
        "user": {
            "login": "gaearon",
            "id": 810438,
            "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gaearon",
            "html_url": "https://github.com/gaearon",
            "followers_url": "https://api.github.com/users/gaearon/followers",
            "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
            "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
            "organizations_url": "https://api.github.com/users/gaearon/orgs",
            "repos_url": "https://api.github.com/users/gaearon/repos",
            "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gaearon/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 71502270,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Build%20Infrastructure",
                "name": "Component: Build Infrastructure",
                "color": "f9d0c4",
                "default": false
            },
            {
                "id": 710375792,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
                "name": "Type: Discussion",
                "color": "fef2c0",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 27,
        "created_at": "2017-11-09T15:56:42Z",
        "updated_at": "2018-02-13T06:47:24Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "Currently we only ship CommonJS versions of all packages. However we might want to ship them as ESM in the future (https://github.com/facebook/react/issues/10021).\r\n\r\nWe can't quite easily do this because we haven't really decided on what top-level ES exports would look like from each package. For example, does `react` have a bunch of named exports, but also a default export called `React`? Should we encourage people to `import *` for better tree shaking? What about `react-test-renderer/shallow` that currently exports a class (and thus would start failing in Node were it converted to be a default export)?",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11508",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11508/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11508/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11508/events",
        "html_url": "https://github.com/facebook/react/issues/11508",
        "id": 272756997,
        "number": 11508,
        "title": "React 16 shouldComponentUpdate and incorrect props no child component oddness",
        "user": {
            "login": "iamdustan",
            "id": 227879,
            "avatar_url": "https://avatars3.githubusercontent.com/u/227879?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/iamdustan",
            "html_url": "https://github.com/iamdustan",
            "followers_url": "https://api.github.com/users/iamdustan/followers",
            "following_url": "https://api.github.com/users/iamdustan/following{/other_user}",
            "gists_url": "https://api.github.com/users/iamdustan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/iamdustan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/iamdustan/subscriptions",
            "organizations_url": "https://api.github.com/users/iamdustan/orgs",
            "repos_url": "https://api.github.com/users/iamdustan/repos",
            "events_url": "https://api.github.com/users/iamdustan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/iamdustan/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 739761016,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Reconciler",
                "name": "Component: Reconciler",
                "color": "f9a798",
                "default": false
            },
            {
                "id": 620368407,
                "url": "https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information",
                "name": "Resolution: Needs More Information",
                "color": "fffde7",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 13,
        "created_at": "2017-11-09T22:53:30Z",
        "updated_at": "2018-01-04T15:36:51Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "body": "This issue is going to start off mostly theoretical as I\u2019m still working to make a minimal repro case.\r\n\r\nWe have a scenario where one component is having `shouldComponentUpdate()` return false to bail out, but a child component is still having its `render` method called.\r\n\r\nAvoiding many details this is roughly what we have:\r\n\r\n```jsx\r\nimport React, { Component } from 'react';\r\n\r\nclass A extends Component {\r\n  shouldComponentUpdate(nextProps) {\r\n    const result = Boolean(nextProps.item);\r\n    console.log('A#shouldComponentUpdate?', result);\r\n    return result;\r\n  }\r\n\r\n  render() {\r\n    console.log('A#render', this.props.item);\r\n    return <B item={this.props.item} />;\r\n  }\r\n}\r\n\r\nclass B extends Component {\r\n  state = { seconds: 0 };\r\n  componentDidMount() {\r\n    this._interval = setInterval(\r\n      () => this.setState({ seconds: this.state.seconds + 1 }),\r\n      1000\r\n    );\r\n  }\r\n\r\n  componentWillUnMount() {\r\n    clearInterval(this._interval);\r\n  }\r\n\r\n  render() {\r\n    console.log('B#render', this.props.item);\r\n    return (\r\n      <div>\r\n        <strong>{this.props.item.name}</strong>\r\n        <span>{this.state.seconds} seconds</span>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default A;\r\n```\r\n\r\nWhile this case does work as expected it seems to be in the direction of the\r\nerrors we\u2019re seeing.\r\n\r\nThere is something taking place in our render cycle where B is being rendered\r\n_without_ reusing the `item` prop from the previous reconcile.\r\n\r\nMy first question is are there any theories on why this may be happening that I\r\ncan explore? We _are_ using `context` as the parent of `A` and as`B` and these\r\nare reading from a `flux`-thing (I think a fork of the original OSS Flux), they\r\nthey these are both passing all props through and not having any naming\r\ncollisions. I\u2019m fairly certain we are not performing any mutations on our end.\r\n\r\n(If I do manage to pull off a repro case I will immediately post it here with\r\nutter joy in my heart)\r\n\r\ncc @acdlite @gaearon (this is the issue I was asking about in Messenger recently)",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11519",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11519/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11519/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11519/events",
        "html_url": "https://github.com/facebook/react/issues/11519",
        "id": 273040545,
        "number": 11519,
        "title": "Consider including directory name into the stack trace for some files",
        "user": {
            "login": "gaearon",
            "id": 810438,
            "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gaearon",
            "html_url": "https://github.com/gaearon",
            "followers_url": "https://api.github.com/users/gaearon/followers",
            "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
            "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
            "organizations_url": "https://api.github.com/users/gaearon/orgs",
            "repos_url": "https://api.github.com/users/gaearon/repos",
            "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gaearon/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 139653724,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Core%20Utilities",
                "name": "Component: Core Utilities",
                "color": "c5def5",
                "default": false
            },
            {
                "id": 588833528,
                "url": "https://api.github.com/repos/facebook/react/labels/Difficulty:%20medium",
                "name": "Difficulty: medium",
                "color": "fbca04",
                "default": false
            },
            {
                "id": 725156255,
                "url": "https://api.github.com/repos/facebook/react/labels/good%20first%20issue%20(taken)",
                "name": "good first issue (taken)",
                "color": "b60205",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 3,
        "created_at": "2017-11-10T19:51:16Z",
        "updated_at": "2017-11-10T21:50:55Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "See https://twitter.com/deadcoder0904/status/929050109425229824\r\n\r\nMaybe if the file is called `index.js` (pretty common with some directory structures) we should include the directory name into the short component stack trace. ",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11530",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11530/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11530/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11530/events",
        "html_url": "https://github.com/facebook/react/issues/11530",
        "id": 273174729,
        "number": 11530,
        "title": "Not touched, and not clicked component gets a ghost mousedown event",
        "user": {
            "login": "baharev",
            "id": 2605584,
            "avatar_url": "https://avatars3.githubusercontent.com/u/2605584?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/baharev",
            "html_url": "https://github.com/baharev",
            "followers_url": "https://api.github.com/users/baharev/followers",
            "following_url": "https://api.github.com/users/baharev/following{/other_user}",
            "gists_url": "https://api.github.com/users/baharev/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/baharev/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/baharev/subscriptions",
            "organizations_url": "https://api.github.com/users/baharev/orgs",
            "repos_url": "https://api.github.com/users/baharev/repos",
            "events_url": "https://api.github.com/users/baharev/events{/privacy}",
            "received_events_url": "https://api.github.com/users/baharev/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 710722093,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
                "name": "Type: Needs Investigation",
                "color": "fbca04",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 30,
        "created_at": "2017-11-11T20:43:32Z",
        "updated_at": "2017-12-08T10:36:33Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "The deployed (minimal, trimmed down) app is at:\r\n\r\nhttp://www.baharev.info/sandbox/eventbug/ \r\n\r\nand the entire source code is at:\r\n\r\nhttps://github.com/baharev/eventbug\r\n\r\nClicking or touching either square should make the clicked / touched square disappear, but only that square. Everything works as intended on my desktop machine both in Chrome and in Firefox. It also shows the correct behavior in Safari on iOS (and I don't care about IE or Edge).\r\n\r\nThe following triggers the bug in Chrome, either on an Android tablet, or on my desktop machine when emulating a hand-held device. Reload the app, and touch or click the top (blue) square: Both squares disappear, and in the console log I see that **the not clicked, and not touched bottom green square received a spurious mousedown event** (which then deleted it).\r\n\r\nThere is `touch-action: none;` in the app.css applied on the squares.  If I didn't use it, I would get the following warning in Chrome when emulating a hand-held device:\r\n\r\n> [Intervention] Unable to preventDefault inside passive event listener due to target being treated as passive. See:  https://www.chromestatus.com/features/5093566007214080\r\n\r\nWith `touch-action: none;` (the way it is in the deployed app), this warning goes away.\r\n\r\n 1. Is the ghost mousedown event due to a bug in my code?\r\n 2. Or is it a bug in React?\r\n 3. Or is it a bug in Chrome? \r\n 4. How can I resolve this issue? (I am looking for a workaround if the bug is not in my code.)\r\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11538",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11538/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11538/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11538/events",
        "html_url": "https://github.com/facebook/react/issues/11538",
        "id": 273303484,
        "number": 11538,
        "title": "In-Browser Google Translate and React 16 don't play well together",
        "user": {
            "login": "fritz-c",
            "id": 4413963,
            "avatar_url": "https://avatars1.githubusercontent.com/u/4413963?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/fritz-c",
            "html_url": "https://github.com/fritz-c",
            "followers_url": "https://api.github.com/users/fritz-c/followers",
            "following_url": "https://api.github.com/users/fritz-c/following{/other_user}",
            "gists_url": "https://api.github.com/users/fritz-c/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/fritz-c/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/fritz-c/subscriptions",
            "organizations_url": "https://api.github.com/users/fritz-c/orgs",
            "repos_url": "https://api.github.com/users/fritz-c/repos",
            "events_url": "https://api.github.com/users/fritz-c/events{/privacy}",
            "received_events_url": "https://api.github.com/users/fritz-c/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 710722093,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
                "name": "Type: Needs Investigation",
                "color": "fbca04",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 22,
        "created_at": "2017-11-13T03:54:44Z",
        "updated_at": "2018-05-19T07:32:59Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug, though there's a decent chance it's a Chrome/Google Translate one\r\n\r\n**What is the current behavior?**\r\n\r\nWhen using Google Translate on a page using React 16, a certain code pattern produces a Javascript error (`Failed to execute 'removeChild' on 'Node': The node to be removed is not a child of this node.`) when the rendered content changes.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template for React 16: https://jsfiddle.net/Luktwrdm/, template for React 15: https://jsfiddle.net/hmbg7e9w/).**\r\n\r\n(This has only been checked on macOS 10.13.1)\r\n1. Navigate to https://qq49kwjynj.codesandbox.io/ in a Chrome browser set to some language other than Japanese.\r\n2. Right click the page and select \"Translate to English\"\r\n3. Click the checkbox, and the error will show.\r\n\r\nThe source of the example can be found at https://codesandbox.io/s/qq49kwjynj\r\nThe part of the code that seems to cause it is the following two lines:\r\n```js\r\n{this.state.checked && \"\u9078\u629e\u6e08\u307f\"}\r\n{!this.state.checked && \"\u7121\u9078\u629e\"}\r\n```\r\nChanging this to the following fixes the behavior with Google Translate:\r\n```js\r\n{this.state.checked ? \"\u9078\u629e\u6e08\u307f\" : \"\u7121\u9078\u629e\"}\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\nIt should not produce an error.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nI created an identical example with React 15 at the following pages:\r\nhttps://p93xxmr0rq.codesandbox.io/\r\nhttps://codesandbox.io/s/p93xxmr0rq\r\nWhen repeating the same steps outlined above, no error was produced.\r\nIt only seems to affect React 16.\r\nAs this is a Chrome-only feature, it only affects Chrome.",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11547",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11547/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11547/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11547/events",
        "html_url": "https://github.com/facebook/react/issues/11547",
        "id": 273573470,
        "number": 11547,
        "title": "stopImmediatePropagation is not available for synthetic events",
        "user": {
            "login": "evan-scott-zocdoc",
            "id": 25586630,
            "avatar_url": "https://avatars2.githubusercontent.com/u/25586630?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/evan-scott-zocdoc",
            "html_url": "https://github.com/evan-scott-zocdoc",
            "followers_url": "https://api.github.com/users/evan-scott-zocdoc/followers",
            "following_url": "https://api.github.com/users/evan-scott-zocdoc/following{/other_user}",
            "gists_url": "https://api.github.com/users/evan-scott-zocdoc/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/evan-scott-zocdoc/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/evan-scott-zocdoc/subscriptions",
            "organizations_url": "https://api.github.com/users/evan-scott-zocdoc/orgs",
            "repos_url": "https://api.github.com/users/evan-scott-zocdoc/repos",
            "events_url": "https://api.github.com/users/evan-scott-zocdoc/events{/privacy}",
            "received_events_url": "https://api.github.com/users/evan-scott-zocdoc/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 121709921,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2017-11-13T20:51:46Z",
        "updated_at": "2017-11-13T22:33:22Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "In order to call this method, you'd have to access it via `event.nativeEvent.stopImmediatePropagation()`: https://developer.mozilla.org/en-US/docs/Web/API/Event/stopImmediatePropagation\r\n\r\nIt'd be awesome if this was supported on `event` itself. I did see a [prior issue](https://github.com/facebook/react/issues/1734) for this, but it was for a use case that sIP wasn't required for.\r\n\r\nFor a specific use case: if you want to kill hover events for touch input, `onTouchStart` will trigger `onMouseOver` and `stopImmediatePropagation` cancels that internal cascade.",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11549",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11549/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11549/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11549/events",
        "html_url": "https://github.com/facebook/react/issues/11549",
        "id": 273639263,
        "number": 11549,
        "title": "Add validation to the React.Children helpers",
        "user": {
            "login": "aweary",
            "id": 6886061,
            "avatar_url": "https://avatars2.githubusercontent.com/u/6886061?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/aweary",
            "html_url": "https://github.com/aweary",
            "followers_url": "https://api.github.com/users/aweary/followers",
            "following_url": "https://api.github.com/users/aweary/following{/other_user}",
            "gists_url": "https://api.github.com/users/aweary/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/aweary/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/aweary/subscriptions",
            "organizations_url": "https://api.github.com/users/aweary/orgs",
            "repos_url": "https://api.github.com/users/aweary/repos",
            "events_url": "https://api.github.com/users/aweary/events{/privacy}",
            "received_events_url": "https://api.github.com/users/aweary/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 139653724,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Core%20Utilities",
                "name": "Component: Core Utilities",
                "color": "c5def5",
                "default": false
            },
            {
                "id": 40929153,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement",
                "name": "Type: Enhancement",
                "color": "84b6eb",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": {
            "login": "clemmy",
            "id": 3696934,
            "avatar_url": "https://avatars0.githubusercontent.com/u/3696934?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/clemmy",
            "html_url": "https://github.com/clemmy",
            "followers_url": "https://api.github.com/users/clemmy/followers",
            "following_url": "https://api.github.com/users/clemmy/following{/other_user}",
            "gists_url": "https://api.github.com/users/clemmy/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/clemmy/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/clemmy/subscriptions",
            "organizations_url": "https://api.github.com/users/clemmy/orgs",
            "repos_url": "https://api.github.com/users/clemmy/repos",
            "events_url": "https://api.github.com/users/clemmy/events{/privacy}",
            "received_events_url": "https://api.github.com/users/clemmy/received_events",
            "type": "User",
            "site_admin": false
        },
        "assignees": [
            {
                "login": "clemmy",
                "id": 3696934,
                "avatar_url": "https://avatars0.githubusercontent.com/u/3696934?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/clemmy",
                "html_url": "https://github.com/clemmy",
                "followers_url": "https://api.github.com/users/clemmy/followers",
                "following_url": "https://api.github.com/users/clemmy/following{/other_user}",
                "gists_url": "https://api.github.com/users/clemmy/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/clemmy/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clemmy/subscriptions",
                "organizations_url": "https://api.github.com/users/clemmy/orgs",
                "repos_url": "https://api.github.com/users/clemmy/repos",
                "events_url": "https://api.github.com/users/clemmy/events{/privacy}",
                "received_events_url": "https://api.github.com/users/clemmy/received_events",
                "type": "User",
                "site_admin": false
            }
        ],
        "milestone": null,
        "comments": 0,
        "created_at": "2017-11-14T01:42:19Z",
        "updated_at": "2017-11-18T19:34:10Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "Currently helpers like `React.Children.toArray` will not validate the passed elements, so things like missing keys go unnoticed.\r\n\r\nSee the discussion in https://twitter.com/sebmarkbage/status/930239051092803585 (I deleted the original tweet) for more context",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11553",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11553/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11553/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11553/events",
        "html_url": "https://github.com/facebook/react/issues/11553",
        "id": 273742268,
        "number": 11553,
        "title": "Non-Passive event warnings when any <select> component is clicked",
        "user": {
            "login": "jimyaghi",
            "id": 15869425,
            "avatar_url": "https://avatars0.githubusercontent.com/u/15869425?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jimyaghi",
            "html_url": "https://github.com/jimyaghi",
            "followers_url": "https://api.github.com/users/jimyaghi/followers",
            "following_url": "https://api.github.com/users/jimyaghi/following{/other_user}",
            "gists_url": "https://api.github.com/users/jimyaghi/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jimyaghi/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jimyaghi/subscriptions",
            "organizations_url": "https://api.github.com/users/jimyaghi/orgs",
            "repos_url": "https://api.github.com/users/jimyaghi/repos",
            "events_url": "https://api.github.com/users/jimyaghi/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jimyaghi/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 121709921,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 6,
        "created_at": "2017-11-14T10:35:19Z",
        "updated_at": "2018-03-20T00:51:34Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nA bug\r\n\r\n**What is the current behavior?**\r\nThe following console warning is emitted every time a `<select>` input is clicked:\r\n\r\n\r\n`[Violation] Added non-passive event listener to a scroll-blocking 'mousewheel' event. Consider marking event handler as 'passive' to make the page more responsive. See https://www.chromestatus.com/feature/5745543795965952`\r\n\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template for React 16: https://jsfiddle.net/Luktwrdm/, template for React 15: https://jsfiddle.net/hmbg7e9w/).**\r\n\r\nThe steps are:\r\n\r\n1. In a new tab, visit https://codepen.io/anon/pen/QOgNKg\r\n\r\n2. Open the browser console and ensure messages are unfiltered\r\n\r\n3. Run the code and click either of the select fields on the page. \r\n\r\nA warning is emitted every time either select field is clicked. The selection does not need to change.\r\n\r\n\r\n\r\n**What is the expected behavior?**\r\n\r\nThere should be no warning as i have not attached any event listeners.\r\n\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact 16.1.0\r\nChrome 62.0.3202.89 (Official Build) (64-bit)\r\nTested also on Ubuntu Opera and has the same issue.\r\n\r\nThe issue began appearing for me after a recent upgrade of Chrome. I was using React 15-stable when i first saw it, so i upgraded to 16.1.0 to see if the issue is resolved and it was not.\r\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11560",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11560/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11560/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11560/events",
        "html_url": "https://github.com/facebook/react/issues/11560",
        "id": 273996912,
        "number": 11560,
        "title": "Clicking radios fires a change event unconditionally in older browsers",
        "user": {
            "login": "nhunzaker",
            "id": 590904,
            "avatar_url": "https://avatars3.githubusercontent.com/u/590904?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nhunzaker",
            "html_url": "https://github.com/nhunzaker",
            "followers_url": "https://api.github.com/users/nhunzaker/followers",
            "following_url": "https://api.github.com/users/nhunzaker/following{/other_user}",
            "gists_url": "https://api.github.com/users/nhunzaker/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nhunzaker/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nhunzaker/subscriptions",
            "organizations_url": "https://api.github.com/users/nhunzaker/orgs",
            "repos_url": "https://api.github.com/users/nhunzaker/repos",
            "events_url": "https://api.github.com/users/nhunzaker/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nhunzaker/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 710722093,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
                "name": "Type: Needs Investigation",
                "color": "fbca04",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2017-11-15T00:54:06Z",
        "updated_at": "2017-12-24T03:00:15Z",
        "closed_at": null,
        "author_association": "COLLABORATOR",
        "body": "This may be a change we agreed to that I missed, but the \"Radio input clicks\" test fixtures fails in:\r\n\r\nSafari 7.1, 8, 9\r\niOS Safari 8.4\r\nChrome 42\r\n\r\nThe test fixture is here:\r\nhttp://react-dom-test-fixtures.surge.sh/input-change-events\r\n\r\nDo we care about this? If not, we should figure out a way to document this.",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11565",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11565/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11565/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11565/events",
        "html_url": "https://github.com/facebook/react/issues/11565",
        "id": 274279505,
        "number": 11565,
        "title": "React-test-renderer: support for portal",
        "user": {
            "login": "alansouzati",
            "id": 1207250,
            "avatar_url": "https://avatars1.githubusercontent.com/u/1207250?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/alansouzati",
            "html_url": "https://github.com/alansouzati",
            "followers_url": "https://api.github.com/users/alansouzati/followers",
            "following_url": "https://api.github.com/users/alansouzati/following{/other_user}",
            "gists_url": "https://api.github.com/users/alansouzati/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/alansouzati/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/alansouzati/subscriptions",
            "organizations_url": "https://api.github.com/users/alansouzati/orgs",
            "repos_url": "https://api.github.com/users/alansouzati/repos",
            "events_url": "https://api.github.com/users/alansouzati/events{/privacy}",
            "received_events_url": "https://api.github.com/users/alansouzati/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 710400704,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Test%20Renderer",
                "name": "Component: Test Renderer",
                "color": "006b75",
                "default": false
            },
            {
                "id": 710722093,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
                "name": "Type: Needs Investigation",
                "color": "fbca04",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": {
            "login": "bvaughn",
            "id": 29597,
            "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bvaughn",
            "html_url": "https://github.com/bvaughn",
            "followers_url": "https://api.github.com/users/bvaughn/followers",
            "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
            "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
            "organizations_url": "https://api.github.com/users/bvaughn/orgs",
            "repos_url": "https://api.github.com/users/bvaughn/repos",
            "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bvaughn/received_events",
            "type": "User",
            "site_admin": false
        },
        "assignees": [
            {
                "login": "bvaughn",
                "id": 29597,
                "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/bvaughn",
                "html_url": "https://github.com/bvaughn",
                "followers_url": "https://api.github.com/users/bvaughn/followers",
                "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
                "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
                "organizations_url": "https://api.github.com/users/bvaughn/orgs",
                "repos_url": "https://api.github.com/users/bvaughn/repos",
                "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
                "received_events_url": "https://api.github.com/users/bvaughn/received_events",
                "type": "User",
                "site_admin": false
            }
        ],
        "milestone": null,
        "comments": 16,
        "created_at": "2017-11-15T19:40:29Z",
        "updated_at": "2018-05-24T20:28:24Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nReport a bug\r\n\r\n**What is the current behavior?**\r\n\r\nThis test\r\n\r\n```javascript\r\nimport React from 'react';\r\nimport { createPortal } from 'react-dom';\r\nimport renderer from 'react-test-renderer';\r\n\r\nconst Drop = () => (\r\n  createPortal(\r\n    <div>hello</div>,\r\n    this.dropContainer\r\n  )\r\n);\r\n\r\ntest('Drop renders', () => {\r\n  const component = renderer.create(\r\n    <div>\r\n      <input />\r\n      <Drop />\r\n    </div>\r\n  );\r\n  const tree = component.toJSON();\r\n  expect(tree).toMatchSnapshot();\r\n});\r\n```\r\n\r\nfails with\r\n\r\n> Invariant Violation: Drop(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.\r\n\r\nThis test passes if I wrap createPortal in a container.\r\n\r\n```javascript\r\n<div>\r\n  {createPortal(\r\n    <div>hello</div>,\r\n    this.dropContainer\r\n  )}\r\n</div>\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\nThe code without the parent container works fine in the browser. So it seems that I'm adding the  parent `div` just for the test to pass. I believe `react-test-renderer` should support empty returns?\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nLastest\r\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11566",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11566/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11566/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11566/events",
        "html_url": "https://github.com/facebook/react/issues/11566",
        "id": 274309362,
        "number": 11566,
        "title": "[Umbrella] New algorithm for resuming interrupted work",
        "user": {
            "login": "acdlite",
            "id": 3624098,
            "avatar_url": "https://avatars0.githubusercontent.com/u/3624098?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/acdlite",
            "html_url": "https://github.com/acdlite",
            "followers_url": "https://api.github.com/users/acdlite/followers",
            "following_url": "https://api.github.com/users/acdlite/following{/other_user}",
            "gists_url": "https://api.github.com/users/acdlite/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/acdlite/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/acdlite/subscriptions",
            "organizations_url": "https://api.github.com/users/acdlite/orgs",
            "repos_url": "https://api.github.com/users/acdlite/repos",
            "events_url": "https://api.github.com/users/acdlite/events{/privacy}",
            "received_events_url": "https://api.github.com/users/acdlite/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 739761016,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Reconciler",
                "name": "Component: Reconciler",
                "color": "f9a798",
                "default": false
            },
            {
                "id": 710615342,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Umbrella",
                "name": "Type: Umbrella",
                "color": "5319e7",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2017-11-15T21:24:06Z",
        "updated_at": "2017-11-18T19:33:53Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "*Resuming* is the ability to re-use fibers after they are interrupted by a higher-priority update. Take the following scenario: A component is updated at a normal, async priority. Before the update is finished processing, a higher-priority update is scheduled (let's say it's synchronous, though it could also be a higher-priority async update). The sync update *interrupts* the async update, leaving it unfinished. After the sync update finishes, we go back to processing the interrupted, async update. It's possible, and even likely, that the interrupted work wasn't touched by the sync work and can be *resumed* without starting over completely.\r\n\r\nThis is an important optimization for several async features we have in mind, including error handling, blockers, pre-rendering, and hidden priority.\r\n\r\nWe used to have an implementation of resuming that mostly worked but had some bugs. A few months ago, I spent some time [identifying the bugs using fuzz testing](https://github.com/facebook/react/pull/9952) and fixing them by iterating on the existing algorithm. I eventually got a [version working that passed all the tests](https://github.com/facebook/react/pull/9695). But even this version didn't have all of the features we wanted, and the algorithm seemed inherently flawed. So we decided it would be best to scrap the existing algorithm and revisit resuming in the future.\r\n\r\nWe now believe we have a better idea of how resuming should work. I'm going to split the work into multiple PRs, and use this issue to keep track of our progress.\r\n\r\nMy apologies if some of my descriptions are hard to follow. It can be difficult to describe without resorting to jargon. I'll iterate on this issue as I work.\r\n\r\n\r\nAlways reconcile against current child set (#11564)\r\n---------------------------------------------------\r\n\r\nThis is a small refactor that reflects what we already do without resuming: the set we reconcile against is always the current set. In the reverted resuming algorithm, the set we reconcile against was sometimes a work-in-progress set, and there are a few code paths that are left over from that implementation.\r\n\r\nStash interrupted children\r\n--------------------------\r\n\r\nWhen cloning a work-in-progress fiber from current, and there is already an existing work-in-progress that was interrupted, stash the interrupted work-in-progress children (and corresponding fields) in case we can reuse them later. In begin phase, add an additional check to see if incoming props/state match the interrupted props/state. If so, bail out and re-use the interrupted children. If not, the interrupted children are no longer useful, because we're about to re-render the parent and overwrite them. (Unmounted fibers actually can be re-used even if we re-render the parent; see next step.)\r\n\r\nThis gets us back to the same functionality we had in the old resuming algorithm. We can now resume interrupted children if we come back to it at the same priority at which it was originally rendered. The main limitation is that the work is lost if the parent is re-rendered at a higher priority.\r\n\r\n**Need a way to distinguish between a work-in-progress fiber and the \"previous current\" fiber*\r\n\r\nPool unmounted, interrupted children so they can resume even if parent re-renders at higher priority\r\n------------------------------------------------------------------------------------\r\n\r\nWhen a fiber is about to be re-rendered, and there are interrupted children that could not be reused, search through the interrupted children and find the ones that are unmounted (don't have an alternate). Stash the unmounted children in a separate set; they can be kept around indefinitely without being overwritten. This set acts like a pool of children. The next time the parent is re-rendered at the priority of the interrupted children, check the pool for matches before creating new fibers.\r\n\r\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11570",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11570/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11570/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11570/events",
        "html_url": "https://github.com/facebook/react/issues/11570",
        "id": 274519273,
        "number": 11570,
        "title": "Reword \"unknown property\" warning to be less obnoxious",
        "user": {
            "login": "gaearon",
            "id": 810438,
            "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gaearon",
            "html_url": "https://github.com/gaearon",
            "followers_url": "https://api.github.com/users/gaearon/followers",
            "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
            "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
            "organizations_url": "https://api.github.com/users/gaearon/orgs",
            "repos_url": "https://api.github.com/users/gaearon/repos",
            "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gaearon/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 40929153,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement",
                "name": "Type: Enhancement",
                "color": "84b6eb",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 11,
        "created_at": "2017-11-16T13:40:45Z",
        "updated_at": "2018-01-05T17:18:18Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "I thought before it might cause knee jerk reactions, and it does in practice: https://twitter.com/freeformflo/status/928454078903894016\r\n\r\nI think we should change the phrasing to a more neutral one. Potentially explaining *why* we prefer camel case. ",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11573",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11573/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11573/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11573/events",
        "html_url": "https://github.com/facebook/react/issues/11573",
        "id": 274621185,
        "number": 11573,
        "title": "Preparing 15.6.3",
        "user": {
            "login": "nhunzaker",
            "id": 590904,
            "avatar_url": "https://avatars3.githubusercontent.com/u/590904?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nhunzaker",
            "html_url": "https://github.com/nhunzaker",
            "followers_url": "https://api.github.com/users/nhunzaker/followers",
            "following_url": "https://api.github.com/users/nhunzaker/following{/other_user}",
            "gists_url": "https://api.github.com/users/nhunzaker/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nhunzaker/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nhunzaker/subscriptions",
            "organizations_url": "https://api.github.com/users/nhunzaker/orgs",
            "repos_url": "https://api.github.com/users/nhunzaker/repos",
            "events_url": "https://api.github.com/users/nhunzaker/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nhunzaker/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 74359453,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Release",
                "name": "Type: Release",
                "color": "00D8EA",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": {
            "login": "aweary",
            "id": 6886061,
            "avatar_url": "https://avatars2.githubusercontent.com/u/6886061?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/aweary",
            "html_url": "https://github.com/aweary",
            "followers_url": "https://api.github.com/users/aweary/followers",
            "following_url": "https://api.github.com/users/aweary/following{/other_user}",
            "gists_url": "https://api.github.com/users/aweary/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/aweary/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/aweary/subscriptions",
            "organizations_url": "https://api.github.com/users/aweary/orgs",
            "repos_url": "https://api.github.com/users/aweary/repos",
            "events_url": "https://api.github.com/users/aweary/events{/privacy}",
            "received_events_url": "https://api.github.com/users/aweary/received_events",
            "type": "User",
            "site_admin": false
        },
        "assignees": [
            {
                "login": "aweary",
                "id": 6886061,
                "avatar_url": "https://avatars2.githubusercontent.com/u/6886061?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/aweary",
                "html_url": "https://github.com/aweary",
                "followers_url": "https://api.github.com/users/aweary/followers",
                "following_url": "https://api.github.com/users/aweary/following{/other_user}",
                "gists_url": "https://api.github.com/users/aweary/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/aweary/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aweary/subscriptions",
                "organizations_url": "https://api.github.com/users/aweary/orgs",
                "repos_url": "https://api.github.com/users/aweary/repos",
                "events_url": "https://api.github.com/users/aweary/events{/privacy}",
                "received_events_url": "https://api.github.com/users/aweary/received_events",
                "type": "User",
                "site_admin": false
            }
        ],
        "milestone": null,
        "comments": 9,
        "created_at": "2017-11-16T18:42:34Z",
        "updated_at": "2018-01-30T00:27:22Z",
        "closed_at": null,
        "author_association": "COLLABORATOR",
        "body": "This is just a running list. It is not comprehensive, but a few things have come through that I don't want to lose track of:\r\n\r\n- [ ] Cherrypick https://github.com/facebook/react/pull/11028 to `15-dev` (@jquense)\r\n- [ ] `fbjs` License update (https://github.com/facebook/react/issues/11233)\r\n- [ ] Changelog\r\n- [ ] Tag\r\n- [ ] Release\r\n- [ ] Release blog post\r\n- [ ] Test the living _heck_ out of it.",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11589",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11589/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11589/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11589/events",
        "html_url": "https://github.com/facebook/react/issues/11589",
        "id": 275033508,
        "number": 11589,
        "title": "Inline-playing <video> element in iOS 11 does not fire click events when rendered with React",
        "user": {
            "login": "jamiekowalski",
            "id": 3357608,
            "avatar_url": "https://avatars0.githubusercontent.com/u/3357608?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jamiekowalski",
            "html_url": "https://github.com/jamiekowalski",
            "followers_url": "https://api.github.com/users/jamiekowalski/followers",
            "following_url": "https://api.github.com/users/jamiekowalski/following{/other_user}",
            "gists_url": "https://api.github.com/users/jamiekowalski/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jamiekowalski/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jamiekowalski/subscriptions",
            "organizations_url": "https://api.github.com/users/jamiekowalski/orgs",
            "repos_url": "https://api.github.com/users/jamiekowalski/repos",
            "events_url": "https://api.github.com/users/jamiekowalski/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jamiekowalski/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 710722093,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
                "name": "Type: Needs Investigation",
                "color": "fbca04",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2017-11-18T00:16:10Z",
        "updated_at": "2018-02-01T20:03:27Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug report\r\n\r\n**What is the current behavior?**\r\n\r\nIf a `<video>` rendered by React is autoplaying inline in iOS 11, it does not fire click events when tapped, even if click handlers are added using native DOM `addEventListener`.\r\n\r\nIf the same example is created without React, the `<video>` does fire click events when it is autoplaying inline.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce**\r\n\r\nDemo: https://jsfiddle.net/6qk071s9/show\r\nCode: https://jsfiddle.net/6qk071s9\r\n\r\n**What is the expected behavior?**\r\n\r\nClick events should be fired.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nIssue appears in React 15.6.2 and 16.1.1 on iOS 11.1; no issue is seen on iOS 10.3 with either version of React",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11593",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11593/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11593/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11593/events",
        "html_url": "https://github.com/facebook/react/issues/11593",
        "id": 275103140,
        "number": 11593,
        "title": "Warn if this.state is set to this.props referentially",
        "user": {
            "login": "gaearon",
            "id": 810438,
            "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gaearon",
            "html_url": "https://github.com/gaearon",
            "followers_url": "https://api.github.com/users/gaearon/followers",
            "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
            "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
            "organizations_url": "https://api.github.com/users/gaearon/orgs",
            "repos_url": "https://api.github.com/users/gaearon/repos",
            "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gaearon/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 739761016,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Reconciler",
                "name": "Component: Reconciler",
                "color": "f9a798",
                "default": false
            },
            {
                "id": 52079258,
                "url": "https://api.github.com/repos/facebook/react/labels/Difficulty:%20starter",
                "name": "Difficulty: starter",
                "color": "94ce52",
                "default": false
            },
            {
                "id": 40929153,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement",
                "name": "Type: Enhancement",
                "color": "84b6eb",
                "default": false
            },
            {
                "id": 725156255,
                "url": "https://api.github.com/repos/facebook/react/labels/good%20first%20issue%20(taken)",
                "name": "good first issue (taken)",
                "color": "b60205",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 9,
        "created_at": "2017-11-18T19:24:43Z",
        "updated_at": "2018-03-14T19:59:33Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "See this example: https://github.com/facebook/react/issues/11508#issuecomment-345464797.\r\n\r\nI think it probably reflects a misunderstanding of how props and state work, and we should detect and warn if we see this.",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11596",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11596/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11596/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11596/events",
        "html_url": "https://github.com/facebook/react/issues/11596",
        "id": 275287008,
        "number": 11596,
        "title": "Add warning when hydrating output from renderToStaticMarkup",
        "user": {
            "login": "jorrit",
            "id": 521449,
            "avatar_url": "https://avatars3.githubusercontent.com/u/521449?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jorrit",
            "html_url": "https://github.com/jorrit",
            "followers_url": "https://api.github.com/users/jorrit/followers",
            "following_url": "https://api.github.com/users/jorrit/following{/other_user}",
            "gists_url": "https://api.github.com/users/jorrit/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jorrit/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jorrit/subscriptions",
            "organizations_url": "https://api.github.com/users/jorrit/orgs",
            "repos_url": "https://api.github.com/users/jorrit/repos",
            "events_url": "https://api.github.com/users/jorrit/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jorrit/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 710332294,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Server%20Rendering",
                "name": "Component: Server Rendering",
                "color": "d4c5f9",
                "default": false
            },
            {
                "id": 40929153,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement",
                "name": "Type: Enhancement",
                "color": "84b6eb",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2017-11-20T09:27:26Z",
        "updated_at": "2018-02-06T18:11:48Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nFeature\r\n\r\n**What is the current behavior?**\r\nI accidently generated my SSR output using `renderToStaticMarkup` instead of `renderToString`, which I then hydrated using `hydrate`. This  led to a warning, caused by collapsed text nodes. `renderToString` would have added HTML comments between them.\r\n\r\nThe warning I got was: \r\nWarning: Text content did not match. Server: \"a (b)\" Client: \"a\"\r\n\r\nWhen rendering:\r\n```jsx\r\n    const a = 'a';\r\n    const b = 'b';\r\n    const component = <select><option>{a} ({b})</option></select>;\r\n```\r\n\r\nIt would be nice if `hydrate`  could detect that it is executed on output from `renderToStaticMarkup` instead of `renderToString`. It seems to me a simple check on the `data-reactroot` attribute on the root element would suffice.\r\n\r\n**What is the expected behavior?**\r\n\r\nI would like some kind of warning along the following lines:\r\n\r\n`Warning: You are hydrating output that was not created by ReactDOMServer.renderToString(). Perhaps you are using ReactDOMServer.renderToStaticMarkup() or modifying the output after rendering. Please see ... for more information.`\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n16.1.1.\r\n\r\nDue to the changes in 16, this worked before.",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11598",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11598/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11598/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11598/events",
        "html_url": "https://github.com/facebook/react/issues/11598",
        "id": 275348741,
        "number": 11598,
        "title": "Investigate need to feature check cancel and close events.",
        "user": {
            "login": "nhunzaker",
            "id": 590904,
            "avatar_url": "https://avatars3.githubusercontent.com/u/590904?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nhunzaker",
            "html_url": "https://github.com/nhunzaker",
            "followers_url": "https://api.github.com/users/nhunzaker/followers",
            "following_url": "https://api.github.com/users/nhunzaker/following{/other_user}",
            "gists_url": "https://api.github.com/users/nhunzaker/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nhunzaker/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nhunzaker/subscriptions",
            "organizations_url": "https://api.github.com/users/nhunzaker/orgs",
            "repos_url": "https://api.github.com/users/nhunzaker/repos",
            "events_url": "https://api.github.com/users/nhunzaker/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nhunzaker/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 40929153,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement",
                "name": "Type: Enhancement",
                "color": "84b6eb",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": {
            "login": "nhunzaker",
            "id": 590904,
            "avatar_url": "https://avatars3.githubusercontent.com/u/590904?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nhunzaker",
            "html_url": "https://github.com/nhunzaker",
            "followers_url": "https://api.github.com/users/nhunzaker/followers",
            "following_url": "https://api.github.com/users/nhunzaker/following{/other_user}",
            "gists_url": "https://api.github.com/users/nhunzaker/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nhunzaker/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nhunzaker/subscriptions",
            "organizations_url": "https://api.github.com/users/nhunzaker/orgs",
            "repos_url": "https://api.github.com/users/nhunzaker/repos",
            "events_url": "https://api.github.com/users/nhunzaker/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nhunzaker/received_events",
            "type": "User",
            "site_admin": false
        },
        "assignees": [
            {
                "login": "nhunzaker",
                "id": 590904,
                "avatar_url": "https://avatars3.githubusercontent.com/u/590904?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/nhunzaker",
                "html_url": "https://github.com/nhunzaker",
                "followers_url": "https://api.github.com/users/nhunzaker/followers",
                "following_url": "https://api.github.com/users/nhunzaker/following{/other_user}",
                "gists_url": "https://api.github.com/users/nhunzaker/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/nhunzaker/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nhunzaker/subscriptions",
                "organizations_url": "https://api.github.com/users/nhunzaker/orgs",
                "repos_url": "https://api.github.com/users/nhunzaker/repos",
                "events_url": "https://api.github.com/users/nhunzaker/events{/privacy}",
                "received_events_url": "https://api.github.com/users/nhunzaker/received_events",
                "type": "User",
                "site_admin": false
            }
        ],
        "milestone": null,
        "comments": 1,
        "created_at": "2017-11-20T13:04:30Z",
        "updated_at": "2017-11-20T19:39:21Z",
        "closed_at": null,
        "author_association": "COLLABORATOR",
        "body": "The [ReactBrowserEventEmitter checks for browser support of the `cancel` and `close` events.](https://github.com/facebook/react/blob/master/packages/react-dom/src/events/ReactBrowserEventEmitter.js#L136-L138) before attaching those listeners.\r\n\r\nI'm curious why this is necessary. Did we need it for IE8? \r\n\r\nI'd like to:\r\n\r\n- [ ] Determine if there are ramifications to removing these checks\r\n- [ ] Add comments above those lines if these checks are necessary.\r\n- [ ] Maybe eliminate [`isEventSupported.js`](https://github.com/facebook/react/blob/master/packages/react-dom/src/events/isEventSupported.js)",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11602",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11602/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11602/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11602/events",
        "html_url": "https://github.com/facebook/react/issues/11602",
        "id": 275497790,
        "number": 11602,
        "title": "Children of option tags flattened when select has value",
        "user": {
            "login": "jorrit",
            "id": 521449,
            "avatar_url": "https://avatars3.githubusercontent.com/u/521449?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jorrit",
            "html_url": "https://github.com/jorrit",
            "followers_url": "https://api.github.com/users/jorrit/followers",
            "following_url": "https://api.github.com/users/jorrit/following{/other_user}",
            "gists_url": "https://api.github.com/users/jorrit/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jorrit/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jorrit/subscriptions",
            "organizations_url": "https://api.github.com/users/jorrit/orgs",
            "repos_url": "https://api.github.com/users/jorrit/repos",
            "events_url": "https://api.github.com/users/jorrit/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jorrit/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 710332294,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Server%20Rendering",
                "name": "Component: Server Rendering",
                "color": "d4c5f9",
                "default": false
            },
            {
                "id": 588833528,
                "url": "https://api.github.com/repos/facebook/react/labels/Difficulty:%20medium",
                "name": "Difficulty: medium",
                "color": "fbca04",
                "default": false
            },
            {
                "id": 40929151,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
                "name": "Type: Bug",
                "color": "b60205",
                "default": false
            },
            {
                "id": 717031390,
                "url": "https://api.github.com/repos/facebook/react/labels/good%20first%20issue",
                "name": "good first issue",
                "color": "6ce26a",
                "default": true
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 14,
        "created_at": "2017-11-20T21:02:01Z",
        "updated_at": "2018-01-24T19:34:57Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nWhen the following is rendered to string using ReactDOM:\r\n\r\n```jsx\r\n<select value=\"\"><option>a ({`b`})</option></select>\r\n```\r\n\r\nI get\r\n\r\n```html\r\n<select data-reactroot=\"\"><option>a (b)</option></select>\r\n```\r\n\r\nWhen hydrating the above code, I get this warning:\r\n\r\n  Warning: Text content did not match. Server: \"a (b)\" Client: \"a (\"\r\n\r\nFiddle: https://jsfiddle.net/z1q0azjL/1/\r\n\r\n**What is the expected behavior?**\r\n\r\nI should get:\r\n\r\n```html\r\n<select data-reactroot=\"\"><option>a (<!-- -->b<!-- -->)</option></select>\r\n```\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n16.1.1\r\n\r\nThis has something to do with `flattenOptionChildren` in ReactPartialRenderer.js.\r\n\r\nPS:\r\nWhen browsing ReactPartialRenderer.js, I found this code:\r\n\r\n```js\r\n        props = Object.assign(\r\n          {\r\n            selected: undefined,\r\n            children: undefined,\r\n          },\r\n          props,\r\n          {\r\n            selected: selected,\r\n            children: optionChildren,\r\n          },\r\n        );\r\n```\r\n\r\nWhat is the point of those `undefined` props when they are overwritten later on?\r\n\r\n\r\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11609",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11609/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11609/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11609/events",
        "html_url": "https://github.com/facebook/react/issues/11609",
        "id": 275730120,
        "number": 11609,
        "title": "Undo operation on text input throws exception in IE9",
        "user": {
            "login": "nhunzaker",
            "id": 590904,
            "avatar_url": "https://avatars3.githubusercontent.com/u/590904?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nhunzaker",
            "html_url": "https://github.com/nhunzaker",
            "followers_url": "https://api.github.com/users/nhunzaker/followers",
            "following_url": "https://api.github.com/users/nhunzaker/following{/other_user}",
            "gists_url": "https://api.github.com/users/nhunzaker/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nhunzaker/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nhunzaker/subscriptions",
            "organizations_url": "https://api.github.com/users/nhunzaker/orgs",
            "repos_url": "https://api.github.com/users/nhunzaker/repos",
            "events_url": "https://api.github.com/users/nhunzaker/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nhunzaker/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 69105383,
                "url": "https://api.github.com/repos/facebook/react/labels/Browser:%20IE",
                "name": "Browser: IE",
                "color": "c7def8",
                "default": false
            },
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 40929151,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
                "name": "Type: Bug",
                "color": "b60205",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 4,
        "created_at": "2017-11-21T14:24:38Z",
        "updated_at": "2018-03-31T13:57:37Z",
        "closed_at": null,
        "author_association": "COLLABORATOR",
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nThis is a bug report. It looks like IE9 is unmounting text nodes when undoing text input operations. If the display value of the input is rendered in another component, it raises an exception because IE9 does not allow changes to `nodeValue` on unmounted text nodes.\r\n\r\nI think that's the issue, anyway. It is documented here:\r\n\r\nhttps://connect.microsoft.com/IE/feedbackdetail/view/944330/invalid-argument-error-when-changing-nodevalue-of-a-text-node-removed-by-setting-innerhtml-on-an-ancestor\r\n\r\n**What is the current behavior?**\r\n\r\n1. Open http://react-dom-test-fixtures.surge.sh/number-inputs in IE9\r\n2. Change the text in the first controlled text input\r\n3. Start debugging in the IE9 developer tools\r\n4. Press ctrl+z to undo your text change\r\n5. IE9 raises an exception when setting the nodeValue of the text label to the right of the input \"invalid arguments\":\r\n\r\n**What is the expected behavior?**\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nThis affects IE9 when using React 16. It is also an issue on master.\r\n\r\n--- \r\n\r\nThe issue springs up in ReactDOM.js:\r\n\r\nhttps://github.com/facebook/react/blob/master/packages/react-dom/src/client/ReactDOM.js#L392-L398\r\n\r\nI think there just needs to be a wrapper around the text node to see if it has a parent before updating. Maybe something like:\r\n\r\n```javascript\r\ncommitTextUpdate(\r\n  textInstance: TextInstance,\r\n  oldText: string,\r\n  newText: string,\r\n): void {\r\n  // IE9 will raise an exception if modifying a detached text node\r\n  // https://connect.microsoft.com/IE/feedbackdetail/view/944330/invalid-argument-error-when-changing-nodevalue-of-a-text-node-removed-by-setting-innerhtml-on-an-ancestor\r\n  if (textInstance.parentNode) {\r\n    textInstance.nodeValue = newText;\r\n  }\r\n}\r\n```\r\n\r\nBut that feels like a band-aid solution. I'm curious what is causing the text node to unmount to begin-with.",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11610",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11610/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11610/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11610/events",
        "html_url": "https://github.com/facebook/react/issues/11610",
        "id": 275750060,
        "number": 11610,
        "title": "Unfork GCC",
        "user": {
            "login": "gaearon",
            "id": 810438,
            "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gaearon",
            "html_url": "https://github.com/gaearon",
            "followers_url": "https://api.github.com/users/gaearon/followers",
            "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
            "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
            "organizations_url": "https://api.github.com/users/gaearon/orgs",
            "repos_url": "https://api.github.com/users/gaearon/repos",
            "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gaearon/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 71502270,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Build%20Infrastructure",
                "name": "Component: Build Infrastructure",
                "color": "f9d0c4",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": {
            "login": "gaearon",
            "id": 810438,
            "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gaearon",
            "html_url": "https://github.com/gaearon",
            "followers_url": "https://api.github.com/users/gaearon/followers",
            "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
            "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
            "organizations_url": "https://api.github.com/users/gaearon/orgs",
            "repos_url": "https://api.github.com/users/gaearon/repos",
            "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gaearon/received_events",
            "type": "User",
            "site_admin": false
        },
        "assignees": [
            {
                "login": "gaearon",
                "id": 810438,
                "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/gaearon",
                "html_url": "https://github.com/gaearon",
                "followers_url": "https://api.github.com/users/gaearon/followers",
                "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
                "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
                "organizations_url": "https://api.github.com/users/gaearon/orgs",
                "repos_url": "https://api.github.com/users/gaearon/repos",
                "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
                "received_events_url": "https://api.github.com/users/gaearon/received_events",
                "type": "User",
                "site_admin": false
            }
        ],
        "milestone": null,
        "comments": 1,
        "created_at": "2017-11-21T15:20:07Z",
        "updated_at": "2017-12-11T16:18:23Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "We're currently using a fork of GCC because its [JS version](https://github.com/google/closure-compiler-js) is not updated yet to the GCC version that includes https://github.com/google/closure-compiler/pull/2707. See https://github.com/google/closure-compiler-js/pull/83#issuecomment-344099311.\r\n\r\nWhen there is a new release of the JS version that includes that PR, we should remove [this fork](https://github.com/facebook/react/blob/7e692fb496e764844680c681a38e42f99e1f218d/yarn.lock#L2169).",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11619",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11619/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11619/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11619/events",
        "html_url": "https://github.com/facebook/react/issues/11619",
        "id": 275927244,
        "number": 11619,
        "title": "Include component stack in invariants",
        "user": {
            "login": "gaearon",
            "id": 810438,
            "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gaearon",
            "html_url": "https://github.com/gaearon",
            "followers_url": "https://api.github.com/users/gaearon/followers",
            "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
            "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
            "organizations_url": "https://api.github.com/users/gaearon/orgs",
            "repos_url": "https://api.github.com/users/gaearon/repos",
            "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gaearon/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 40929153,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement",
                "name": "Type: Enhancement",
                "color": "84b6eb",
                "default": false
            },
            {
                "id": 725156255,
                "url": "https://api.github.com/repos/facebook/react/labels/good%20first%20issue%20(taken)",
                "name": "good first issue (taken)",
                "color": "b60205",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 8,
        "created_at": "2017-11-22T02:46:07Z",
        "updated_at": "2018-01-11T05:51:23Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "IIRC we didn't include it because it was DEV-only. But it's not anymore.\r\nMaybe let's start including it?\r\n\r\nErrors are often more prominent than warnings, and it would be great to have this info in both.",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11656",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11656/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11656/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11656/events",
        "html_url": "https://github.com/facebook/react/issues/11656",
        "id": 276720857,
        "number": 11656,
        "title": "Deprecate TestUtils.SimulateNative",
        "user": {
            "login": "gaearon",
            "id": 810438,
            "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gaearon",
            "html_url": "https://github.com/gaearon",
            "followers_url": "https://api.github.com/users/gaearon/followers",
            "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
            "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
            "organizations_url": "https://api.github.com/users/gaearon/orgs",
            "repos_url": "https://api.github.com/users/gaearon/repos",
            "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gaearon/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 139734344,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Test%20Utils",
                "name": "Component: Test Utils",
                "color": "eb6420",
                "default": false
            },
            {
                "id": 763742499,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Breaking%20Change",
                "name": "Type: Breaking Change",
                "color": "aa2608",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 3,
        "created_at": "2017-11-25T02:56:16Z",
        "updated_at": "2017-11-29T22:18:19Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "I'm not sure if it was ever intended to be a part of public API.\r\n\r\nIt's not documented, and its naming is misleading because it actually doesn't simulate a native event (oops!). It only simulates what React would do if it *received* that native event. It does that in a way that's very tightly coupled to the event system internals which is unfortunate. It is much better if we can educate people how to dispatch actual browser events in tests instead.\r\n\r\nI think we should just deprecate it. We've removed most tests relying on it, and can leave a test or two until it can be deleted in the next major.",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11667",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11667/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11667/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11667/events",
        "html_url": "https://github.com/facebook/react/issues/11667",
        "id": 276864227,
        "number": 11667,
        "title": "RFC: Drop isAttributeNameSafe() check in React 17",
        "user": {
            "login": "gaearon",
            "id": 810438,
            "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gaearon",
            "html_url": "https://github.com/gaearon",
            "followers_url": "https://api.github.com/users/gaearon/followers",
            "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
            "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
            "organizations_url": "https://api.github.com/users/gaearon/orgs",
            "repos_url": "https://api.github.com/users/gaearon/repos",
            "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gaearon/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 763742499,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Breaking%20Change",
                "name": "Type: Breaking Change",
                "color": "aa2608",
                "default": false
            },
            {
                "id": 40929153,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement",
                "name": "Type: Enhancement",
                "color": "84b6eb",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": {
            "url": "https://api.github.com/repos/facebook/react/milestones/40",
            "html_url": "https://github.com/facebook/react/milestone/40",
            "labels_url": "https://api.github.com/repos/facebook/react/milestones/40/labels",
            "id": 2937756,
            "number": 40,
            "title": "17.0.0",
            "description": "",
            "creator": {
                "login": "gaearon",
                "id": 810438,
                "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/gaearon",
                "html_url": "https://github.com/gaearon",
                "followers_url": "https://api.github.com/users/gaearon/followers",
                "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
                "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
                "organizations_url": "https://api.github.com/users/gaearon/orgs",
                "repos_url": "https://api.github.com/users/gaearon/repos",
                "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
                "received_events_url": "https://api.github.com/users/gaearon/received_events",
                "type": "User",
                "site_admin": false
            },
            "open_issues": 6,
            "closed_issues": 1,
            "state": "open",
            "created_at": "2017-11-26T22:47:57Z",
            "updated_at": "2018-01-05T18:53:12Z",
            "due_on": null,
            "closed_at": null
        },
        "comments": 8,
        "created_at": "2017-11-26T22:50:11Z",
        "updated_at": "2017-11-28T20:51:36Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "We currently validate DOM attributes on the client and ignore the ones with invalid names:\r\n\r\nhttps://github.com/facebook/react/blob/0c164bb4851e78e5f789dd8619f17ffcfee0221f/packages/react-dom/src/client/DOMPropertyOperations.js#L202-L204\r\n\r\nThis check used to be important for safety when we did `innerHTML` rendering on the client side, but it's not anymore. If we just let it call `setAttribute`, the browser would throw on a bad attribute name.\r\n\r\nThis check used to run very infrequently (only for data attributes and custom elements), but now more attributes follow this code path (since any \"simple\" attributes with the same names are effectively treated as unknown attributes). So even though we cache the result, it seems unfortunate to do the work that the browser is already doing for us.\r\n\r\nWhile this would be a breaking change (so it has to go in 17), I think we should just remove this check, and let the browser throw. This does make spreading props blindly a bit more dangerous, but we have a warning so it should be visible.",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11674",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11674/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11674/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11674/events",
        "html_url": "https://github.com/facebook/react/issues/11674",
        "id": 277175370,
        "number": 11674,
        "title": "Resetting a form containing a focused controlled number input puts it out of step with state",
        "user": {
            "login": "aweary",
            "id": 6886061,
            "avatar_url": "https://avatars2.githubusercontent.com/u/6886061?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/aweary",
            "html_url": "https://github.com/aweary",
            "followers_url": "https://api.github.com/users/aweary/followers",
            "following_url": "https://api.github.com/users/aweary/following{/other_user}",
            "gists_url": "https://api.github.com/users/aweary/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/aweary/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/aweary/subscriptions",
            "organizations_url": "https://api.github.com/users/aweary/orgs",
            "repos_url": "https://api.github.com/users/aweary/repos",
            "events_url": "https://api.github.com/users/aweary/events{/privacy}",
            "received_events_url": "https://api.github.com/users/aweary/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2017-11-27T21:29:06Z",
        "updated_at": "2017-11-27T21:29:06Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "Here's a fixture demonstrating the issue (first test case): http://react-number-input-form-reset-bug.surge.sh/number-inputs\r\n\r\nIf you have a controlled number input within a form containing a reset button, hitting Enter can trigger that reset event. This causes the focused input to be reset to the `defaultValue`, which won't be in sync with the tracked value because we do that work on blur for number inputs to avoid triggering validation warnings. This doesn't affect other input types, since the tracked value is updated immediately.\r\n\r\nThis might be a viable tradeoff for avoiding those validation warnings, so I'm not sure if this is actionable, but I wanted to at least document it for future reference.\r\n\r\n\r\ncc @nhunzaker @gaearon \r\n\r\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11678",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11678/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11678/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11678/events",
        "html_url": "https://github.com/facebook/react/issues/11678",
        "id": 277211214,
        "number": 11678,
        "title": "Disabled button click event propagates in IE11",
        "user": {
            "login": "Blasz",
            "id": 2231370,
            "avatar_url": "https://avatars1.githubusercontent.com/u/2231370?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Blasz",
            "html_url": "https://github.com/Blasz",
            "followers_url": "https://api.github.com/users/Blasz/followers",
            "following_url": "https://api.github.com/users/Blasz/following{/other_user}",
            "gists_url": "https://api.github.com/users/Blasz/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Blasz/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Blasz/subscriptions",
            "organizations_url": "https://api.github.com/users/Blasz/orgs",
            "repos_url": "https://api.github.com/users/Blasz/repos",
            "events_url": "https://api.github.com/users/Blasz/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Blasz/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 6,
        "created_at": "2017-11-27T23:55:54Z",
        "updated_at": "2018-01-22T19:25:24Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nClicking a disabled button in IE11 fires a mouse event that bubbles and is caught by parent click event listeners.\r\nThe event is swallowed/not fired in all other major browsers.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template for React 16: https://jsfiddle.net/Luktwrdm/, template for React 15: https://jsfiddle.net/hmbg7e9w/).**\r\nhttps://codesandbox.io/s/r0q76vqjwn\r\n\r\n**What is the expected behavior?**\r\nThe event should not fire or bubble.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact 15.6.2 - IE11",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11687",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11687/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11687/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11687/events",
        "html_url": "https://github.com/facebook/react/issues/11687",
        "id": 277528576,
        "number": 11687,
        "title": "react-dom: Ability to access window.event in development",
        "user": {
            "login": "ConradIrwin",
            "id": 94272,
            "avatar_url": "https://avatars2.githubusercontent.com/u/94272?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ConradIrwin",
            "html_url": "https://github.com/ConradIrwin",
            "followers_url": "https://api.github.com/users/ConradIrwin/followers",
            "following_url": "https://api.github.com/users/ConradIrwin/following{/other_user}",
            "gists_url": "https://api.github.com/users/ConradIrwin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ConradIrwin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ConradIrwin/subscriptions",
            "organizations_url": "https://api.github.com/users/ConradIrwin/orgs",
            "repos_url": "https://api.github.com/users/ConradIrwin/repos",
            "events_url": "https://api.github.com/users/ConradIrwin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ConradIrwin/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 40929151,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
                "name": "Type: Bug",
                "color": "b60205",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 4,
        "created_at": "2017-11-28T20:33:31Z",
        "updated_at": "2017-11-28T23:07:39Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "Imported from https://github.com/facebook/react/issues/10474#issuecomment-345331144 at request of @gaearon \r\n\r\n**Do you want to request a *feature* or report a *bug*?** Bug\r\n\r\n**What is the current behavior?**\r\n\r\nIn development mode React uses `invokeGuardedCallback` to be able to catch errors without interrupting the normal \"break on uncaught exceptions\" feature of devtools.\r\n\r\nIn the current implementation of `invokeGuardedCallback` an event is created and dispatched, which allows for error handling without a `try{ } catch` block.\r\n\r\nUnfortunately it has the side effect of overriding `window.event`, and so you are unable to access `window.event` within guarded callbacks when running React in development mode. In production mode it works fine.\r\n\r\nWe would like to access window.event at Superhuman to be able to detect where DOM focus is from the user's point of view. Usually this is document.activeElement, but in a few cases (like during a blur event, or when clicking between two iframes) the focus will end up in a different place.\r\n\r\nThis works fine in production, and we currently work around this in development mode by overriding `ReactDOM.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactDOMEventListener.handleTopLevel` and maintiaining a reference to the event. In production mode we just use window.event.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template for React 16: https://jsfiddle.net/Luktwrdm/, template for React 15: https://jsfiddle.net/hmbg7e9w/).**\r\n\r\nin development: https://jsfiddle.net/n782L2qg/, in production: https://jsfiddle.net/kqt2o7pr/. In both cases I would expect the alert to say `window.event.type: click`, but in development it says `window.event.type: react-invokeguardedcallback`\r\n\r\n**What is the expected behavior?**\r\n\r\nI would like a way to access window.event in development. I'm happy for this to be somewhat obscure, but ideally I would not have to use the secret internals to make this work.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** Development 0.15 and 0.16 at least. probably before.\r\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11689",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11689/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11689/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11689/events",
        "html_url": "https://github.com/facebook/react/issues/11689",
        "id": 277533137,
        "number": 11689,
        "title": "Remove support for TapEventPlugin",
        "user": {
            "login": "gaearon",
            "id": 810438,
            "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gaearon",
            "html_url": "https://github.com/gaearon",
            "followers_url": "https://api.github.com/users/gaearon/followers",
            "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
            "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
            "organizations_url": "https://api.github.com/users/gaearon/orgs",
            "repos_url": "https://api.github.com/users/gaearon/repos",
            "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gaearon/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 763742499,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Breaking%20Change",
                "name": "Type: Breaking Change",
                "color": "aa2608",
                "default": false
            },
            {
                "id": 710375792,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
                "name": "Type: Discussion",
                "color": "fef2c0",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": {
            "url": "https://api.github.com/repos/facebook/react/milestones/40",
            "html_url": "https://github.com/facebook/react/milestone/40",
            "labels_url": "https://api.github.com/repos/facebook/react/milestones/40/labels",
            "id": 2937756,
            "number": 40,
            "title": "17.0.0",
            "description": "",
            "creator": {
                "login": "gaearon",
                "id": 810438,
                "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/gaearon",
                "html_url": "https://github.com/gaearon",
                "followers_url": "https://api.github.com/users/gaearon/followers",
                "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
                "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
                "organizations_url": "https://api.github.com/users/gaearon/orgs",
                "repos_url": "https://api.github.com/users/gaearon/repos",
                "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
                "received_events_url": "https://api.github.com/users/gaearon/received_events",
                "type": "User",
                "site_admin": false
            },
            "open_issues": 6,
            "closed_issues": 1,
            "state": "open",
            "created_at": "2017-11-26T22:47:57Z",
            "updated_at": "2018-01-05T18:53:12Z",
            "due_on": null,
            "closed_at": null
        },
        "comments": 2,
        "created_at": "2017-11-28T20:49:30Z",
        "updated_at": "2017-11-28T22:56:07Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "Some libraries relied on it so we kept it in 16, but it's impossible to support it forever given that we want to make changes to the event system. We should deprecate [the injection it relies on](https://github.com/zilverline/react-tap-event-plugin/blob/f7ed5c560011590d24e07480686b234b2f3ea1f5/src/injectTapEventPlugin.js#L23) and remove it in React 17. The migration path is to turn it into a userland `<Tappable>` component or something like that. Hopefully somebody using `TapEventPlugin` can work on this, as we don't actively use it.",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11734",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11734/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11734/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11734/events",
        "html_url": "https://github.com/facebook/react/issues/11734",
        "id": 278323630,
        "number": 11734,
        "title": "value|defaultValue={Symbol|Function} should be ignored, not stringified",
        "user": {
            "login": "gaearon",
            "id": 810438,
            "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gaearon",
            "html_url": "https://github.com/gaearon",
            "followers_url": "https://api.github.com/users/gaearon/followers",
            "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
            "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
            "organizations_url": "https://api.github.com/users/gaearon/orgs",
            "repos_url": "https://api.github.com/users/gaearon/repos",
            "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gaearon/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 52079258,
                "url": "https://api.github.com/repos/facebook/react/labels/Difficulty:%20starter",
                "name": "Difficulty: starter",
                "color": "94ce52",
                "default": false
            },
            {
                "id": 40929151,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
                "name": "Type: Bug",
                "color": "b60205",
                "default": false
            },
            {
                "id": 725156255,
                "url": "https://api.github.com/repos/facebook/react/labels/good%20first%20issue%20(taken)",
                "name": "good first issue (taken)",
                "color": "b60205",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": {
            "login": "nhunzaker",
            "id": 590904,
            "avatar_url": "https://avatars3.githubusercontent.com/u/590904?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nhunzaker",
            "html_url": "https://github.com/nhunzaker",
            "followers_url": "https://api.github.com/users/nhunzaker/followers",
            "following_url": "https://api.github.com/users/nhunzaker/following{/other_user}",
            "gists_url": "https://api.github.com/users/nhunzaker/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nhunzaker/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nhunzaker/subscriptions",
            "organizations_url": "https://api.github.com/users/nhunzaker/orgs",
            "repos_url": "https://api.github.com/users/nhunzaker/repos",
            "events_url": "https://api.github.com/users/nhunzaker/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nhunzaker/received_events",
            "type": "User",
            "site_admin": false
        },
        "assignees": [
            {
                "login": "nhunzaker",
                "id": 590904,
                "avatar_url": "https://avatars3.githubusercontent.com/u/590904?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/nhunzaker",
                "html_url": "https://github.com/nhunzaker",
                "followers_url": "https://api.github.com/users/nhunzaker/followers",
                "following_url": "https://api.github.com/users/nhunzaker/following{/other_user}",
                "gists_url": "https://api.github.com/users/nhunzaker/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/nhunzaker/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nhunzaker/subscriptions",
                "organizations_url": "https://api.github.com/users/nhunzaker/orgs",
                "repos_url": "https://api.github.com/users/nhunzaker/repos",
                "events_url": "https://api.github.com/users/nhunzaker/events{/privacy}",
                "received_events_url": "https://api.github.com/users/nhunzaker/received_events",
                "type": "User",
                "site_admin": false
            }
        ],
        "milestone": null,
        "comments": 10,
        "created_at": "2017-12-01T01:01:08Z",
        "updated_at": "2018-03-16T15:40:10Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "Regression in master from https://github.com/facebook/react/pull/11534.\r\nFound it thanks to the attribute fixture snapshots.",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11735",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11735/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11735/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11735/events",
        "html_url": "https://github.com/facebook/react/issues/11735",
        "id": 278325058,
        "number": 11735,
        "title": "Do we still need to stringify attributes before assigning them?",
        "user": {
            "login": "nhunzaker",
            "id": 590904,
            "avatar_url": "https://avatars3.githubusercontent.com/u/590904?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nhunzaker",
            "html_url": "https://github.com/nhunzaker",
            "followers_url": "https://api.github.com/users/nhunzaker/followers",
            "following_url": "https://api.github.com/users/nhunzaker/following{/other_user}",
            "gists_url": "https://api.github.com/users/nhunzaker/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nhunzaker/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nhunzaker/subscriptions",
            "organizations_url": "https://api.github.com/users/nhunzaker/orgs",
            "repos_url": "https://api.github.com/users/nhunzaker/repos",
            "events_url": "https://api.github.com/users/nhunzaker/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nhunzaker/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 40929153,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement",
                "name": "Type: Enhancement",
                "color": "84b6eb",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2017-12-01T01:09:22Z",
        "updated_at": "2017-12-01T09:01:35Z",
        "closed_at": null,
        "author_association": "COLLABORATOR",
        "body": "React manually stringifies all attributes before assigning them:\r\n\r\nhttps://github.com/facebook/react/blob/master/packages/react-dom/src/client/DOMPropertyOperations.js#L169-L179\r\n\r\nThis appears to be for IE8/9. However it's possible that this is an IE8 only behavior. See IE9:\r\n\r\n<img width=\"1104\" alt=\"screen shot 2017-11-30 at 8 02 51 pm\" src=\"https://user-images.githubusercontent.com/590904/33463221-2eeb4770-d60a-11e7-9915-2a2918ca22b9.png\">\r\n\r\n<img width=\"752\" alt=\"screen shot 2017-11-30 at 8 03 38 pm\" src=\"https://user-images.githubusercontent.com/590904/33463224-3595328e-d60a-11e7-9786-e2ac050ffb53.png\">\r\n\r\nCan we get rid of `'' + value` in DOMPropertyOperations?\r\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11748",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11748/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11748/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11748/events",
        "html_url": "https://github.com/facebook/react/issues/11748",
        "id": 278595717,
        "number": 11748,
        "title": "Investigate forEach() iterations showing up in init time profiling",
        "user": {
            "login": "gaearon",
            "id": 810438,
            "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gaearon",
            "html_url": "https://github.com/gaearon",
            "followers_url": "https://api.github.com/users/gaearon/followers",
            "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
            "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
            "organizations_url": "https://api.github.com/users/gaearon/orgs",
            "repos_url": "https://api.github.com/users/gaearon/repos",
            "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gaearon/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 710722093,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
                "name": "Type: Needs Investigation",
                "color": "fbca04",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2017-12-01T21:03:53Z",
        "updated_at": "2017-12-04T13:41:43Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "Not sure if this is real, but Chrome profiler highlights a few places where we have `forEach` on init time as hot paths taking ~30ms.\r\n\r\n<img width=\"530\" alt=\"screen shot 2017-12-01 at 21 02 48\" src=\"https://user-images.githubusercontent.com/810438/33503308-1e530ba6-d6db-11e7-95fa-45c7af34e79d.png\">\r\n<img width=\"408\" alt=\"screen shot 2017-12-01 at 21 02 55\" src=\"https://user-images.githubusercontent.com/810438/33503309-1e6ac138-d6db-11e7-9027-37f37ae6b7f6.png\">\r\n\r\nNeed to have a good look at these.",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11763",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11763/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11763/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11763/events",
        "html_url": "https://github.com/facebook/react/issues/11763",
        "id": 279063760,
        "number": 11763,
        "title": "Figure out a better fix for memory leak",
        "user": {
            "login": "gaearon",
            "id": 810438,
            "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gaearon",
            "html_url": "https://github.com/gaearon",
            "followers_url": "https://api.github.com/users/gaearon/followers",
            "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
            "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
            "organizations_url": "https://api.github.com/users/gaearon/orgs",
            "repos_url": "https://api.github.com/users/gaearon/repos",
            "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gaearon/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 739761016,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Reconciler",
                "name": "Component: Reconciler",
                "color": "f9a798",
                "default": false
            },
            {
                "id": 40929153,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement",
                "name": "Type: Enhancement",
                "color": "84b6eb",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": {
            "login": "acdlite",
            "id": 3624098,
            "avatar_url": "https://avatars0.githubusercontent.com/u/3624098?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/acdlite",
            "html_url": "https://github.com/acdlite",
            "followers_url": "https://api.github.com/users/acdlite/followers",
            "following_url": "https://api.github.com/users/acdlite/following{/other_user}",
            "gists_url": "https://api.github.com/users/acdlite/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/acdlite/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/acdlite/subscriptions",
            "organizations_url": "https://api.github.com/users/acdlite/orgs",
            "repos_url": "https://api.github.com/users/acdlite/repos",
            "events_url": "https://api.github.com/users/acdlite/events{/privacy}",
            "received_events_url": "https://api.github.com/users/acdlite/received_events",
            "type": "User",
            "site_admin": false
        },
        "assignees": [
            {
                "login": "acdlite",
                "id": 3624098,
                "avatar_url": "https://avatars0.githubusercontent.com/u/3624098?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/acdlite",
                "html_url": "https://github.com/acdlite",
                "followers_url": "https://api.github.com/users/acdlite/followers",
                "following_url": "https://api.github.com/users/acdlite/following{/other_user}",
                "gists_url": "https://api.github.com/users/acdlite/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/acdlite/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/acdlite/subscriptions",
                "organizations_url": "https://api.github.com/users/acdlite/orgs",
                "repos_url": "https://api.github.com/users/acdlite/repos",
                "events_url": "https://api.github.com/users/acdlite/events{/privacy}",
                "received_events_url": "https://api.github.com/users/acdlite/received_events",
                "type": "User",
                "site_admin": false
            }
        ],
        "milestone": null,
        "comments": 0,
        "created_at": "2017-12-04T16:41:55Z",
        "updated_at": "2017-12-04T16:42:03Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "See https://github.com/facebook/react/pull/11644. Filing this as a follow up.",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11789",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11789/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11789/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11789/events",
        "html_url": "https://github.com/facebook/react/issues/11789",
        "id": 279955176,
        "number": 11789,
        "title": "hydrating a component with `dangerouslySetInnerHTML` and `toString` causes a warning, and the component to not render",
        "user": {
            "login": "magicmark",
            "id": 1590756,
            "avatar_url": "https://avatars1.githubusercontent.com/u/1590756?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/magicmark",
            "html_url": "https://github.com/magicmark",
            "followers_url": "https://api.github.com/users/magicmark/followers",
            "following_url": "https://api.github.com/users/magicmark/following{/other_user}",
            "gists_url": "https://api.github.com/users/magicmark/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/magicmark/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/magicmark/subscriptions",
            "organizations_url": "https://api.github.com/users/magicmark/orgs",
            "repos_url": "https://api.github.com/users/magicmark/repos",
            "events_url": "https://api.github.com/users/magicmark/events{/privacy}",
            "received_events_url": "https://api.github.com/users/magicmark/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 710332294,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Server%20Rendering",
                "name": "Component: Server Rendering",
                "color": "d4c5f9",
                "default": false
            },
            {
                "id": 40929151,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
                "name": "Type: Bug",
                "color": "b60205",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 4,
        "created_at": "2017-12-07T00:21:56Z",
        "updated_at": "2018-05-09T15:16:23Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nbug\r\n\r\n**What is the current behavior?**\r\n\r\nWhen hydrating a pre-rendered component that uses `dangerouslySetInnerHTML`, + an object with a `toString` method, we get a warning such as:\r\n\r\n```\r\nWarning: Did not expect server HTML to contain the text node \"Bonjour\" in <p>.\r\n```\r\n\r\nThe component will also appear blank.\r\n\r\nThis is noteworthy since:\r\n- The markup returned by `render` appears to be correct, meaning:\r\n  - The markup that an SSR server returns is correct\r\n  - The markup that appears on page if we just use `render` on the client, without SSR is correct\r\n- It's only if we do both, that we get errors.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template for React 16: https://jsfiddle.net/Luktwrdm/, template for React 15: https://jsfiddle.net/hmbg7e9w/).**\r\n\r\nhttps://codesandbox.io/s/vqkq34o965\r\n\r\n(Code, for posterity:)\r\n```js\r\nimport React from \"react\";\r\nimport { hydrate } from \"react-dom\";\r\n\r\nconst HelloObj = {\r\n  toString: () => \"Bonjour\"\r\n};\r\n\r\nconst MyComponent = () => (\r\n  <p\r\n    dangerouslySetInnerHTML={{\r\n      __html: HelloObj\r\n    }}\r\n  />\r\n);\r\n\r\nhydrate(<MyComponent />, document.getElementById(\"app\"));\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\nThe component is not blank, and no error is outputted in the console\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n- react/react-dom 16.2.0\r\n  - This worked < 16 (confirmed working in 15.6.1, if we use the `render` method)\r\n- Chrome Version 62.0.3202.94\r\n- OS X 10.12.6",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11799",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11799/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11799/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11799/events",
        "html_url": "https://github.com/facebook/react/issues/11799",
        "id": 280295918,
        "number": 11799,
        "title": "Consider removing XML compatibility from SSR or hiding it behind an option",
        "user": {
            "login": "gaearon",
            "id": 810438,
            "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gaearon",
            "html_url": "https://github.com/gaearon",
            "followers_url": "https://api.github.com/users/gaearon/followers",
            "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
            "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
            "organizations_url": "https://api.github.com/users/gaearon/orgs",
            "repos_url": "https://api.github.com/users/gaearon/repos",
            "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gaearon/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 710332294,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Server%20Rendering",
                "name": "Component: Server Rendering",
                "color": "d4c5f9",
                "default": false
            },
            {
                "id": 763742499,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Breaking%20Change",
                "name": "Type: Breaking Change",
                "color": "aa2608",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": {
            "url": "https://api.github.com/repos/facebook/react/milestones/40",
            "html_url": "https://github.com/facebook/react/milestone/40",
            "labels_url": "https://api.github.com/repos/facebook/react/milestones/40/labels",
            "id": 2937756,
            "number": 40,
            "title": "17.0.0",
            "description": "",
            "creator": {
                "login": "gaearon",
                "id": 810438,
                "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/gaearon",
                "html_url": "https://github.com/gaearon",
                "followers_url": "https://api.github.com/users/gaearon/followers",
                "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
                "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
                "organizations_url": "https://api.github.com/users/gaearon/orgs",
                "repos_url": "https://api.github.com/users/gaearon/repos",
                "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
                "received_events_url": "https://api.github.com/users/gaearon/received_events",
                "type": "User",
                "site_admin": false
            },
            "open_issues": 6,
            "closed_issues": 1,
            "state": "open",
            "created_at": "2017-11-26T22:47:57Z",
            "updated_at": "2018-01-05T18:53:12Z",
            "due_on": null,
            "closed_at": null
        },
        "comments": 2,
        "created_at": "2017-12-07T22:05:51Z",
        "updated_at": "2017-12-08T10:10:04Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "See https://github.com/facebook/react/pull/11708#issuecomment-349953542.\r\nNot sure if it's important but seems suboptimal to send extra markup if most people don't need XML.",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11805",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11805/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11805/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11805/events",
        "html_url": "https://github.com/facebook/react/issues/11805",
        "id": 280335165,
        "number": 11805,
        "title": "Run benchmark trials in random order",
        "user": {
            "login": "gaearon",
            "id": 810438,
            "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gaearon",
            "html_url": "https://github.com/gaearon",
            "followers_url": "https://api.github.com/users/gaearon/followers",
            "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
            "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
            "organizations_url": "https://api.github.com/users/gaearon/orgs",
            "repos_url": "https://api.github.com/users/gaearon/repos",
            "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gaearon/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 71502270,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Build%20Infrastructure",
                "name": "Component: Build Infrastructure",
                "color": "f9d0c4",
                "default": false
            },
            {
                "id": 760751171,
                "url": "https://api.github.com/repos/facebook/react/labels/Difficulty:%20challenging",
                "name": "Difficulty: challenging",
                "color": "f2687c",
                "default": false
            },
            {
                "id": 725156255,
                "url": "https://api.github.com/repos/facebook/react/labels/good%20first%20issue%20(taken)",
                "name": "good first issue (taken)",
                "color": "b60205",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 3,
        "created_at": "2017-12-08T01:09:11Z",
        "updated_at": "2017-12-16T13:48:53Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "Our current benchmark script runs all trials in a specific order.\r\nYou can try it by running:\r\n\r\n```\r\ncd scripts/bench\r\nyarn\r\nyarn start\r\n```\r\n\r\n(Note: it takes a looong time to finish.)\r\n\r\nI think running all trials in a deterministic order like we do now may actually introduce issues. Such as if some other process starts grabbing CPU in the middle of the trials, a specific set of trials (e.g. \"HN\" benchmark on \"base\" repo)  will be affected, and the results skewed.\r\n\r\nBut if we ran all trials in a random order, I would expect any temporary changes to be evenly distributed between random runs, and thus not favor any particular version or benchmark. Wouldn't that be better?\r\n\r\nDoes this make sense? Tagging as a good issue to look into, but I don't promise this would be easy.",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11807",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11807/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11807/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11807/events",
        "html_url": "https://github.com/facebook/react/issues/11807",
        "id": 280347526,
        "number": 11807,
        "title": "ReactDOM.hydrate with IE11 throws warning on style attributes",
        "user": {
            "login": "djeeg",
            "id": 4269005,
            "avatar_url": "https://avatars1.githubusercontent.com/u/4269005?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/djeeg",
            "html_url": "https://github.com/djeeg",
            "followers_url": "https://api.github.com/users/djeeg/followers",
            "following_url": "https://api.github.com/users/djeeg/following{/other_user}",
            "gists_url": "https://api.github.com/users/djeeg/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/djeeg/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/djeeg/subscriptions",
            "organizations_url": "https://api.github.com/users/djeeg/orgs",
            "repos_url": "https://api.github.com/users/djeeg/repos",
            "events_url": "https://api.github.com/users/djeeg/events{/privacy}",
            "received_events_url": "https://api.github.com/users/djeeg/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 69105383,
                "url": "https://api.github.com/repos/facebook/react/labels/Browser:%20IE",
                "name": "Browser: IE",
                "color": "c7def8",
                "default": false
            },
            {
                "id": 710332294,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Server%20Rendering",
                "name": "Component: Server Rendering",
                "color": "d4c5f9",
                "default": false
            },
            {
                "id": 710722093,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
                "name": "Type: Needs Investigation",
                "color": "fbca04",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 3,
        "created_at": "2017-12-08T02:20:24Z",
        "updated_at": "2018-03-07T05:09:08Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nBug? (not a biggy - not sure if IE11 is support for development)\r\n\r\n**What is the current behavior?**\r\n\r\nIE11 seems to always throw a warning for hydration failures\r\neg\r\n\r\n> **Warning: Prop `style` did not match. Server: \"text-decoration: none;\" Client: \"text-decoration:none\"**\r\n\r\nNote: there is a space between the colon and none from Server, Client has no space\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template for React 16: https://jsfiddle.net/Luktwrdm/, template for React 15: https://jsfiddle.net/hmbg7e9w/).**\r\n\r\nHave a SSR rendered component, using inline styles\r\n```\r\n                       <a href=\"/page1\" style={{ textDecoration: \"none\" }}>\r\n                            <h1 className=\"splash-head\">Go to Page1</h1>\r\n                        </a>\r\n```\r\n\r\nThen hydrate it on IE11\r\n`ReactDOM.hydrate(component, document.getElementById(\"app\"));`\r\n\r\nThis **doesnt** occur in either Chrome or Firefox\r\n\r\n**What is the expected behavior?**\r\n\r\nNo warning\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact: 16.1.1\r\nBrowser: IE11\r\n\r\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11812",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11812/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11812/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11812/events",
        "html_url": "https://github.com/facebook/react/issues/11812",
        "id": 280596948,
        "number": 11812,
        "title": "Enable synchronously toggling experimental addUserTimingListener",
        "user": {
            "login": "jsdf",
            "id": 1232587,
            "avatar_url": "https://avatars0.githubusercontent.com/u/1232587?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jsdf",
            "html_url": "https://github.com/jsdf",
            "followers_url": "https://api.github.com/users/jsdf/followers",
            "following_url": "https://api.github.com/users/jsdf/following{/other_user}",
            "gists_url": "https://api.github.com/users/jsdf/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jsdf/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jsdf/subscriptions",
            "organizations_url": "https://api.github.com/users/jsdf/orgs",
            "repos_url": "https://api.github.com/users/jsdf/repos",
            "events_url": "https://api.github.com/users/jsdf/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jsdf/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 710573595,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
                "name": "Component: Developer Tools",
                "color": "fbca04",
                "default": false
            },
            {
                "id": 121709921,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": {
            "login": "gaearon",
            "id": 810438,
            "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gaearon",
            "html_url": "https://github.com/gaearon",
            "followers_url": "https://api.github.com/users/gaearon/followers",
            "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
            "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
            "organizations_url": "https://api.github.com/users/gaearon/orgs",
            "repos_url": "https://api.github.com/users/gaearon/repos",
            "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gaearon/received_events",
            "type": "User",
            "site_admin": false
        },
        "assignees": [
            {
                "login": "gaearon",
                "id": 810438,
                "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/gaearon",
                "html_url": "https://github.com/gaearon",
                "followers_url": "https://api.github.com/users/gaearon/followers",
                "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
                "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
                "organizations_url": "https://api.github.com/users/gaearon/orgs",
                "repos_url": "https://api.github.com/users/gaearon/repos",
                "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
                "received_events_url": "https://api.github.com/users/gaearon/received_events",
                "type": "User",
                "site_admin": false
            }
        ],
        "milestone": null,
        "comments": 1,
        "created_at": "2017-12-08T19:45:41Z",
        "updated_at": "2018-05-18T18:34:33Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "body": "Currently ReactInternals.addUserTimingListener enables logging to the User Timing API inside a `setTimeout`. \r\nHowever, for the use case of building a profiling tool where instrumentation is turned off most \r\nof the time to avoid overhead, then randomly turned on for a period to take a sample, it would be ideal to be able to enable this logging synchronously (eg. turn it on at the start of a callstack and turn it off again at the end of the synchronous stack).\r\n\r\nThis is complicated by the fact that the enabled state of the logging should not be toggled inside a React callstack. As the profiler would have control over when the toggling happens, I think it would be fine to throw an error/return false/something like that if the logging was toggled while inside a React stack, allowing the profiler to try again later.\r\n\r\nIn fact, if the toggling was synchronous the profiler cp avoid this error by doing the toggling at the start and end of an event handler/setTimeout/reqAnimFrame etc which would ensure that we are not inside synchronous call into React (though I'm not quite sure what the implications of Fiber are here; would React async rendering mean that we could re-enter from the event loop at a time when this toggling should not happen?). \r\n\r\nAlternatively the toggling could happen 'async but just later in the same React stack' (like setState). In this case the code requesting the toggling would probably need some kind of callback to know that toggling happened so it can keep track of whether React's logging is on or off. However this variant seems like it would be more complicated to implement, and for our use case I don't think it's any more useful than having the toggling just fail in a recoverable way.\r\n\r\ncc @gaearon ",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11826",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11826/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11826/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11826/events",
        "html_url": "https://github.com/facebook/react/issues/11826",
        "id": 281014071,
        "number": 11826,
        "title": "React does not call onBlur callback",
        "user": {
            "login": "nbob",
            "id": 3524322,
            "avatar_url": "https://avatars0.githubusercontent.com/u/3524322?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nbob",
            "html_url": "https://github.com/nbob",
            "followers_url": "https://api.github.com/users/nbob/followers",
            "following_url": "https://api.github.com/users/nbob/following{/other_user}",
            "gists_url": "https://api.github.com/users/nbob/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nbob/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nbob/subscriptions",
            "organizations_url": "https://api.github.com/users/nbob/orgs",
            "repos_url": "https://api.github.com/users/nbob/repos",
            "events_url": "https://api.github.com/users/nbob/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nbob/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 710722093,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
                "name": "Type: Needs Investigation",
                "color": "fbca04",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 6,
        "created_at": "2017-12-11T13:20:59Z",
        "updated_at": "2018-01-10T23:26:55Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n**Bug**\r\n\r\n**What is the current behavior?**\r\nWhen input control becomes disabled, React does not call onBlur callback\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal https://jsfiddle.net/c22pez5z/\r\n\r\n**What is the expected behavior?**\r\n1. Focus on input element\r\n2. Press Enter button (it makes input disabled)\r\n3. `Blur counter` and `Native blur counter` should be equal.",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11827",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11827/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11827/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11827/events",
        "html_url": "https://github.com/facebook/react/issues/11827",
        "id": 281072678,
        "number": 11827,
        "title": "Cursor jumps when backspacing in a number input (with ShadowDOM)",
        "user": {
            "login": "YellowKirby",
            "id": 1654019,
            "avatar_url": "https://avatars1.githubusercontent.com/u/1654019?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/YellowKirby",
            "html_url": "https://github.com/YellowKirby",
            "followers_url": "https://api.github.com/users/YellowKirby/followers",
            "following_url": "https://api.github.com/users/YellowKirby/following{/other_user}",
            "gists_url": "https://api.github.com/users/YellowKirby/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/YellowKirby/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/YellowKirby/subscriptions",
            "organizations_url": "https://api.github.com/users/YellowKirby/orgs",
            "repos_url": "https://api.github.com/users/YellowKirby/repos",
            "events_url": "https://api.github.com/users/YellowKirby/events{/privacy}",
            "received_events_url": "https://api.github.com/users/YellowKirby/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 588833528,
                "url": "https://api.github.com/repos/facebook/react/labels/Difficulty:%20medium",
                "name": "Difficulty: medium",
                "color": "fbca04",
                "default": false
            },
            {
                "id": 40929151,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
                "name": "Type: Bug",
                "color": "b60205",
                "default": false
            },
            {
                "id": 725156255,
                "url": "https://api.github.com/repos/facebook/react/labels/good%20first%20issue%20(taken)",
                "name": "good first issue (taken)",
                "color": "b60205",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 5,
        "created_at": "2017-12-11T16:08:07Z",
        "updated_at": "2018-01-15T15:20:56Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nbug\r\n\r\n**What is the current behavior?**\r\nNumber inputs with decimal values in Chrome ShadowDOM do not maintain cursor position as user backspaces in the input field.\r\n\r\nSuper low-quality gif (sorry):\r\n<img src=\"https://thumbs.gfycat.com/TautIncredibleEkaltadeta-size_restricted.gif\"/>\r\n\r\nThis issue appears to be similar to the problem here: https://github.com/facebook/react/pull/7359, but in this case it's only custom elements with a shadow root that exhibit the problem.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template for React 16: https://jsfiddle.net/Luktwrdm/, template for React 15: https://jsfiddle.net/hmbg7e9w/).**\r\n1. Have a React component render a number input: `<input type=\"number\" />`.\r\n2. Attach that React component as part of the ShadowDOM node of a custom element.\r\n3. Enter in some decimal value (e.g., `88.88`) into the input.\r\n4. Slowly backspace in the input. As soon as the decimal point would be the last character, the decimal point is removed and the cursor position jumps to the beginning of the input.\r\n\r\nDemo: https://jsfiddle.net/69z2wepo/94566/\r\n\r\n**What is the expected behavior?**\r\n\r\nThe ShadowDOM case behaves like the other cases: when backspacing in the input, the cursor does not jump to the beginning of the input and the decimal point is not unexpectedly deleted.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact 16.2.0 + Chrome 62.0.3202.62 + OSX 10.12.6\r\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11846",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11846/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11846/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11846/events",
        "html_url": "https://github.com/facebook/react/issues/11846",
        "id": 281836303,
        "number": 11846,
        "title": "React 16's new error handling functionality seems to be doing more harm than good",
        "user": {
            "login": "jchitel",
            "id": 530108,
            "avatar_url": "https://avatars3.githubusercontent.com/u/530108?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jchitel",
            "html_url": "https://github.com/jchitel",
            "followers_url": "https://api.github.com/users/jchitel/followers",
            "following_url": "https://api.github.com/users/jchitel/following{/other_user}",
            "gists_url": "https://api.github.com/users/jchitel/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jchitel/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jchitel/subscriptions",
            "organizations_url": "https://api.github.com/users/jchitel/orgs",
            "repos_url": "https://api.github.com/users/jchitel/repos",
            "events_url": "https://api.github.com/users/jchitel/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jchitel/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 710375792,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
                "name": "Type: Discussion",
                "color": "fef2c0",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 5,
        "created_at": "2017-12-13T17:39:03Z",
        "updated_at": "2018-02-24T00:04:59Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "I wasn't sure where to report this, but this is a problem I'm having with a new feature.\r\n\r\nI just finished upgrading my team to React 16. Overall, I think the upgrade is great. We are using fragments and the relaxed constraints on what you can return from render(), and I'm overall very happy with it.\r\n\r\nMy only issue is with error boundaries. The feature seems to be well-intended, and does help out quite a bit. The improved error reporting especially is beautiful and will make debugging a dream.\r\n\r\nThe problem is that I believe we are leaving our users in a worse state by having to display fallback UIs. In a perfect world, we would have no client side errors and none of this would even be a discussion. But unfortunately we do have to deal with client-side errors. I agree that leaving the UI in an unpredictable state is less than desired, but I would argue that it's still better than taking away the UI completely. If a user triggers a client-side error, but the UI is still there, they can continue to use the site with little-to-no issue in the case of *most* errors. But with React 16's new functionality, even the smallest of errors will unmount the UI.\r\n\r\nOur options are:\r\n- Go with the easy route and implement a top-level error boundary that will unmount the whole UI, replacing it with a fallback that does nothing for the user.\r\n- Take significant developer time to implement fine-grained error boundaries that will still leave most of the UI untouched, only replacing components in error. But overall, this will still be taking functionality away from the user.\r\n\r\nEither way, with this new functionality, we need to have at least a top-level error boundary to display *something* to the user. Our top-level boundary still displays our navigation bar so that the user can still navigate away from the page and use other parts of the site. The alternative is that they will need to refresh the page because everything will be unmounted.\r\n\r\nI agree that displaying a fallback UI can be useful in instances where you *expect* an error in some cases (for example, when loading an image from a third party CDN or something). But in cases where a bug is producing an *unexpected* error, we should still be able to keep the UI in its previous state.\r\n\r\nThis is how I envision it working:\r\n- Error boundaries are still exactly as they are today, except...\r\n- If the error was thrown inside the render() of a component, that component will either not be mounted (if it hasn't yet been mounted) or be left in its prior state (if it has already been successfully mounted). The parent of the offending component and all of the parent's other children are still rendered.\r\n- If the error was thrown inside a lifecycle method, the offending component's tree is left as it was, and other children of its parent can still be updated.\r\n- Error boundaries can *still* display a fallback UI if they want. componentDidMount() still has the ability to set state.\r\n\r\nIf you are handling an *expected* error, you should display a fallback UI. If you are handling an *unexpected* error, you should try to leave the UI in the most unbroken state possible for the user. The error should still be reported and caught by a top-level error boundary so that it can be logged, but the UI should not need to be replaced in all instances.\r\n\r\nPerhaps I'm missing out on a standard process for handling these problems I'm talking about, and I am happy to hear what other people are doing to get around this, but I believe this feature as it exists today means more work for developers, and poor functionality for users.",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11855",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11855/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11855/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11855/events",
        "html_url": "https://github.com/facebook/react/issues/11855",
        "id": 282152813,
        "number": 11855,
        "title": "Bug in scryRenderedComponentsWithType",
        "user": {
            "login": "pronebird",
            "id": 704044,
            "avatar_url": "https://avatars2.githubusercontent.com/u/704044?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pronebird",
            "html_url": "https://github.com/pronebird",
            "followers_url": "https://api.github.com/users/pronebird/followers",
            "following_url": "https://api.github.com/users/pronebird/following{/other_user}",
            "gists_url": "https://api.github.com/users/pronebird/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pronebird/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pronebird/subscriptions",
            "organizations_url": "https://api.github.com/users/pronebird/orgs",
            "repos_url": "https://api.github.com/users/pronebird/repos",
            "events_url": "https://api.github.com/users/pronebird/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pronebird/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 139734344,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Test%20Utils",
                "name": "Component: Test Utils",
                "color": "eb6420",
                "default": false
            },
            {
                "id": 710375792,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
                "name": "Type: Discussion",
                "color": "fef2c0",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 3,
        "created_at": "2017-12-14T16:08:20Z",
        "updated_at": "2018-01-02T15:57:48Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "`scryRenderedComponentsWithType` spits the following:\r\n\r\n> findAllInRenderedTree(...): instance must be a composite component\r\n\r\ntest case:\r\n\r\n```\r\nclass Accordion extends React.Component {\r\n  render() {\r\n    return (<div>{ this.props.children }</div>);\r\n  }\r\n}\r\nconst tree = ReactTestUtils.renderIntoDocument(\r\n      <div>\r\n        <Accordion height={ 0 }>\r\n          <div>Hello</div>\r\n        </Accordion>\r\n      </div>\r\n);\r\n\r\nconst elements = ReactTestUtils.scryRenderedComponentsWithType(tree, Accordion);\r\nexpect(elements[0].clientHeight).to.be.equal(0);\r\n```",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11864",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11864/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11864/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11864/events",
        "html_url": "https://github.com/facebook/react/issues/11864",
        "id": 282559165,
        "number": 11864,
        "title": "ES6 generator as a component: react-dom.development.js bug",
        "user": {
            "login": "doasync",
            "id": 29141708,
            "avatar_url": "https://avatars1.githubusercontent.com/u/29141708?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/doasync",
            "html_url": "https://github.com/doasync",
            "followers_url": "https://api.github.com/users/doasync/followers",
            "following_url": "https://api.github.com/users/doasync/following{/other_user}",
            "gists_url": "https://api.github.com/users/doasync/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/doasync/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/doasync/subscriptions",
            "organizations_url": "https://api.github.com/users/doasync/orgs",
            "repos_url": "https://api.github.com/users/doasync/repos",
            "events_url": "https://api.github.com/users/doasync/events{/privacy}",
            "received_events_url": "https://api.github.com/users/doasync/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 739761016,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Reconciler",
                "name": "Component: Reconciler",
                "color": "f9a798",
                "default": false
            },
            {
                "id": 710722093,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
                "name": "Type: Needs Investigation",
                "color": "fbca04",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 8,
        "created_at": "2017-12-15T21:59:15Z",
        "updated_at": "2018-02-17T19:18:25Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nbug\r\n\r\n**What is the current behavior?**\r\n\r\nreact-dom.development.js behavior is different from the behavior of react-dom.production.min.js\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem**\r\n\r\nHere is an example: https://codepen.io/doasync/pen/RxWoJQ?editors=1010 (doesn't work)\r\n\r\nReplace https://unpkg.com/react-dom@16.2.0/umd/react-dom.development.js with https://unpkg.com/react-dom@16.2.0/umd/react-dom.production.min.js and it will work again\r\n\r\n**What is the expected behavior?**\r\n\r\nGenerators should work with react-dom.development.js (see the given example)\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n16.2.0\r\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11866",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11866/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11866/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11866/events",
        "html_url": "https://github.com/facebook/react/issues/11866",
        "id": 282591514,
        "number": 11866,
        "title": "Improve accidental `void` return in render props?",
        "user": {
            "login": "sebmarkbage",
            "id": 63648,
            "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sebmarkbage",
            "html_url": "https://github.com/sebmarkbage",
            "followers_url": "https://api.github.com/users/sebmarkbage/followers",
            "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
            "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
            "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
            "repos_url": "https://api.github.com/users/sebmarkbage/repos",
            "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 739761016,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Reconciler",
                "name": "Component: Reconciler",
                "color": "f9a798",
                "default": false
            },
            {
                "id": 710375792,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
                "name": "Type: Discussion",
                "color": "fef2c0",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2017-12-16T02:02:35Z",
        "updated_at": "2018-01-02T16:59:55Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "We know that it is easy to accidentally forget to return from functions or arrow functions. That's why we don't allow returning `undefined` from render functions. (I think we do in the children position but that's harder to disallow.)\r\n\r\n```js\r\nclass Foo extends React.Component {\r\n  render() {\r\n    return this.props.children();\r\n  }\r\n}\r\n```\r\n\r\n```js\r\nfunction Bar() {\r\n  return <Foo>\r\n    {value => {\r\n      <div>\r\n       ...\r\n      </div>\r\n    }}\r\n  </Foo>;\r\n}\r\n```\r\n\r\nor\r\n\r\n```js\r\nfunction BarImpl(props, value) {\r\n  <div>\r\n  </div>\r\n}\r\nfunction Bar(props) {\r\n  return <Foo>{value => BarImpl(props, value)}</Foo>;\r\n}\r\n```\r\n\r\nIt can be difficult to detect an undefined return but the error/warning will also come from the implementation of `Foo`.\r\n\r\nI wonder if we can improve that somehow.",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11877",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11877/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11877/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11877/events",
        "html_url": "https://github.com/facebook/react/issues/11877",
        "id": 282847262,
        "number": 11877,
        "title": "Number input gets cleared when typing period as decimal mark",
        "user": {
            "login": "Hilzu",
            "id": 969840,
            "avatar_url": "https://avatars1.githubusercontent.com/u/969840?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Hilzu",
            "html_url": "https://github.com/Hilzu",
            "followers_url": "https://api.github.com/users/Hilzu/followers",
            "following_url": "https://api.github.com/users/Hilzu/following{/other_user}",
            "gists_url": "https://api.github.com/users/Hilzu/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Hilzu/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Hilzu/subscriptions",
            "organizations_url": "https://api.github.com/users/Hilzu/orgs",
            "repos_url": "https://api.github.com/users/Hilzu/repos",
            "events_url": "https://api.github.com/users/Hilzu/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Hilzu/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 40929151,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
                "name": "Type: Bug",
                "color": "b60205",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 5,
        "created_at": "2017-12-18T11:29:42Z",
        "updated_at": "2017-12-18T13:15:17Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n**What is the current behavior?**\r\n\r\nMy OS and browser are configured to a locale that uses comma as the decimal mark (Finland for those interested). In the codepen below when I accidentally type a period after some number the whole input gets cleared. This is somehow related to the parent component's state being updated because if the `defaultValue` prop is removed from the `<Input>` component the input doesn't get cleared.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template for React 16: https://jsfiddle.net/Luktwrdm/, template for React 15: https://jsfiddle.net/hmbg7e9w/).**\r\n\r\nhttps://codepen.io/anon/pen/aEOgNL?editors=0010\r\n\r\n**What is the expected behavior?**\r\n\r\nThe input should retain its visible value even if it would be invalid (can't be converted to a number).\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact 16.2.0 and Chrome 63 on macOS 10.12.6.\r\n\r\nTested in Safari 11.0.2 and typing a period kinda works. After typing the first number after the period it gets converted to a comma but the cursor jumps to the beginning.\r\n\r\nAlso tested in Firefox 57.0.1 but it seems to think that period is the correct decimal mark.",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11881",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11881/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11881/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11881/events",
        "html_url": "https://github.com/facebook/react/issues/11881",
        "id": 282975575,
        "number": 11881,
        "title": "backspace fails to clear values on input type='email'",
        "user": {
            "login": "codeangler",
            "id": 1369197,
            "avatar_url": "https://avatars1.githubusercontent.com/u/1369197?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/codeangler",
            "html_url": "https://github.com/codeangler",
            "followers_url": "https://api.github.com/users/codeangler/followers",
            "following_url": "https://api.github.com/users/codeangler/following{/other_user}",
            "gists_url": "https://api.github.com/users/codeangler/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/codeangler/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/codeangler/subscriptions",
            "organizations_url": "https://api.github.com/users/codeangler/orgs",
            "repos_url": "https://api.github.com/users/codeangler/repos",
            "events_url": "https://api.github.com/users/codeangler/events{/privacy}",
            "received_events_url": "https://api.github.com/users/codeangler/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 40929151,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
                "name": "Type: Bug",
                "color": "b60205",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 6,
        "created_at": "2017-12-18T18:21:42Z",
        "updated_at": "2018-01-25T14:04:48Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nbug \r\n\r\n**What is the current behavior?**\r\nemail input doesn't control for whitespace // possible variation on [Issue 6368](https://github.com/facebook/react/issues/6368); however, 6368 shows up at 15.0.0 this bug shows up at 15.2\r\n\r\n**If the current behavior is a bug, demo**\r\n\r\nno bug in React 15.0.0\r\nno bug in React 15.1.0\r\nbug on React 15.2\r\n[React~15 fiddle](https://jsfiddle.net/cburnett/79z43qxn/9/)\r\n\r\nbug on React 16 \r\n[React~16 fiddle](https://jsfiddle.net/cburnett/q1297t5w/2/)\r\n\r\n**What is the expected behavior?**\r\n\r\nWhen a user presses down the backspace key and holds it, all values in the input are removed, including the whitespaces  \r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nWorks on 15.1.0\r\nbug at >= 15.2.0 \r\ntesting on Chrome 63\r\nMacOs Sierra 10.12\r\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11893",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11893/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11893/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11893/events",
        "html_url": "https://github.com/facebook/react/issues/11893",
        "id": 283447381,
        "number": 11893,
        "title": "Include component props into the stack from componentDidCatch()",
        "user": {
            "login": "XaveScor",
            "id": 6323437,
            "avatar_url": "https://avatars3.githubusercontent.com/u/6323437?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/XaveScor",
            "html_url": "https://github.com/XaveScor",
            "followers_url": "https://api.github.com/users/XaveScor/followers",
            "following_url": "https://api.github.com/users/XaveScor/following{/other_user}",
            "gists_url": "https://api.github.com/users/XaveScor/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/XaveScor/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/XaveScor/subscriptions",
            "organizations_url": "https://api.github.com/users/XaveScor/orgs",
            "repos_url": "https://api.github.com/users/XaveScor/repos",
            "events_url": "https://api.github.com/users/XaveScor/events{/privacy}",
            "received_events_url": "https://api.github.com/users/XaveScor/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 739761016,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Reconciler",
                "name": "Component: Reconciler",
                "color": "f9a798",
                "default": false
            },
            {
                "id": 121709921,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2017-12-20T04:38:28Z",
        "updated_at": "2018-02-13T10:42:55Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "body": "Second argument of `componentDidCatch` contains componentStack like this:\r\n```\r\n{\"componentStack\":\"\r\n in _Header (created by onlyUpdateForKeys(_Header))\r\n in onlyUpdateForKeys(_Header) (created by TDSection)\r\n in TDSection (created by Container)\r\n in Container (created by AutoLookup)\r\n in AutoLookup (created by AutoLookup)\r\n in AutoLookup (created by GroupContainer)\r\n in GroupContainer (created by Container)\r\n in Container (created by AutoLookup)\r\n in AutoLookup (created by _Content)\r\n in div (created by _Content)\r\n in _Content (created by pure(_Content))\r\n in pure(_Content) (created by ContentList)\r\n in ContentList (created by TabContainer)\r\n in TabContainer (created by Container)\r\n in Container (created by AutoLookup)\r\n in AutoLookup (created by AutoLookup)\r\n in AutoLookup (created by CardBase)\r\n in div (created by SharedStorage)\r\n in SharedStorage (created by CardBase)\r\n in TDValidation (created by CardBase)\r\n in CardBase (created by Wrapper)\r\n in Wrapper (created by Connect(Wrapper))\r\n in Connect(Wrapper) (created by mapProps(Connect(Wrapper)))\r\n in mapProps(Connect(Wrapper)) (created by Connect(mapProps(Connect(Wrapper))))\r\n in Connect(mapProps(Connect(Wrapper))) (created by getContext(Connect(mapProps(Connect(Wrapper)))))\r\n in getContext(Connect(mapProps(Connect(Wrapper)))) (created by Card)\r\n in Card (created by branch(Card))\r\n in branch(Card) (created by Connect(branch(Card)))\r\n in Connect(branch(Card)) (created by getContext(Connect(branch(Card))))\r\n in getContext(Connect(branch(Card))) (created by Connect(getContext(Connect(branch(Card)))))\r\n in Connect(getContext(Connect(branch(Card)))) (created by getContext(Connect(getContext(Connect(branch(Card))))))\r\n in getContext(Connect(getContext(Connect(branch(Card))))) (created by mapProps(getContext(Connect(getContext(Connect(branch(Card)))))))\r\n in mapProps(getContext(Connect(getContext(Connect(branch(Card)))))) (created by Connect(mapProps(getContext(Connect(getContext(Connect(branch(Card))))))))\r\n in Connect(mapProps(getContext(Connect(getContext(Connect(branch(Card))))))) (created by getContext(Connect(mapProps(getContext(Connect(getContext(Connect(branch(Card)))))))))\r\n in getContext(Connect(mapProps(getContext(Connect(getContext(Connect(branch(Card)))))))) (created by _Tab)\r\n in div (created by LoadingWrapper)\r\n in div (created by LoadingWrapper)\r\n in LoadingWrapper (created by Connect(LoadingWrapper))\r\n in Connect(LoadingWrapper) (created by _Tab)\r\n in div (created by _Tab)\r\n in _Tab (created by Connect(_Tab))\r\n in Connect(_Tab) (created by withContext(Connect(_Tab)))\r\n in withContext(Connect(_Tab)) (created by Page)\r\n in Page (created by Connect(Page))\r\n in Connect(Page) (created by onlyUpdateForKeys(Connect(Page)))\r\n in onlyUpdateForKeys(Connect(Page)) (created by ContentRouter)\r\n in ContentRouter (created by _Content)\r\n in _Content (created by Connect(_Content))\r\n in Connect(_Content) (created by _SplitPane)\r\n in div (created by ContentWrapper)\r\n in div (created by ContentWrapper)\r\n in ContentWrapper (created by _SplitPane)\r\n in div (created by _SplitPane)\r\n in _SplitPane (created by Connect(_SplitPane))\r\n in Connect(_SplitPane) (created by _MasterLayout)\r\n in div (created by _MasterLayout)\r\n in div (created by _MasterLayout)\r\n in _MasterLayout (created by Connect(_MasterLayout))\r\n in Connect(_MasterLayout) (created by Root)\r\n in div (created by ThemeChanger)\r\n in ThemeChanger (created by Connect(ThemeChanger))\r\n in Connect(ThemeChanger) (created by Root)\r\n in StartupSync (created by Connect(StartupSync))\r\n in Connect(StartupSync) (created by Root)\r\n in _default (created by Root)\r\n in Provider (created by Root)\r\n in Root\r\n in AppContainer\"}\r\n```\r\nThis data don't contain any helpful error data if user send me ticket to bugtracker. Can info contain props of every component?\r\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11896",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11896/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11896/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11896/events",
        "html_url": "https://github.com/facebook/react/issues/11896",
        "id": 283653451,
        "number": 11896,
        "title": "Stop syncing value attribute for controlled inputs",
        "user": {
            "login": "aweary",
            "id": 6886061,
            "avatar_url": "https://avatars2.githubusercontent.com/u/6886061?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/aweary",
            "html_url": "https://github.com/aweary",
            "followers_url": "https://api.github.com/users/aweary/followers",
            "following_url": "https://api.github.com/users/aweary/following{/other_user}",
            "gists_url": "https://api.github.com/users/aweary/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/aweary/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/aweary/subscriptions",
            "organizations_url": "https://api.github.com/users/aweary/orgs",
            "repos_url": "https://api.github.com/users/aweary/repos",
            "events_url": "https://api.github.com/users/aweary/events{/privacy}",
            "received_events_url": "https://api.github.com/users/aweary/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 763742499,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Breaking%20Change",
                "name": "Type: Breaking Change",
                "color": "aa2608",
                "default": false
            },
            {
                "id": 710375792,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
                "name": "Type: Discussion",
                "color": "fef2c0",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": {
            "url": "https://api.github.com/repos/facebook/react/milestones/40",
            "html_url": "https://github.com/facebook/react/milestone/40",
            "labels_url": "https://api.github.com/repos/facebook/react/milestones/40/labels",
            "id": 2937756,
            "number": 40,
            "title": "17.0.0",
            "description": "",
            "creator": {
                "login": "gaearon",
                "id": 810438,
                "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/gaearon",
                "html_url": "https://github.com/gaearon",
                "followers_url": "https://api.github.com/users/gaearon/followers",
                "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
                "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
                "organizations_url": "https://api.github.com/users/gaearon/orgs",
                "repos_url": "https://api.github.com/users/gaearon/repos",
                "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
                "received_events_url": "https://api.github.com/users/gaearon/received_events",
                "type": "User",
                "site_admin": false
            },
            "open_issues": 6,
            "closed_issues": 1,
            "state": "open",
            "created_at": "2017-11-26T22:47:57Z",
            "updated_at": "2018-01-05T18:53:12Z",
            "due_on": null,
            "closed_at": null
        },
        "comments": 21,
        "created_at": "2017-12-20T18:21:41Z",
        "updated_at": "2018-05-01T00:28:36Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "Opening this as a follow up to some quick discussions in https://github.com/facebook/react/issues/11881. Syncing the `value` attribute has been a consistent source of bugs for us, and the benefits of doing so seem minimal. There's some previous discussion on the topic in https://github.com/facebook/react/pull/7359 and in other issues, I can't remember right now \ud83d\ude04 \r\n\r\nThis would be a breaking change, so it would have to be done in a major release. \r\n\r\n## Reasons to keep syncing\r\n\r\n* It prevents `form.reset()` from putting controlled form inputs into a weird state\r\n* Some browser extensions (not sure which) read from the `value` attribute in some cases (not sure which)\r\n* It can be useful for querying inputs with a specific value using an attribute selector\r\n\r\n## Reasons to stop syncing\r\n\r\n* It will reduce the complexity of `react-dom` in a non-trivial way\r\n* In turn, it will likely reduce bundle size as well\r\n* We remove a whole class of bugs (fighting with browsers that want to be helpful about input values)\r\n* Syncing the input value to the attribute potentially exposes sensitive data to third party tools ([1](https://www.reddit.com/r/analytics/comments/7ukw4n/mixpanel_js_library_has_been_harvesting_passwords/))\r\n\r\n______\r\n\r\nWhat do we think? Are these reasons good enough to keep syncing the `value` attribute? Are there other more critical reasons we should keep doing so?\r\n\r\n\r\ncc @nhunzaker @jquense @gaearon ",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11897",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11897/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11897/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11897/events",
        "html_url": "https://github.com/facebook/react/issues/11897",
        "id": 283681401,
        "number": 11897,
        "title": "reconciler's tryToClaimNextHydratableInstance next-nextInstance heuristic creating duplicative elements",
        "user": {
            "login": "chandlerprall",
            "id": 313125,
            "avatar_url": "https://avatars3.githubusercontent.com/u/313125?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/chandlerprall",
            "html_url": "https://github.com/chandlerprall",
            "followers_url": "https://api.github.com/users/chandlerprall/followers",
            "following_url": "https://api.github.com/users/chandlerprall/following{/other_user}",
            "gists_url": "https://api.github.com/users/chandlerprall/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/chandlerprall/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/chandlerprall/subscriptions",
            "organizations_url": "https://api.github.com/users/chandlerprall/orgs",
            "repos_url": "https://api.github.com/users/chandlerprall/repos",
            "events_url": "https://api.github.com/users/chandlerprall/events{/privacy}",
            "received_events_url": "https://api.github.com/users/chandlerprall/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 710332294,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Server%20Rendering",
                "name": "Component: Server Rendering",
                "color": "d4c5f9",
                "default": false
            },
            {
                "id": 710375792,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
                "name": "Type: Discussion",
                "color": "fef2c0",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 4,
        "created_at": "2017-12-20T20:10:42Z",
        "updated_at": "2017-12-22T22:26:51Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nbug (though the React code is working as intended)\r\n\r\n**What is the current behavior?**\r\nWhen hydrating from server-rendered DOM, if [react-reconciler encounters an unexpected node](https://github.com/facebook/react/blob/v16.2.0/packages/react-reconciler/src/ReactFiberHydrationContext.js#L229) it will peek ahead to the next DOM node and test if it is the expected node. If so, react-reconciler will delete the unexpected node and continue on by using the second node to hydrate. If the second node does not match the instance then the reconciler gives up and begins inserting DOM nodes without trying to reconcile.\r\n\r\nIn our case, we are server-side rendering the entire #document server-side and re-hydrating at that level. Some 3rd party analytics scripts are injected at the top of <body> before the hydrate call happens, causing the entire application to be injected into the body instead of reconciled with the existing nodes.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template for React 16: https://jsfiddle.net/Luktwrdm/, template for React 15: https://jsfiddle.net/hmbg7e9w/).**\r\nI can force this to happen in our app by injecting two (or more) empty `script` tags at the top of <body>. I've not been able to reproduce via jsfiddle; unsure what the exact combination of flags are to force this specific code path.\r\n\r\n```\r\ndocument.body.insertBefore(document.createElement('script'), document.body.children[0]);\r\ndocument.body.insertBefore(document.createElement('script'), document.body.children[0]);\r\n```\r\n\r\n**What is the expected behavior?**\r\nIdeally the reconciler would look at all of the sibling nodes to find the matching element.\r\n\r\nA comment in the code at the relevant location says\r\n```\r\n// If we can't hydrate this instance let's try the next one.\r\n// We use this as a heuristic. It's based on intuition and not data so it\r\n// might be flawed or unnecessary.\r\n```\r\n\r\nI hacked together a change to prove out inspecting all sibling elements and that seems to be working with no unintended consequences. I modified\r\n\r\n`nextInstance = getNextHydratableSibling(nextInstance);`\r\nto be\r\n`while (nextInstance = getNextHydratableSibling(nextInstance), nextInstance && !canHydrate(fiber, nextInstance)) {};`\r\n\r\nSo nextInstance will either be the hydratable sibling or it will be null.\r\n\r\nUsing `performance.now()` on my Mac Book Pro, I do not observe this O(1) -> O(n) change to be measurable in my situation.\r\n\r\n```\r\nwith matching DOM: 118-144ms\r\nwith mismatched DOM: 116-172ms\r\nmismatchedDOM & updated function: 116-163ms\r\n```\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nThis was introduced with React 16s new hydration approach. (I'll take this over the Invariant 42 full-stop error; thanks for building the new approach!).",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11903",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11903/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11903/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11903/events",
        "html_url": "https://github.com/facebook/react/issues/11903",
        "id": 283961642,
        "number": 11903,
        "title": "Caret position for onChange event in iOS Safari is incorrect",
        "user": {
            "login": "ztanner",
            "id": 1939140,
            "avatar_url": "https://avatars1.githubusercontent.com/u/1939140?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ztanner",
            "html_url": "https://github.com/ztanner",
            "followers_url": "https://api.github.com/users/ztanner/followers",
            "following_url": "https://api.github.com/users/ztanner/following{/other_user}",
            "gists_url": "https://api.github.com/users/ztanner/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ztanner/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ztanner/subscriptions",
            "organizations_url": "https://api.github.com/users/ztanner/orgs",
            "repos_url": "https://api.github.com/users/ztanner/repos",
            "events_url": "https://api.github.com/users/ztanner/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ztanner/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 710722093,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
                "name": "Type: Needs Investigation",
                "color": "fbca04",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2017-12-21T18:06:55Z",
        "updated_at": "2017-12-22T13:26:16Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\n![ezgif-4-2e3028f85a](https://user-images.githubusercontent.com/1939140/34268406-6da97d16-e635-11e7-8d30-9ff0c67d6d27.gif)\r\n\r\nA simple controlled input with an onChange event that also renders the output in a span has consistently reproducible caret positioning problems.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template for React 16: https://jsfiddle.net/Luktwrdm/, template for React 15: https://jsfiddle.net/hmbg7e9w/).**\r\nhttps://codesandbox.io/s/k5yqlynqk5\r\n\r\nI've included an example where the setState is wrapped in rAF, which fixes the issue but causes a different problem in desktop safari. \r\n\r\n**What is the expected behavior?**\r\nCaret position should consistently correspond with where the internal cursor position actually is\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nTested and reproducible in React 16.2.0, 16.0.0, and 15.6.2, in iOS simulator (iOS 11.x) and actual device. \r\n\r\n**Edit: On further investigation, it seems like this might be an issue with Safari itself, or the underlying rendering engine...I can close this if it's a no-op for the React team.",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11911",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11911/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11911/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11911/events",
        "html_url": "https://github.com/facebook/react/issues/11911",
        "id": 284148385,
        "number": 11911,
        "title": " React DOM crashes when <option> contains three interpolated value if one is a conditional. ",
        "user": {
            "login": "ZhangYiJiang",
            "id": 445650,
            "avatar_url": "https://avatars0.githubusercontent.com/u/445650?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ZhangYiJiang",
            "html_url": "https://github.com/ZhangYiJiang",
            "followers_url": "https://api.github.com/users/ZhangYiJiang/followers",
            "following_url": "https://api.github.com/users/ZhangYiJiang/following{/other_user}",
            "gists_url": "https://api.github.com/users/ZhangYiJiang/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ZhangYiJiang/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ZhangYiJiang/subscriptions",
            "organizations_url": "https://api.github.com/users/ZhangYiJiang/orgs",
            "repos_url": "https://api.github.com/users/ZhangYiJiang/repos",
            "events_url": "https://api.github.com/users/ZhangYiJiang/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ZhangYiJiang/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 588833528,
                "url": "https://api.github.com/repos/facebook/react/labels/Difficulty:%20medium",
                "name": "Difficulty: medium",
                "color": "fbca04",
                "default": false
            },
            {
                "id": 40929151,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
                "name": "Type: Bug",
                "color": "b60205",
                "default": false
            },
            {
                "id": 725156255,
                "url": "https://api.github.com/repos/facebook/react/labels/good%20first%20issue%20(taken)",
                "name": "good first issue (taken)",
                "color": "b60205",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 14,
        "created_at": "2017-12-22T12:10:29Z",
        "updated_at": "2018-04-25T05:06:23Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?** \r\n\r\nBug \r\n\r\n**What is the current behavior?**\r\n\r\nReact DOM crashes when `<option>` contains three interpolated value if one is a conditional. \r\n\r\nReproduction: https://jsfiddle.net/0opjvycp/ \r\n\r\n1. Change the value of the `<select>`\r\n2. React crashes with `NotFoundError: Node was not found` \r\n\r\nFrom what I can tell, the conditional value is necessary, and it must be three interpolated values. \r\n\r\n**What is the expected behavior?**\r\n\r\nReact should not crash. \r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact DOM 16.2 and 16.0. I think this worked in 15.6 - https://jsfiddle.net/mrwkmuqc/ does not crash \r\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11918",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11918/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11918/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11918/events",
        "html_url": "https://github.com/facebook/react/issues/11918",
        "id": 284373894,
        "number": 11918,
        "title": "Click events don't bubble from Portal content on mobile Safari",
        "user": {
            "login": "zebulonj",
            "id": 1703671,
            "avatar_url": "https://avatars3.githubusercontent.com/u/1703671?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zebulonj",
            "html_url": "https://github.com/zebulonj",
            "followers_url": "https://api.github.com/users/zebulonj/followers",
            "following_url": "https://api.github.com/users/zebulonj/following{/other_user}",
            "gists_url": "https://api.github.com/users/zebulonj/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zebulonj/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zebulonj/subscriptions",
            "organizations_url": "https://api.github.com/users/zebulonj/orgs",
            "repos_url": "https://api.github.com/users/zebulonj/repos",
            "events_url": "https://api.github.com/users/zebulonj/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zebulonj/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 710722093,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
                "name": "Type: Needs Investigation",
                "color": "fbca04",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 3,
        "created_at": "2017-12-24T17:20:21Z",
        "updated_at": "2017-12-25T21:16:06Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nIn mobile Safari, DOM events originating from elements rendered through a Portal do **not** bubble (propagate) up the React component tree.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce....**\r\nPlease see the following JSFiddle: https://jsfiddle.net/zebulonj/wf7orwan/\r\n\r\nIn this JSFiddle, the expected behavior (seen in a desktop browser) is that clicking on the portal content (appearing as a modal, including backdrop) should toggle to the \"On\" or \"Off\" indicator rendered in the main content. However, in mobile Safari (iOS 11.1.1), the click events do not propagate.\r\n\r\n\r\n**What is the expected behavior?**\r\nClick events should propagate up the React component tree.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nAffected: React 16.2\r\niOS 11.1.1\r\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11935",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11935/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11935/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11935/events",
        "html_url": "https://github.com/facebook/react/issues/11935",
        "id": 285212510,
        "number": 11935,
        "title": "Consider a more specific warning for key={undefined}",
        "user": {
            "login": "gaearon",
            "id": 810438,
            "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gaearon",
            "html_url": "https://github.com/gaearon",
            "followers_url": "https://api.github.com/users/gaearon/followers",
            "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
            "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
            "organizations_url": "https://api.github.com/users/gaearon/orgs",
            "repos_url": "https://api.github.com/users/gaearon/repos",
            "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gaearon/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 139653724,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Core%20Utilities",
                "name": "Component: Core Utilities",
                "color": "c5def5",
                "default": false
            },
            {
                "id": 40929153,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement",
                "name": "Type: Enhancement",
                "color": "84b6eb",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 8,
        "created_at": "2017-12-30T17:00:45Z",
        "updated_at": "2018-02-15T17:52:14Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "Proposed in [this comment](https://dev.to/k1sul1/comment/1o68):\r\n\r\n>I had changed the casing of \"ID\" in the response, but forgot to commit it aaaaaand I ended up with it happening.\r\n\r\n>Basically I was doing key={undefined}. Could React warn user when this happens, something like \"Looks like you tried to supply a key, but the value supplied is undefined. Check the render...\" and so on?\r\n\r\nI think it might make sense to give a more specific warning in this case. Open to suggestions about specific wording and in which case it would be used.",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11949",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11949/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11949/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11949/events",
        "html_url": "https://github.com/facebook/react/issues/11949",
        "id": 285498529,
        "number": 11949,
        "title": "Output JUnit XML test metadata for CircleCI",
        "user": {
            "login": "sophiebits",
            "id": 6820,
            "avatar_url": "https://avatars2.githubusercontent.com/u/6820?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sophiebits",
            "html_url": "https://github.com/sophiebits",
            "followers_url": "https://api.github.com/users/sophiebits/followers",
            "following_url": "https://api.github.com/users/sophiebits/following{/other_user}",
            "gists_url": "https://api.github.com/users/sophiebits/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sophiebits/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sophiebits/subscriptions",
            "organizations_url": "https://api.github.com/users/sophiebits/orgs",
            "repos_url": "https://api.github.com/users/sophiebits/repos",
            "events_url": "https://api.github.com/users/sophiebits/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sophiebits/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 71502270,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Build%20Infrastructure",
                "name": "Component: Build Infrastructure",
                "color": "f9d0c4",
                "default": false
            },
            {
                "id": 588833528,
                "url": "https://api.github.com/repos/facebook/react/labels/Difficulty:%20medium",
                "name": "Difficulty: medium",
                "color": "fbca04",
                "default": false
            },
            {
                "id": 725156255,
                "url": "https://api.github.com/repos/facebook/react/labels/good%20first%20issue%20(taken)",
                "name": "good first issue (taken)",
                "color": "b60205",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 8,
        "created_at": "2018-01-02T18:08:39Z",
        "updated_at": "2018-01-20T18:12:51Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "# @benbraou has claimed this issue. Please give them a chance to work on this.\r\n\r\n---\r\n\r\nHere's a screenshot of a CircleCI build for another (private) project I'm a part of:\r\n\r\n![image](https://user-images.githubusercontent.com/6820/34494194-1d3d3f70-efa4-11e7-87b7-0ca9961b2934.png)\r\n\r\nIt clearly highlights the parts of the build that failed.\r\n\r\nIn contrast, see one of our builds: https://circleci.com/gh/facebook/react/8402. In this one the ./scripts/circleci/upload_build.sh step failed but you need to scroll through the output a significant amount to see that. This is in part because we have a custom entry point for all our CI steps ([scripts/circleci/test_entry_point.sh](https://github.com/facebook/react/blob/v16.2.0/scripts/circleci/test_entry_point.sh)) to make it easier for us to parallelize some build steps.\r\n\r\nI'd like us to change that test_entry_point.sh script to output JUnit XML metadata for CircleCI as described in https://circleci.com/docs/2.0/collect-test-data/. Then I believe the CircleCI build results page will show exactly which step failed.\r\n\r\n(Bonus: If we can show individual Jest tests that would be even cooler. But I think the most important part is breaking out jest vs flow vs prettier, etc. into separate chunks.)",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11971",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11971/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11971/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11971/events",
        "html_url": "https://github.com/facebook/react/issues/11971",
        "id": 286314775,
        "number": 11971,
        "title": "Do we need to listen for click on change events?",
        "user": {
            "login": "nhunzaker",
            "id": 590904,
            "avatar_url": "https://avatars3.githubusercontent.com/u/590904?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nhunzaker",
            "html_url": "https://github.com/nhunzaker",
            "followers_url": "https://api.github.com/users/nhunzaker/followers",
            "following_url": "https://api.github.com/users/nhunzaker/following{/other_user}",
            "gists_url": "https://api.github.com/users/nhunzaker/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nhunzaker/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nhunzaker/subscriptions",
            "organizations_url": "https://api.github.com/users/nhunzaker/orgs",
            "repos_url": "https://api.github.com/users/nhunzaker/repos",
            "events_url": "https://api.github.com/users/nhunzaker/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nhunzaker/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 4,
        "created_at": "2018-01-05T15:10:44Z",
        "updated_at": "2018-01-06T01:45:02Z",
        "closed_at": null,
        "author_association": "COLLABORATOR",
        "body": "Presently, we listen to click events to detect changes on radio buttons and checkboxes. Do we still need to do this?\r\n\r\nhttps://github.com/facebook/react/blob/master/packages/react-dom/src/events/ChangeEventPlugin.js#L198-L211\r\n\r\nIt looks as though we only do this for IE8. I'm curious about:\r\n\r\n- [ ] Can we remove the click dependency from change events?\r\n- [ ] If not, we should update the comments to better document why we include click events\r\n\r\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11972",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11972/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11972/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11972/events",
        "html_url": "https://github.com/facebook/react/issues/11972",
        "id": 286328956,
        "number": 11972,
        "title": "Consider removing mouseenter/mouseleave polyfill",
        "user": {
            "login": "gaearon",
            "id": 810438,
            "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gaearon",
            "html_url": "https://github.com/gaearon",
            "followers_url": "https://api.github.com/users/gaearon/followers",
            "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
            "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
            "organizations_url": "https://api.github.com/users/gaearon/orgs",
            "repos_url": "https://api.github.com/users/gaearon/repos",
            "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gaearon/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 763742499,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Breaking%20Change",
                "name": "Type: Breaking Change",
                "color": "aa2608",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": {
            "url": "https://api.github.com/repos/facebook/react/milestones/40",
            "html_url": "https://github.com/facebook/react/milestone/40",
            "labels_url": "https://api.github.com/repos/facebook/react/milestones/40/labels",
            "id": 2937756,
            "number": 40,
            "title": "17.0.0",
            "description": "",
            "creator": {
                "login": "gaearon",
                "id": 810438,
                "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/gaearon",
                "html_url": "https://github.com/gaearon",
                "followers_url": "https://api.github.com/users/gaearon/followers",
                "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
                "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
                "organizations_url": "https://api.github.com/users/gaearon/orgs",
                "repos_url": "https://api.github.com/users/gaearon/repos",
                "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
                "received_events_url": "https://api.github.com/users/gaearon/received_events",
                "type": "User",
                "site_admin": false
            },
            "open_issues": 6,
            "closed_issues": 1,
            "state": "open",
            "created_at": "2017-11-26T22:47:57Z",
            "updated_at": "2018-01-05T18:53:12Z",
            "due_on": null,
            "closed_at": null
        },
        "comments": 2,
        "created_at": "2018-01-05T16:00:10Z",
        "updated_at": "2018-01-05T16:14:40Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "As suggested in https://github.com/facebook/react/pull/10247.\r\nNot sure we want to do it, but I decided to create an issue to track future attempts (the PR is stale).",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11973",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11973/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11973/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11973/events",
        "html_url": "https://github.com/facebook/react/issues/11973",
        "id": 286347050,
        "number": 11973,
        "title": "Add React.createRef() as the migration path for string refs",
        "user": {
            "login": "gaearon",
            "id": 810438,
            "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gaearon",
            "html_url": "https://github.com/gaearon",
            "followers_url": "https://api.github.com/users/gaearon/followers",
            "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
            "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
            "organizations_url": "https://api.github.com/users/gaearon/orgs",
            "repos_url": "https://api.github.com/users/gaearon/repos",
            "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gaearon/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 739777675,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Component%20API",
                "name": "Component: Component API",
                "color": "d4c5f9",
                "default": false
            },
            {
                "id": 121709921,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": {
            "login": "trueadm",
            "id": 1519870,
            "avatar_url": "https://avatars0.githubusercontent.com/u/1519870?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/trueadm",
            "html_url": "https://github.com/trueadm",
            "followers_url": "https://api.github.com/users/trueadm/followers",
            "following_url": "https://api.github.com/users/trueadm/following{/other_user}",
            "gists_url": "https://api.github.com/users/trueadm/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/trueadm/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/trueadm/subscriptions",
            "organizations_url": "https://api.github.com/users/trueadm/orgs",
            "repos_url": "https://api.github.com/users/trueadm/repos",
            "events_url": "https://api.github.com/users/trueadm/events{/privacy}",
            "received_events_url": "https://api.github.com/users/trueadm/received_events",
            "type": "User",
            "site_admin": false
        },
        "assignees": [
            {
                "login": "trueadm",
                "id": 1519870,
                "avatar_url": "https://avatars0.githubusercontent.com/u/1519870?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/trueadm",
                "html_url": "https://github.com/trueadm",
                "followers_url": "https://api.github.com/users/trueadm/followers",
                "following_url": "https://api.github.com/users/trueadm/following{/other_user}",
                "gists_url": "https://api.github.com/users/trueadm/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/trueadm/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/trueadm/subscriptions",
                "organizations_url": "https://api.github.com/users/trueadm/orgs",
                "repos_url": "https://api.github.com/users/trueadm/repos",
                "events_url": "https://api.github.com/users/trueadm/events{/privacy}",
                "received_events_url": "https://api.github.com/users/trueadm/received_events",
                "type": "User",
                "site_admin": false
            }
        ],
        "milestone": null,
        "comments": 8,
        "created_at": "2018-01-05T17:04:10Z",
        "updated_at": "2018-02-06T14:11:04Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "Creating this issue to track https://github.com/facebook/react/pull/11555. I intend to close the PR as it's outdated, but we probably want to turn it into a real RFC and potentially get it in during 16.x.",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11985",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11985/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11985/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11985/events",
        "html_url": "https://github.com/facebook/react/issues/11985",
        "id": 286622764,
        "number": 11985,
        "title": "Lifecycle methods for ReactDOM.hydrate",
        "user": {
            "login": "jamesknelson",
            "id": 161707,
            "avatar_url": "https://avatars3.githubusercontent.com/u/161707?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jamesknelson",
            "html_url": "https://github.com/jamesknelson",
            "followers_url": "https://api.github.com/users/jamesknelson/followers",
            "following_url": "https://api.github.com/users/jamesknelson/following{/other_user}",
            "gists_url": "https://api.github.com/users/jamesknelson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jamesknelson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jamesknelson/subscriptions",
            "organizations_url": "https://api.github.com/users/jamesknelson/orgs",
            "repos_url": "https://api.github.com/users/jamesknelson/repos",
            "events_url": "https://api.github.com/users/jamesknelson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jamesknelson/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 710332294,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Server%20Rendering",
                "name": "Component: Server Rendering",
                "color": "d4c5f9",
                "default": false
            },
            {
                "id": 121709921,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 4,
        "created_at": "2018-01-08T02:13:55Z",
        "updated_at": "2018-01-21T05:27:10Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nFeature\r\n\r\n**What is the current behavior?**\r\n\r\nThere is no way to distinguish if a `componentDidMount` or `componentWillMount` lifecycle method was called in response to a call to `ReactDOM.hydrate`.\r\n\r\n**What is the expected behavior?**\r\n\r\nI have a component that scrolls to the top of the page in componentDidMount. This makes sense when the component is first created within the client. However, it doesn't make sense when the component has been hydrated, as `componentDidMount` is called after the content is already visible, and possibly after the user has already scrolled.\r\n\r\nWould it be possible to add a `componentWillHydrate` lifecycle method? Then I could do something like this to achieve the desired behavior:\r\n\r\n```js\r\ncomponentWillHydrate() {\r\n  this.hydrated = true \r\n}\r\ncomponentDidMount() {\r\n  if (!this.hydrated) {\r\n    this.scrollToTop()\r\n  }\r\n}\r\n```\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nAll",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11996",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11996/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11996/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11996/events",
        "html_url": "https://github.com/facebook/react/issues/11996",
        "id": 287041465,
        "number": 11996,
        "title": "Symbols as keys in children as arrays or itterators",
        "user": {
            "login": "vectorsize",
            "id": 1661889,
            "avatar_url": "https://avatars3.githubusercontent.com/u/1661889?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vectorsize",
            "html_url": "https://github.com/vectorsize",
            "followers_url": "https://api.github.com/users/vectorsize/followers",
            "following_url": "https://api.github.com/users/vectorsize/following{/other_user}",
            "gists_url": "https://api.github.com/users/vectorsize/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vectorsize/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vectorsize/subscriptions",
            "organizations_url": "https://api.github.com/users/vectorsize/orgs",
            "repos_url": "https://api.github.com/users/vectorsize/repos",
            "events_url": "https://api.github.com/users/vectorsize/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vectorsize/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 739761016,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Reconciler",
                "name": "Component: Reconciler",
                "color": "f9a798",
                "default": false
            },
            {
                "id": 121709921,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2018-01-09T10:35:40Z",
        "updated_at": "2018-02-11T20:15:09Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nI want to request a feature\r\n\r\n**What is the current behavior?**\r\n\r\nUsing `Symbols` as element keys throws a type error.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nWhen using `key={Symbol('myKeySymbol')}` we get the following `TypeError: Cannot convert a Symbol value to a string at Object.ReactElement.createElement`\r\n\r\n[codesandbox here](https://codesandbox.io/s/733pypz57j)\r\n\r\n**What is the expected behavior?**\r\nUsing `Symbols` as keys should work seamlessly, in my opinion element keys are a perfect use-case for `Symbols`.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nUsing React `16.0.0` and the browsers affected are Safari, Chrome and Firefox on OSX, but I'm pretty sure this is not browser dependent but a matter of implementation.\r\n\r\n~~~\r\n\r\nThanks.\r\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11997",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11997/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11997/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11997/events",
        "html_url": "https://github.com/facebook/react/issues/11997",
        "id": 287150575,
        "number": 11997,
        "title": "npm test fails - using expect.createSpy and ReactTestUtils.Simulate.submit",
        "user": {
            "login": "rohan-paul",
            "id": 12703975,
            "avatar_url": "https://avatars3.githubusercontent.com/u/12703975?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rohan-paul",
            "html_url": "https://github.com/rohan-paul",
            "followers_url": "https://api.github.com/users/rohan-paul/followers",
            "following_url": "https://api.github.com/users/rohan-paul/following{/other_user}",
            "gists_url": "https://api.github.com/users/rohan-paul/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rohan-paul/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rohan-paul/subscriptions",
            "organizations_url": "https://api.github.com/users/rohan-paul/orgs",
            "repos_url": "https://api.github.com/users/rohan-paul/repos",
            "events_url": "https://api.github.com/users/rohan-paul/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rohan-paul/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 155984160,
                "url": "https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed",
                "name": "Status: Unconfirmed",
                "color": "d4c5f9",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2018-01-09T16:31:28Z",
        "updated_at": "2018-03-05T07:24:17Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nReport a bug.\r\n\r\n**What is the current behavior?**\r\nnpm test fails - using expect.createSpy and ReactTestUtils.Simulate.submit\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo** \r\n\r\nIn my App, have a CountdownForm component as below. The component creates an input form, where I input a number (which is total number of seconds) and the component returns the formatted version of that number in minutes and seconds. The component works fine in the project, giving me the desired output. But the test fails\r\n\r\nCode in CountdownForm component.\r\n\r\n```\r\nimport React from 'react';\r\nimport createReactClass from 'create-react-class';\r\n\r\n    var CountdownForm = createReactClass({\r\n      onSubmit: function(e) {\r\n        e.preventDefault();\r\n        var strSeconds = this.refs.seconds.value;\r\n\r\n        if(strSeconds.match(/^[0-9]*$/)) {\r\n          this.refs.seconds.value = '';\r\n          this.props.onSetCountdown(parseInt(strSeconds, 10));\r\n        }\r\n      },\r\n      render: function () {\r\n        return (\r\n          <div>\r\n            <form ref=\"form\" onSubmit={this.onSubmit} className=\"countdown-form\">\r\n              <input type=\"text\" ref=\"seconds\" placeholder=\"Enter time in seconds\"/>\r\n              <button className=\"button expanded\">Start</button>\r\n            </form>\r\n          </div>\r\n        );\r\n      }\r\n    });\r\n```\r\nAnd the below is the contents of my test file for the above component following [ReactTestUtil's Simulate doc](https://reactjs.org/docs/test-utils.html#simulate) and [expect.createSpy doc](https://github.com/mjackson/expect#spy-tohavebeencalledwith)\r\n\r\n```\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport expect, {createSpy, spyOn, isSpy} from 'expect';\r\nimport $ from 'jquery';\r\nimport CountdownForm from 'CountdownForm';\r\nimport ReactTestUtils from 'react-dom/test-utils';\r\n\r\ndescribe('CountdownForm', () => {\r\n\r\n  it('should call onSetCountdown if valid seconds entered', () => {\r\n    var spy = expect.createSpy;\r\n    var countdownForm = ReactTestUtils.renderIntoDocument(<CountdownForm onSetCountdown={spy}/>);\r\n    var $el = $(ReactDOM.findDOMNode(countdownForm));\r\n\r\n    countdownForm.refs.seconds.value = '109';\r\n    ReactTestUtils.Simulate.submit($el.find('form')[0]);\r\n\r\n    expect(spy).toHaveBeenCalledWith(109);\r\n  });\r\n```\r\nAnd when I run ``npm test`` get the below error for this specific test. I am thinking if I am missing something here, probably its around the line ``ReactTestUtils.Simulate.submit($el.find('form')[0])``\r\n\r\n```\r\nSUMMARY:\r\n\u2714 6 tests completed\r\n\u2716 2 tests failed\r\n\r\nFAILED TESTS:\r\n  CountdownForm\r\n    \u2716 should call onSetCountdown if valid seconds entered\r\n      Chrome 63.0.3239 (Linux 0.0.0)\r\n    Error: Script error. (:0)\r\n        at Object.invokeGuardedCallbackDev (webpack-internal:///77:581:16)\r\n        at Object.invokeGuardedCallback (webpack-internal:///77:438:27)\r\n        at Object.invokeGuardedCallbackAndCatchFirstError (webpack-internal:///77:452:43)\r\n        at executeDispatch (webpack-internal:///77:836:19)\r\n        at executeDispatchesInOrder (webpack-internal:///77:858:5)\r\n        at executeDispatchesAndRelease (webpack-internal:///77:956:5)\r\n        at executeDispatchesAndReleaseSimulated (webpack-internal:///77:964:10)\r\n        at forEachAccumulated (webpack-internal:///77:937:8)\r\n        at Object.processEventQueue (webpack-internal:///77:1110:5)\r\n\r\n    \u2716 should call onSetCountdown if valid seconds entered \r\n      Chrome 63.0.3239 (Linux 0.0.0)\r\n    Error: Script error. (:0)\r\n        at Object.invokeGuardedCallbackDev (webpack-internal:///77:581:16)\r\n        at Object.invokeGuardedCallback (webpack-internal:///77:438:27)\r\n        at Object.invokeGuardedCallbackAndCatchFirstError (webpack-internal:///77:452:43)\r\n        at executeDispatch (webpack-internal:///77:836:19)\r\n        at executeDispatchesInOrder (webpack-internal:///77:858:5)\r\n        at executeDispatchesAndRelease (webpack-internal:///77:956:5)\r\n        at executeDispatchesAndReleaseSimulated (webpack-internal:///77:964:10)\r\n        at forEachAccumulated (webpack-internal:///77:937:8)\r\n        at Object.processEventQueue (webpack-internal:///77:1110:5)\r\n\r\n07 01 2018 00:07:56.223:WARN [launcher]: Chrome was not killed in 2000 ms, sending SIGKILL.\r\n```\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nI am using Ubuntu 16-04 and Chrome Version 63.0.3239.108 (Official Build) (64-bit). And below from my package.json\r\n\r\n```\r\n    react\": \"^16.0.0\",\r\n    \"react-dom\": \"^16.0.0\",\r\n    \"react-router\": \"^4.2.0\",\r\n    \"react-router-dom\": \"^4.2.2\",\r\n    \"karma\": \"^1.7.1\",\r\n    \"karma-chrome-launcher\": \"^2.2.0\",\r\n    \"karma-mocha\": \"^1.3.0\",\r\n    \"karma-mocha-reporter\": \"^2.2.5\",\r\n    \"karma-sourcemap-loader\": \"^0.3.7\",\r\n    \"karma-webpack\": \"^2.0.6\",\r\n    \"mocha\": \"^4.0.1\",    \r\n    \"webpack\": \"^3.8.1\"`\r\n```\r\n\r\n  ",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/12012",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/12012/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/12012/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/12012/events",
        "html_url": "https://github.com/facebook/react/issues/12012",
        "id": 288072258,
        "number": 12012,
        "title": "React.Children.toArray and React.cloneElement do not work with portal elements",
        "user": {
            "login": "radubrehar",
            "id": 196656,
            "avatar_url": "https://avatars0.githubusercontent.com/u/196656?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/radubrehar",
            "html_url": "https://github.com/radubrehar",
            "followers_url": "https://api.github.com/users/radubrehar/followers",
            "following_url": "https://api.github.com/users/radubrehar/following{/other_user}",
            "gists_url": "https://api.github.com/users/radubrehar/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/radubrehar/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/radubrehar/subscriptions",
            "organizations_url": "https://api.github.com/users/radubrehar/orgs",
            "repos_url": "https://api.github.com/users/radubrehar/repos",
            "events_url": "https://api.github.com/users/radubrehar/events{/privacy}",
            "received_events_url": "https://api.github.com/users/radubrehar/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2018-01-12T10:23:26Z",
        "updated_at": "2018-05-22T14:52:19Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBUG or undefined behaviour\r\n\r\n**What is the current behavior?**\r\n\r\nDoing\r\n```\r\nReact.Children.toArray(\r\n  ReactDOM.createPortal(...)\r\n)\r\n```\r\n\r\nfails with:\r\n```\r\nObjects are not valid as a React child (found: object with keys {$$typeof, key, children, containerInfo, implementation}). If you meant to render a collection of children, use an array instead.\r\n```\r\n\r\nNamely, the following complete snippet fails:\r\n\r\n```jsx\r\nimport React from 'react';\r\nimport { render, createPortal } from 'react-dom';\r\n\r\nconst RenderChildren = ({ children }) => {\r\n  children = React.Children.toArray(children)\r\n  return <h1>Renders children with toArray: {children}</h1>\r\n}\r\n\r\n\r\nconst App = () => ( \r\n  <RenderChildren name=\"CodeSandbox\">\r\n    {createPortal(<div>rendered in portal</div>, document.getElementById('portal'))}\r\n  </RenderChildren>\r\n);\r\n\r\nrender(<App />, document.getElementById('root'));\r\n```\r\n\r\nwhile the following one, which wraps the portal in another element works just fine\r\n\r\n```jsx\r\nimport React from 'react';\r\nimport { render, createPortal } from 'react-dom';\r\n\r\nconst RenderChildren = ({ children }) => {\r\n  children = React.Children.toArray(children)\r\n  return <h1>Renders children with toArray: {children}</h1>\r\n}\r\n\r\n\r\nconst App = () => ( \r\n  <RenderChildren name=\"CodeSandbox\">\r\n    <div>\r\n        {createPortal(<div>rendered in portal</div>, document.getElementById('portal'))}\r\n    </div>\r\n  </RenderChildren>\r\n);\r\n\r\nrender(<App />, document.getElementById('root'));\r\n\r\n```\r\n**What is the expected behavior?**\r\nI am aware that `createPortal` is a new feature, but in the best case scenario it should be possible to use it everywhere other valid nodes are accepted.\r\n\r\nThe same thing is happening for `React.cloneElement(ReactDOM.createPortal(....))` - it's probably weird to try and clone a portal \ud83d\ude04  - but maybe we should specify in the `createPortal` documentation that it cannot be cloned, at least for now. Should I open a PR for that?\r\n\r\nLet me know your thoughts\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nI'm using React 16.*",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/12014",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/12014/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/12014/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/12014/events",
        "html_url": "https://github.com/facebook/react/issues/12014",
        "id": 288301289,
        "number": 12014,
        "title": "Have Fragments support dangerouslySetInnerHTML",
        "user": {
            "login": "dominikwilkowski",
            "id": 1266923,
            "avatar_url": "https://avatars3.githubusercontent.com/u/1266923?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dominikwilkowski",
            "html_url": "https://github.com/dominikwilkowski",
            "followers_url": "https://api.github.com/users/dominikwilkowski/followers",
            "following_url": "https://api.github.com/users/dominikwilkowski/following{/other_user}",
            "gists_url": "https://api.github.com/users/dominikwilkowski/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dominikwilkowski/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dominikwilkowski/subscriptions",
            "organizations_url": "https://api.github.com/users/dominikwilkowski/orgs",
            "repos_url": "https://api.github.com/users/dominikwilkowski/repos",
            "events_url": "https://api.github.com/users/dominikwilkowski/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dominikwilkowski/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 121709921,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 8,
        "created_at": "2018-01-13T04:15:48Z",
        "updated_at": "2018-04-06T10:48:06Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "The addition of the `Fragment` in 16.2.0 is fantastic and helps keep our HTML semantic and clean. Unfortunately there is still no way to inject HTML without a wrapping tag.\r\n\r\n```jsx\r\nconst HTML = <span>Hello World</span>;\r\n\r\n<div key={ ID } dangerouslySetInnerHTML={ { __html: HTML } } />\r\n```\r\n\r\nwhich will render:\r\n\r\n```html\r\n<div><span>Hello World</span></div>\r\n```\r\n\r\nIt would be mostly helpful for rendering HTML from jsx on the back end rather than in the SPA context. To me `Fragment` seems to be the ideal candidate to support `dangerouslySetInnerHTML` so that you may inject HTML without wrapping elements.\r\n\r\n```jsx\r\nconst HTML = <span>Hello World</span>;\r\n\r\n<Fragment key={ ID } dangerouslySetInnerHTML={ { __html: HTML } } />\r\n```\r\n\r\nwould render:\r\n\r\n```jsx\r\n<span>Hello World</span>\r\n```\r\n\r\nSimple, obvious and aligned with the current API.",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/12039",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/12039/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/12039/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/12039/events",
        "html_url": "https://github.com/facebook/react/issues/12039",
        "id": 289620901,
        "number": 12039,
        "title": "can React support feature like keep-alive in Vue?",
        "user": {
            "login": "zengjialuo",
            "id": 7902897,
            "avatar_url": "https://avatars0.githubusercontent.com/u/7902897?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zengjialuo",
            "html_url": "https://github.com/zengjialuo",
            "followers_url": "https://api.github.com/users/zengjialuo/followers",
            "following_url": "https://api.github.com/users/zengjialuo/following{/other_user}",
            "gists_url": "https://api.github.com/users/zengjialuo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zengjialuo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zengjialuo/subscriptions",
            "organizations_url": "https://api.github.com/users/zengjialuo/orgs",
            "repos_url": "https://api.github.com/users/zengjialuo/repos",
            "events_url": "https://api.github.com/users/zengjialuo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zengjialuo/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 710375792,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
                "name": "Type: Discussion",
                "color": "fef2c0",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 10,
        "created_at": "2018-01-18T13:02:31Z",
        "updated_at": "2018-01-26T08:46:34Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "i found this issue: https://github.com/facebook/react/issues/4770,  and @sophiebits said that React never reuses an instance after it's been unmounted. \r\n\r\ndoes it means that React will never support feature like keep-alive in Vue? or there is other way to maintain component's state?\r\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/12051",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/12051/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/12051/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/12051/events",
        "html_url": "https://github.com/facebook/react/issues/12051",
        "id": 289858687,
        "number": 12051,
        "title": "Event Handlers on Fragments",
        "user": {
            "login": "sebmarkbage",
            "id": 63648,
            "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sebmarkbage",
            "html_url": "https://github.com/sebmarkbage",
            "followers_url": "https://api.github.com/users/sebmarkbage/followers",
            "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
            "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
            "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
            "repos_url": "https://api.github.com/users/sebmarkbage/repos",
            "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 739761016,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Reconciler",
                "name": "Component: Reconciler",
                "color": "f9a798",
                "default": false
            },
            {
                "id": 40929153,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement",
                "name": "Type: Enhancement",
                "color": "84b6eb",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 12,
        "created_at": "2018-01-19T04:20:57Z",
        "updated_at": "2018-02-25T04:51:31Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "The use case is when an abstraction wants to listen to some event bubbling up and intercept the event somehow.\r\n\r\n```js\r\nfunction Abstraction(props) {\r\n  return <div onClick={() => props.onAction()}>{props.children}</div>;\r\n}\r\n```\r\n\r\nPerhaps there is some state and context involved too.\r\n\r\nThis works fine today as long as you can wrap it in a `<div />`. However, you can't necessarily always do that. I hear that some of this will be relaxed but conceptually I think the constraints will remain in many environment that you don't want a wrapper element around these.\r\n\r\n```js\r\n<ul>\r\n  <Abstraction onAction={...}>\r\n    <li>A</li>\r\n    <li>B</li>\r\n  </Abstraction>\r\n</ul>\r\n```\r\n\r\n```js\r\n<table>\r\n  <tbody>\r\n    <Abstraction onAction={...}>\r\n      <tr><td>A</td></tr>\r\n      <tr><td>B</td></tr>\r\n    </Abstraction>\r\n    <Abstraction onAction={...}>\r\n      <tr><td>A</td></tr>\r\n      <tr><td>B</td></tr>\r\n    </Abstraction>\r\n  </tbody>\r\n</table>\r\n```\r\n\r\nIt would be nice to be able to use fragments for this.\r\n\r\n```js\r\nfunction Abstraction(props) {\r\n  return <Fragment onClick={() => props.onAction()}>{props.children}</Fragment>;\r\n}\r\n```\r\n\r\nIt is easy to implement with the synthetic event system but I suspect it is doable with other approaches too (including just inserting an element called `<fragment />` in the DOM).\r\n\r\nTo implement this we'd need somewhere to store the \"current\" props. We can use the `stateNode` on fragment fibers to hold that. We also need to schedule commit phase effects whenever the set of event handlers on a fragment changes. In the commit phase we update the stateNode on both Fibers to hold the \"current props\".\r\n\r\nThat way when we bubble up the fiber return pointers, we know that stateNode holds the current set of props and those will be the ones we extract event handlers from.",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/12058",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/12058/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/12058/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/12058/events",
        "html_url": "https://github.com/facebook/react/issues/12058",
        "id": 290146804,
        "number": 12058,
        "title": "__source makes component stack less useful",
        "user": {
            "login": "billyjanitsch",
            "id": 1158733,
            "avatar_url": "https://avatars3.githubusercontent.com/u/1158733?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/billyjanitsch",
            "html_url": "https://github.com/billyjanitsch",
            "followers_url": "https://api.github.com/users/billyjanitsch/followers",
            "following_url": "https://api.github.com/users/billyjanitsch/following{/other_user}",
            "gists_url": "https://api.github.com/users/billyjanitsch/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/billyjanitsch/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/billyjanitsch/subscriptions",
            "organizations_url": "https://api.github.com/users/billyjanitsch/orgs",
            "repos_url": "https://api.github.com/users/billyjanitsch/repos",
            "events_url": "https://api.github.com/users/billyjanitsch/events{/privacy}",
            "received_events_url": "https://api.github.com/users/billyjanitsch/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 710375792,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
                "name": "Type: Discussion",
                "color": "fef2c0",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 6,
        "created_at": "2018-01-20T00:32:03Z",
        "updated_at": "2018-01-20T13:11:09Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nSomewhere in between.\r\n\r\n**What is the current behavior?**\r\n\r\nWhen I enable `babel-plugin-transform-react-jsx-source` to automatically add a `__source` prop to every component in development, the component stack displayed for certain React warnings changes from displaying the (inferred) name of the rendering component to displaying the filename and line number of the occurrence.\r\n\r\nReact also has access to the file path, but [it is stripped](https://github.com/facebook/react/blob/30dac4e78de02fb427ee82013160ae875128d7a2/packages/shared/describeComponentFrame.js#L20) and only the filename is included. This seems to be based on the assumption that the name of a file always maps exactly to the name of the component it exports. In practice, many people place components in `ComponentName/index.js`, so `__source` currently makes the stack _less_ useful.\r\n\r\nFor example, compare:\r\n```\r\n    in DownloadDropdown (created by Foo)\r\n    in Foo (created by Bar)\r\n    in div (created by Bar)\r\n    in div (created by Bar)\r\n    in div (created by Section)\r\n    in section (created by Section)\r\n    in Section (created by Bar)\r\n    in div (created by App)\r\n    in main (created by App)\r\n    ...\r\n```\r\nto:\r\n```\r\n    in DownloadDropdown (at index.js:53)\r\n    in Foo (at index.js:183)\r\n    in div (at index.js:182)\r\n    in div (at index.js:175)\r\n    in div (at index.js:29)\r\n    in section (at index.js:28)\r\n    in Section (at index.js:173)\r\n    in div (at index.js:26)\r\n    in main (at index.js:24)\r\n    ...\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\nI would like the stack to include the full file path, or at least to include the inferred component name alongside the filename.\r\n\r\nWould you accept a PR for either option?\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact 16.2.0. This was introduced in #6771 for 15.2.0.",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/12062",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/12062/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/12062/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/12062/events",
        "html_url": "https://github.com/facebook/react/issues/12062",
        "id": 290207502,
        "number": 12062,
        "title": "Problem when input type changes from email to text",
        "user": {
            "login": "adrianimboden",
            "id": 2713705,
            "avatar_url": "https://avatars1.githubusercontent.com/u/2713705?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/adrianimboden",
            "html_url": "https://github.com/adrianimboden",
            "followers_url": "https://api.github.com/users/adrianimboden/followers",
            "following_url": "https://api.github.com/users/adrianimboden/following{/other_user}",
            "gists_url": "https://api.github.com/users/adrianimboden/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/adrianimboden/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/adrianimboden/subscriptions",
            "organizations_url": "https://api.github.com/users/adrianimboden/orgs",
            "repos_url": "https://api.github.com/users/adrianimboden/repos",
            "events_url": "https://api.github.com/users/adrianimboden/events{/privacy}",
            "received_events_url": "https://api.github.com/users/adrianimboden/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 40929151,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
                "name": "Type: Bug",
                "color": "b60205",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 11,
        "created_at": "2018-01-20T17:17:02Z",
        "updated_at": "2018-04-06T18:01:02Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nWhen an input field changes from \"email\" to \"text\", an exception TypeError will be thrown from setSelection.\r\n![Screenshot](https://raw.githubusercontent.com/adrianimboden/react-bug-reproduction/master/screenshot.png)\r\n\r\n**Reproduction**\r\nSee here: https://github.com/adrianimboden/react-bug-reproduction\r\n\r\n**What is the expected behavior?**\r\nIt should not crash because of an uncaught exception\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nmaster (https://github.com/facebook/react/commit/4ca7855ca062d5d7dfca83c86acf46731e1e57ef)\r\nFirefox\r\n\r\nThis would be my proposed change to fix the issue: https://github.com/adrianimboden/react/commit/db923b8c3c1cb23ad9fb150c160ce56f39dd3cae",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/12072",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/12072/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/12072/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/12072/events",
        "html_url": "https://github.com/facebook/react/issues/12072",
        "id": 290555006,
        "number": 12072,
        "title": "All controlled <textarea/> fields re-render on any setState() call even though their data has not changed.",
        "user": {
            "login": "martintasevski",
            "id": 33579371,
            "avatar_url": "https://avatars2.githubusercontent.com/u/33579371?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/martintasevski",
            "html_url": "https://github.com/martintasevski",
            "followers_url": "https://api.github.com/users/martintasevski/followers",
            "following_url": "https://api.github.com/users/martintasevski/following{/other_user}",
            "gists_url": "https://api.github.com/users/martintasevski/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/martintasevski/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/martintasevski/subscriptions",
            "organizations_url": "https://api.github.com/users/martintasevski/orgs",
            "repos_url": "https://api.github.com/users/martintasevski/repos",
            "events_url": "https://api.github.com/users/martintasevski/events{/privacy}",
            "received_events_url": "https://api.github.com/users/martintasevski/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 40929151,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
                "name": "Type: Bug",
                "color": "b60205",
                "default": false
            },
            {
                "id": 710722093,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
                "name": "Type: Needs Investigation",
                "color": "fbca04",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 7,
        "created_at": "2018-01-22T17:45:57Z",
        "updated_at": "2018-02-15T05:15:33Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nReporting a bug.\r\n\r\n**What is the current behavior?**\r\nBasically I have many controlled `<textarea/>` fields in the app that I am currently developing and I normally only want them to re-render when their values have changed through their onChange event, but they re-render every time setState() gets called anywhere within the component or any parent component.\r\n\r\nI even tried creating a custom component which only contains a `<textarea/>` and setting shouldComponentUpdate() to return false but it seems to ignore that command completely. It's weird because in this case the console.log()s in my child component's render() function don't get executed but the field gets re-rendered nonetheless.\r\n\r\nThis issue is causing some major performance problems in my app. I hope someone addresses this issue as fast as possible so I can continue working on my react project. Maybe someone can provide a temporary workaround? Please let me know if there's something I'm missing or if I'm using this field incorrectly.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\nI have isolated the problem in a new empty app and you can see the behavior in the following gif:\r\nhttps://gfycat.com/DentalExcitableIndri\r\n\r\nThe code is very simple. You can recreate this problem by creating 2 controlled fields, one `<input/>` and another `<textarea/>`. Then go to your browser, inspect the `<textarea/>` element and input something in the basic input field. The `<textarea/>` will re-render on every new typed letter in the `<input/>` field but not the other way around.\r\n```javascript\r\nimport React, { Component } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tta1 : \"ta1\",\r\n\t\t\tta2 : \"ta2\",\r\n\t\t\tta3 : \"ta3\",\r\n\t\t\ti1 : \"i1\",\r\n\t\t\ti2 : \"i2\",\r\n\t\t\ti3 : \"i3\"\r\n\t\t};\r\n\t\tthis.handleInputChange = this.handleInputChange.bind(this);\r\n\t}\r\n\r\n\thandleInputChange(event){\r\n\t\tthis.setState({\r\n\t\t\t[event.target.name] : event.target.value\r\n\t\t});\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"App\">\r\n\t\t\t\t<header className=\"App-header\">\r\n\t\t\t\t\t<img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n\t\t\t\t\t<h1 className=\"App-title\">Welcome to React</h1>\r\n\t\t\t\t</header>\r\n\t\t\t\t<p className=\"App-intro\">\r\n\t\t\t\t\ttest\r\n\t\t\t\t</p>\r\n\t\t\t\t<div className=\"row\">\r\n\t\t\t\t\t<div className=\"column\">\r\n\t\t\t\t\t\ttextareas\r\n\t\t\t\t\t\t<textarea value={this.state.ta1} name=\"ta1\" onChange={this.handleInputChange}/>\r\n\t\t\t\t\t\t<textarea value={this.state.ta2} name=\"ta2\" onChange={this.handleInputChange}/>\r\n\t\t\t\t\t\t<textarea value={this.state.ta3} name=\"ta3\" onChange={this.handleInputChange}/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"column\">\r\n\t\t\t\t\t\tinput fields\r\n\t\t\t\t\t\t<input value={this.state.i1} name=\"i1\" onChange={this.handleInputChange}/>\r\n\t\t\t\t\t\t<input value={this.state.i2} name=\"i2\" onChange={this.handleInputChange}/>\r\n\t\t\t\t\t\t<input value={this.state.i3} name=\"i3\" onChange={this.handleInputChange}/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;\r\n```\r\n\r\n**What is the expected behavior?**\r\nThe `<textarea/>` field should only re-render when its data is changed.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nI was able to recreate this problem on React versions 16.2.0 (latest) and 15.6.1. I did not test on other versions so I am not sure if this worked correctly before. I'm using Chrome 62.0.3202.94 64-bit (latest) and Firefox 57.0.4 64-bit (latest) on Ubuntu 14.04.",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/12073",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/12073/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/12073/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/12073/events",
        "html_url": "https://github.com/facebook/react/issues/12073",
        "id": 290557932,
        "number": 12073,
        "title": "Fabric Todos",
        "user": {
            "login": "sebmarkbage",
            "id": 63648,
            "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sebmarkbage",
            "html_url": "https://github.com/sebmarkbage",
            "followers_url": "https://api.github.com/users/sebmarkbage/followers",
            "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
            "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
            "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
            "repos_url": "https://api.github.com/users/sebmarkbage/repos",
            "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 710615342,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Umbrella",
                "name": "Type: Umbrella",
                "color": "5319e7",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2018-01-22T17:55:39Z",
        "updated_at": "2018-01-28T13:07:17Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "For my own notes here are some spill-overs from the Fabric renderer commit.\r\n\r\n- [ ] Update currentProps for updates in the commit phase. Needs a host effect to be marked and we need a hook to do host updates in the persistent mode.\r\n- [ ] Actually use currentProps when extracting events in the component tree.\r\n- [ ] Resuming will need to be able to not reuse host nodes used by another thread.\r\n- [ ] Should always clone direct siblings of a changed node, in case they will relayout.",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/12136",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/12136/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/12136/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/12136/events",
        "html_url": "https://github.com/facebook/react/issues/12136",
        "id": 293674295,
        "number": 12136,
        "title": "Children.only conflicts with Children.count",
        "user": {
            "login": "jamesreggio",
            "id": 822205,
            "avatar_url": "https://avatars1.githubusercontent.com/u/822205?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jamesreggio",
            "html_url": "https://github.com/jamesreggio",
            "followers_url": "https://api.github.com/users/jamesreggio/followers",
            "following_url": "https://api.github.com/users/jamesreggio/following{/other_user}",
            "gists_url": "https://api.github.com/users/jamesreggio/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jamesreggio/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jamesreggio/subscriptions",
            "organizations_url": "https://api.github.com/users/jamesreggio/orgs",
            "repos_url": "https://api.github.com/users/jamesreggio/repos",
            "events_url": "https://api.github.com/users/jamesreggio/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jamesreggio/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 5,
        "created_at": "2018-02-01T20:34:46Z",
        "updated_at": "2018-03-07T00:48:26Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n**What is the current behavior?**\r\n\r\n```\r\nconst children = [<div />];\r\n\r\nReact.Children.count(children);\r\n// => 1\r\n\r\nconst child = React.Children.only(children);\r\n// => Error('React.Children.only expected to receive a single React element child.')\r\n```\r\n\r\nRepro in CodeSandbox here: https://codesandbox.io/s/1vonwo4807\r\n\r\n**What is the expected behavior?**\r\n\r\nIt's excepted that `React.Children.only` return the one and only element of the array (and not throw).\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact 16.2.0\r\n\r\nI'm not certain if this is the behavior prior to React 16 (pre-Fiber), but Fiber supports and encourages the use of fragments (i.e., arrays of elements); as such, this issue is much more likely to be encountered in React 16 onward.\r\n\r\nFurthermore, the above code just reads like something is wrong.\r\n\r\n_How many children do I have?_ **1.**\r\n_May I have the only child?_ **No, I expected you to only have one child.**\r\n_Um, okay._",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/12141",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/12141/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/12141/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/12141/events",
        "html_url": "https://github.com/facebook/react/issues/12141",
        "id": 294048365,
        "number": 12141,
        "title": "React16 dev memory leak on render with event listeners",
        "user": {
            "login": "frehner",
            "id": 3054066,
            "avatar_url": "https://avatars2.githubusercontent.com/u/3054066?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/frehner",
            "html_url": "https://github.com/frehner",
            "followers_url": "https://api.github.com/users/frehner/followers",
            "following_url": "https://api.github.com/users/frehner/following{/other_user}",
            "gists_url": "https://api.github.com/users/frehner/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/frehner/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/frehner/subscriptions",
            "organizations_url": "https://api.github.com/users/frehner/orgs",
            "repos_url": "https://api.github.com/users/frehner/repos",
            "events_url": "https://api.github.com/users/frehner/events{/privacy}",
            "received_events_url": "https://api.github.com/users/frehner/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 620368407,
                "url": "https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information",
                "name": "Resolution: Needs More Information",
                "color": "fffde7",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 20,
        "created_at": "2018-02-02T22:54:27Z",
        "updated_at": "2018-05-01T23:16:04Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n**What is the current behavior?**\r\n\r\nUsing React16 dev, it appears around 8 event listeners are added every time a component is rerendered. They occasionally get garbage collected, but if you're listening to events that happen a lot (scroll, fast typing, etc) it can slow down and kill the tab you're using.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nhttps://jsfiddle.net/Luktwrdm/80/\r\nOpen dev tools -> performance, check the \"Memory\" checkbox, and start a performance capture. Then type quickly into the text box for a bit. Stop the performance capture and note the increase in event listeners. Picture included for reference.\r\n![screen shot 2018-02-02 at 3 51 56 pm](https://user-images.githubusercontent.com/3054066/35758393-0fcf8618-0831-11e8-814a-317c82e5d620.png)\r\n\r\n**What is the expected behavior?**\r\n\r\nNo memory leaks\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact16, Chrome, MacOS\r\n\r\nLet me know if there's anything I can do to help clarify. Hopefully I got the right wording/info in here. Thanks!",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/12169",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/12169/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/12169/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/12169/events",
        "html_url": "https://github.com/facebook/react/issues/12169",
        "id": 294982759,
        "number": 12169,
        "title": "Prop to pass data to event handlers",
        "user": {
            "login": "shanimal",
            "id": 283957,
            "avatar_url": "https://avatars1.githubusercontent.com/u/283957?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/shanimal",
            "html_url": "https://github.com/shanimal",
            "followers_url": "https://api.github.com/users/shanimal/followers",
            "following_url": "https://api.github.com/users/shanimal/following{/other_user}",
            "gists_url": "https://api.github.com/users/shanimal/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/shanimal/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/shanimal/subscriptions",
            "organizations_url": "https://api.github.com/users/shanimal/orgs",
            "repos_url": "https://api.github.com/users/shanimal/repos",
            "events_url": "https://api.github.com/users/shanimal/events{/privacy}",
            "received_events_url": "https://api.github.com/users/shanimal/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2018-02-07T02:15:48Z",
        "updated_at": "2018-03-07T16:35:37Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "This is a feature request\r\n\r\nMy suggestion is to add a known prop that gets passed through to all handlers as the second parameter. This would eliminate the need for closures, inline binding, inline arrow functions, proxyEvent.target.dataset, etc.\r\n```\r\nhandleClick(proxyEvent, eventData) {\r\n  // do stuff with eventData...\r\n}\r\n<Component eventData={data} onClick={this.handleClick} />\r\n```\r\n\r\nCurrently if we need to pass `data` through an event handler there are several ways...\r\n\r\nCreate a class method that returns a closure:\r\n```\r\nclickHandler(eventData) {\r\n  return (proxyEvent) => {\r\n    // do stuff with eventData\r\n  }\r\n}\r\n<Button onClick={clickHandler(eventData)} />\r\n```\r\n\r\nuse inline bind or arrow function\r\n```\r\nclickHandler(eventData, proxyEvent) {\r\n  // do stuff with eventData\r\n}\r\n<Button onClick={this.clickHandler.bind(this, eventData)} />\r\n<Button onClick={(proxyEvent) => clickHandler(eventData, proxyEvent)} />\r\n```\r\n\r\nAND\r\n\r\nA not so intuitive alternative is to use `proxyEvent.target.dataset`\r\n```\r\nclickHandler(proxyEvent) {\r\n    const eventData = datas\r\n      .find(data => data.get('id') === proxyEvent.target.dataset.button);\r\n    // do stuff with eventData...\r\n}\r\n<Button onClick={clickHandler} data-button={data.get('id')} />\r\n```\r\nIf you pass an object to any `data-`prop it gets converted to a string. My immutable Map becomes `DOMStringMap {button: \"Map { \"id\": \"84280bcc-ab3b-45d5-8882-dc74a17da...` so I have to pass an ID and use it in the handler to find my data.\r\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/12171",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/12171/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/12171/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/12171/events",
        "html_url": "https://github.com/facebook/react/issues/12171",
        "id": 295044019,
        "number": 12171,
        "title": "Remove use of Proxy for events in development",
        "user": {
            "login": "gaearon",
            "id": 810438,
            "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gaearon",
            "html_url": "https://github.com/gaearon",
            "followers_url": "https://api.github.com/users/gaearon/followers",
            "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
            "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
            "organizations_url": "https://api.github.com/users/gaearon/orgs",
            "repos_url": "https://api.github.com/users/gaearon/repos",
            "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gaearon/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 710375792,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
                "name": "Type: Discussion",
                "color": "fef2c0",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 8,
        "created_at": "2018-02-07T08:17:56Z",
        "updated_at": "2018-02-10T16:21:00Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "I think maybe we should revert https://github.com/facebook/react/pull/5947.\r\n\r\nPeople already think `proxyEvent` is some kind of an API: https://github.com/facebook/react/issues/12169.\r\n\r\nIt's also annoying to view in the debugger because none of the properties show up.\r\n\r\nInstead, we could seal the event object or something like that.",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/12185",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/12185/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/12185/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/12185/events",
        "html_url": "https://github.com/facebook/react/issues/12185",
        "id": 295496647,
        "number": 12185,
        "title": "Update shouldComponentUpdate docs with advice about closures",
        "user": {
            "login": "thysultan",
            "id": 810601,
            "avatar_url": "https://avatars2.githubusercontent.com/u/810601?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/thysultan",
            "html_url": "https://github.com/thysultan",
            "followers_url": "https://api.github.com/users/thysultan/followers",
            "following_url": "https://api.github.com/users/thysultan/following{/other_user}",
            "gists_url": "https://api.github.com/users/thysultan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/thysultan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/thysultan/subscriptions",
            "organizations_url": "https://api.github.com/users/thysultan/orgs",
            "repos_url": "https://api.github.com/users/thysultan/repos",
            "events_url": "https://api.github.com/users/thysultan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/thysultan/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": {
            "login": "acdlite",
            "id": 3624098,
            "avatar_url": "https://avatars0.githubusercontent.com/u/3624098?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/acdlite",
            "html_url": "https://github.com/acdlite",
            "followers_url": "https://api.github.com/users/acdlite/followers",
            "following_url": "https://api.github.com/users/acdlite/following{/other_user}",
            "gists_url": "https://api.github.com/users/acdlite/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/acdlite/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/acdlite/subscriptions",
            "organizations_url": "https://api.github.com/users/acdlite/orgs",
            "repos_url": "https://api.github.com/users/acdlite/repos",
            "events_url": "https://api.github.com/users/acdlite/events{/privacy}",
            "received_events_url": "https://api.github.com/users/acdlite/received_events",
            "type": "User",
            "site_admin": false
        },
        "assignees": [
            {
                "login": "acdlite",
                "id": 3624098,
                "avatar_url": "https://avatars0.githubusercontent.com/u/3624098?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/acdlite",
                "html_url": "https://github.com/acdlite",
                "followers_url": "https://api.github.com/users/acdlite/followers",
                "following_url": "https://api.github.com/users/acdlite/following{/other_user}",
                "gists_url": "https://api.github.com/users/acdlite/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/acdlite/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/acdlite/subscriptions",
                "organizations_url": "https://api.github.com/users/acdlite/orgs",
                "repos_url": "https://api.github.com/users/acdlite/repos",
                "events_url": "https://api.github.com/users/acdlite/events{/privacy}",
                "received_events_url": "https://api.github.com/users/acdlite/received_events",
                "type": "User",
                "site_admin": false
            }
        ],
        "milestone": null,
        "comments": 48,
        "created_at": "2018-02-08T12:38:01Z",
        "updated_at": "2018-02-16T16:06:55Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nPossible bug depending on my understanding of the new context feature.\r\n\r\n**What is the current behavior?**\r\n\r\nThe presence of an `<Indirection>` component with `shouldComponentUpdate:false` is blocking updates to context consumers below it after the first click of \"Toggle Top Data\": [https://codesandbox.io/s/v87rp187r7](https://codesandbox.io/s/v87rp187r7)\r\n\r\n**What is the expected behavior?**\r\n\r\nFor consumers below a shouldComponentUpdate component to continue updating after the first \"Toggle Top Data\" click.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact 16.3.0-alpha.0",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/12200",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/12200/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/12200/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/12200/events",
        "html_url": "https://github.com/facebook/react/issues/12200",
        "id": 295990671,
        "number": 12200,
        "title": "Regression: React 16 automatically marks first item of a mutliple select as checked",
        "user": {
            "login": "megawac",
            "id": 3475472,
            "avatar_url": "https://avatars2.githubusercontent.com/u/3475472?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/megawac",
            "html_url": "https://github.com/megawac",
            "followers_url": "https://api.github.com/users/megawac/followers",
            "following_url": "https://api.github.com/users/megawac/following{/other_user}",
            "gists_url": "https://api.github.com/users/megawac/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/megawac/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/megawac/subscriptions",
            "organizations_url": "https://api.github.com/users/megawac/orgs",
            "repos_url": "https://api.github.com/users/megawac/repos",
            "events_url": "https://api.github.com/users/megawac/events{/privacy}",
            "received_events_url": "https://api.github.com/users/megawac/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 40929151,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
                "name": "Type: Bug",
                "color": "b60205",
                "default": false
            },
            {
                "id": 178761159,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Regression",
                "name": "Type: Regression",
                "color": "e11d21",
                "default": false
            },
            {
                "id": 725156255,
                "url": "https://api.github.com/repos/facebook/react/labels/good%20first%20issue%20(taken)",
                "name": "good first issue (taken)",
                "color": "b60205",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 11,
        "created_at": "2018-02-09T19:47:53Z",
        "updated_at": "2018-02-17T21:43:40Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug - Regression\r\n\r\n**What is the current behavior?**\r\n\r\nIn react 16 when creating a `<select multiple>` the first child `<option>` is automatically getting marked as selected. In React 16 there does not seem to be a way to specify no `<option>` gets selected by default\r\n\r\nhttps://codesandbox.io/s/moxm2on3z9\r\n\r\n**What is the expected behavior?**\r\n\r\nIn React 15 unless you marked an option to be selected `<option selected>` no options were selected by default.\r\n\r\nhttps://codesandbox.io/s/ll11z5wqzl\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nVersions effected include `react^16.2`, this worked in `react^0.13` and `react^15`. This bug is reproducible in chrome 64 and Firefox 58.\r\n\r\n\r\n-------------------------------\r\n\r\nThe hacky workaround I found to get around the first option getting selected is to inject a `<option style={{display: 'none'}} />` as the first child of the multiselect.",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/12208",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/12208/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/12208/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/12208/events",
        "html_url": "https://github.com/facebook/react/issues/12208",
        "id": 296203595,
        "number": 12208,
        "title": "[react.hydrate] does not match",
        "user": {
            "login": "HsuTing",
            "id": 8859179,
            "avatar_url": "https://avatars3.githubusercontent.com/u/8859179?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/HsuTing",
            "html_url": "https://github.com/HsuTing",
            "followers_url": "https://api.github.com/users/HsuTing/followers",
            "following_url": "https://api.github.com/users/HsuTing/following{/other_user}",
            "gists_url": "https://api.github.com/users/HsuTing/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/HsuTing/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/HsuTing/subscriptions",
            "organizations_url": "https://api.github.com/users/HsuTing/orgs",
            "repos_url": "https://api.github.com/users/HsuTing/repos",
            "events_url": "https://api.github.com/users/HsuTing/events{/privacy}",
            "received_events_url": "https://api.github.com/users/HsuTing/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2018-02-11T16:35:50Z",
        "updated_at": "2018-05-16T20:49:24Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nbug\r\n\r\n**What is the current behavior?**\r\n`react.hydrate` does not match.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\n#### Component\r\n```js\r\nrender() {\r\n  return (\r\n    <div>\r\n      {str1}\r\n      {str2}\r\n    </div>\r\n  );\r\n}\r\n```\r\nI use `react.hydrate` to do `SSR`.\r\nThis will show error if `str2` is \"str2\" and `str1` is \"str1\":\r\n```js\r\nWarning: Text content did not match. Server: \"str2str1\" Client: \"str1\"\r\n```\r\nBut the `client` of the `html` is the same as the `server` of the `html`.\r\n\r\n\r\n**What is the expected behavior?**\r\nThis should not show the `Error`.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact: 16.2.0\r\nOS: Mac OS X 10.13.3\r\nBrowser: Chrome 63.0.3239.132 (Official Build) (64-bit)\r\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/12209",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/12209/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/12209/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/12209/events",
        "html_url": "https://github.com/facebook/react/issues/12209",
        "id": 296211558,
        "number": 12209,
        "title": "Warn if stringifying an attribute takes too long",
        "user": {
            "login": "gaearon",
            "id": 810438,
            "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gaearon",
            "html_url": "https://github.com/gaearon",
            "followers_url": "https://api.github.com/users/gaearon/followers",
            "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
            "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
            "organizations_url": "https://api.github.com/users/gaearon/orgs",
            "repos_url": "https://api.github.com/users/gaearon/repos",
            "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gaearon/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 588833528,
                "url": "https://api.github.com/repos/facebook/react/labels/Difficulty:%20medium",
                "name": "Difficulty: medium",
                "color": "fbca04",
                "default": false
            },
            {
                "id": 725156255,
                "url": "https://api.github.com/repos/facebook/react/labels/good%20first%20issue%20(taken)",
                "name": "good first issue (taken)",
                "color": "b60205",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 13,
        "created_at": "2018-02-11T18:14:28Z",
        "updated_at": "2018-03-28T21:39:53Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "With React 16 we don't have an attribute whitelist so both `src={obj}` and `myattribute={obj}` would be valid. The objects get stringified and added as attributes for smooth migration path because a lot of the existing code already depends on this behavior.\r\n\r\nThere is, however, one pitfall here. Sometimes you made do `<div {...rest}>` and not realize that `rest` includes an object whose stringifying is unusually expensive. For example a deeply nested Immutable Map. Now, this wouldn't produce an error, but it would slow down rendering for no good reason.\r\n\r\nWe could protect against this by putting `performance.now()` counters around the places where we stringify attributes. If stringification takes more than, say, 2 milliseconds, then something bad is going on, and we should probably warn.",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/12227",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/12227/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/12227/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/12227/events",
        "html_url": "https://github.com/facebook/react/issues/12227",
        "id": 297220662,
        "number": 12227,
        "title": "ReactDOM.render no longer works synchronously in a nested rendering context",
        "user": {
            "login": "saranrapjs",
            "id": 707098,
            "avatar_url": "https://avatars2.githubusercontent.com/u/707098?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/saranrapjs",
            "html_url": "https://github.com/saranrapjs",
            "followers_url": "https://api.github.com/users/saranrapjs/followers",
            "following_url": "https://api.github.com/users/saranrapjs/following{/other_user}",
            "gists_url": "https://api.github.com/users/saranrapjs/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/saranrapjs/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/saranrapjs/subscriptions",
            "organizations_url": "https://api.github.com/users/saranrapjs/orgs",
            "repos_url": "https://api.github.com/users/saranrapjs/repos",
            "events_url": "https://api.github.com/users/saranrapjs/events{/privacy}",
            "received_events_url": "https://api.github.com/users/saranrapjs/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 40929155,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Question",
                "name": "Type: Question",
                "color": "cc317c",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 9,
        "created_at": "2018-02-14T19:41:49Z",
        "updated_at": "2018-05-24T14:19:43Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n**What is the current behavior?**\r\n\r\nReentrancy checks prevent synchronous `ReactDOM.render` in a nested React component. This used to work before React 16, and [seems related to this issue about nested ReactDOM renders](https://github.com/facebook/react/issues/12034)\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nHere's a [JSFiddle](https://jsfiddle.net/e5hbzc1r/14/) that documents the problem, with a simulation of the external dependency where this manifests.\r\n\r\n**What is the expected behavior?**\r\n\r\nI'm running into what I think is a [similar problem to this one](https://github.com/facebook/react/issues/12034), with a nested `ReactDOM.render`, except where the difference is that I don't think we can use portals to address our use-case.\r\n\r\nWe have a component which manages the DOM tree for all nodes below it outside of React \u2014\u00a0it's a contenteditable node and uses the best-in-class [ProseMirror](https://prosemirror.net/) library to manage its children. The component looks something like this:\r\n\r\n```javascript\r\nclass ProseMirror extends Component {\r\n\tcomponentDidMount() {\r\n\t\t// ProseMirror manages the DOM for all nodes below this.el.\r\n\t}\r\n\r\n\tsetRef(el) {\r\n\t\tthis.el = el;\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (<div ref={this.setRef} />);\r\n\t}\r\n}\r\n```\r\n\r\nAs part of its render cycle, our configuration of ProseMirror ends up calling:\r\n\r\n```javascript\r\nReactDOM.render(<CrucialSubComponent />, someDivManagedByProseMirror);\r\n```\r\n\r\nto render an isolated child node of `<ProseMirror />`, and wants to be able to immediately afterwards be able to leverage:\r\n\r\n```javascript\r\nthis.el.querySelector('.my-subcomponent')\r\n```\r\n\r\n...but this piece of the DOM is no longer available synchronously, and it looks like this is because of the re-entrancy change that came about in React 16. Portals don't work for us, because the site where the `ReactDOM.render` is being called isn't itself directly part of the root React tree (this is [clearer to observe in the fiddle](https://jsfiddle.net/e5hbzc1r/14/)). The hierarchy is something like `<ProseMirror /> ---> (opaque ProseMirror rendering code) --> <CrucialSubComponent />`. Is there a way to skip these re-entrancy checks in these cases where there's an isolated React render happening in a grandchild of a component, but where the React tree isn't the immediate parent?\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nQuerying the DOM immediately after ReactDOM.render worked in versions prior to React 16. We're excited about the async possibilities for our main React tree, but curious if there are workarounds where we can ignore the reentrancy checks for these isolated renders.",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/12231",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/12231/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/12231/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/12231/events",
        "html_url": "https://github.com/facebook/react/issues/12231",
        "id": 297415610,
        "number": 12231,
        "title": "Using ReactPortal with a newly opened window",
        "user": {
            "login": "Pjata",
            "id": 888976,
            "avatar_url": "https://avatars1.githubusercontent.com/u/888976?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Pjata",
            "html_url": "https://github.com/Pjata",
            "followers_url": "https://api.github.com/users/Pjata/followers",
            "following_url": "https://api.github.com/users/Pjata/following{/other_user}",
            "gists_url": "https://api.github.com/users/Pjata/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Pjata/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Pjata/subscriptions",
            "organizations_url": "https://api.github.com/users/Pjata/orgs",
            "repos_url": "https://api.github.com/users/Pjata/repos",
            "events_url": "https://api.github.com/users/Pjata/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Pjata/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2018-02-15T11:39:14Z",
        "updated_at": "2018-02-15T11:39:57Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nbug\r\n**What is the current behavior?**\r\nThere is no interactivity with an highly used React component (ReactTable) in a newly opened window injected via React Portal.\r\nCode based on [this article](https://hackernoon.com/using-a-react-16-portal-to-do-something-cool-2a2d627b0202)\r\nhttps://codesandbox.io/s/84035j8168\r\n\r\n1. Click the open button\r\n2. Table opens in a new window.\r\n3. No interactivity\r\n\r\n**What is the expected behavior?**\r\nThe component should work as in \"docked mode\".\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n16.2.0, Chrome\r\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/12232",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/12232/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/12232/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/12232/events",
        "html_url": "https://github.com/facebook/react/issues/12232",
        "id": 297500223,
        "number": 12232,
        "title": "There should be a way to hint hydration on how to reuse DOM nodes.",
        "user": {
            "login": "oalexandersson",
            "id": 1852095,
            "avatar_url": "https://avatars1.githubusercontent.com/u/1852095?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/oalexandersson",
            "html_url": "https://github.com/oalexandersson",
            "followers_url": "https://api.github.com/users/oalexandersson/followers",
            "following_url": "https://api.github.com/users/oalexandersson/following{/other_user}",
            "gists_url": "https://api.github.com/users/oalexandersson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/oalexandersson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/oalexandersson/subscriptions",
            "organizations_url": "https://api.github.com/users/oalexandersson/orgs",
            "repos_url": "https://api.github.com/users/oalexandersson/repos",
            "events_url": "https://api.github.com/users/oalexandersson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/oalexandersson/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2018-02-15T16:03:07Z",
        "updated_at": "2018-02-15T16:03:07Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nFeature Request (since the current, in my opinion rather weird, behaviour is WAI).\r\n\r\n**What is the current behavior?**\r\nhttps://github.com/oalexandersson/react-16-server-client-diff\r\n\r\nIf I render additional DOM on the client, when hydrating, it works partially, but my new DOM nodes get confused with the ones rendered by the server even though they are an obvious addition. Server rendered elements get reused with css classes and all. I would argue that this behavior would be acceptable if the component's state matched with the server-side state, but in my example above I use a state change in componentWillMount to drive the diff.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n1. Clone https://github.com/oalexandersson/react-16-server-client-diff\r\n2. Run `yarn start` or `npm start`\r\n\r\n**What is the expected behavior?**\r\nIf the current behavior is truly what was intended, I would like a way to explicitly hint React on how to hydrate specific nodes. My suggestion is that if nodes have a `key` property, reuse only if its value matches, similar to how React knows how to handle changes in arrays. I have very limited knowledge about how the hydration works (maybe that shows), but afaik this would have virtually no performance impact, and still allow for the client to do pure additions to the DOM.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nUsing React 16.2. Well, yes, it worked in React 15 :)\r\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/12233",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/12233/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/12233/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/12233/events",
        "html_url": "https://github.com/facebook/react/issues/12233",
        "id": 297543236,
        "number": 12233,
        "title": "Ordering of componentWillMount/Unmount in React 16",
        "user": {
            "login": "liuhelen10",
            "id": 4095479,
            "avatar_url": "https://avatars0.githubusercontent.com/u/4095479?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/liuhelen10",
            "html_url": "https://github.com/liuhelen10",
            "followers_url": "https://api.github.com/users/liuhelen10/followers",
            "following_url": "https://api.github.com/users/liuhelen10/following{/other_user}",
            "gists_url": "https://api.github.com/users/liuhelen10/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/liuhelen10/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/liuhelen10/subscriptions",
            "organizations_url": "https://api.github.com/users/liuhelen10/orgs",
            "repos_url": "https://api.github.com/users/liuhelen10/repos",
            "events_url": "https://api.github.com/users/liuhelen10/events{/privacy}",
            "received_events_url": "https://api.github.com/users/liuhelen10/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 739761016,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Reconciler",
                "name": "Component: Reconciler",
                "color": "f9a798",
                "default": false
            },
            {
                "id": 710375792,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
                "name": "Type: Discussion",
                "color": "fef2c0",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 7,
        "created_at": "2018-02-15T18:07:04Z",
        "updated_at": "2018-02-17T22:53:19Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "### Problem\r\nIt seems that the ordering of `componentWillMount` and `componentWillUnmount` is no longer guaranteed in React 16 due to support for async `componentWillUnmount`. \r\n\r\nPreviously, `componentWillUnmount` was always called on old components being removed *before* `componentWillMount` was called on new components.\r\n\r\n### Example\r\nWe have a Form component in which inputs \"register\" themselves with the parent Form in `componentWillMount` and deregister themselves in `componentWillUnmount` (this allows the Form to keep track of global state for all of the inputs). The following scenario will cause the Form to throw an error now that ordering is no longer guaranteed:\r\n\r\n```jsx\r\n{ showTextInput ? <TextInput name=\"a\" /> : <CheckboxInput name=\"a\" /> }\r\n```\r\n\r\nIn this scenario, it's possible that the Form will try to register an input with the same name before the previous input has been unmounted, which is not allowed.\r\n\r\n### Question\r\nWhile I understand the reasoning behind this change, I'm wondering what the suggested solution is if our code previously relied on `componentWillUnmount` firing before `componentWillMount`? \r\n\r\nThe most obvious solution that comes to mind is moving the `registerInput` step from `willMount` into `didMount`. However, this means we'll have to deal with an unnecessary re-render upon mounting the input. Is this still the correct approach?",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/12234",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/12234/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/12234/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/12234/events",
        "html_url": "https://github.com/facebook/react/issues/12234",
        "id": 297640020,
        "number": 12234,
        "title": "Context Transform",
        "user": {
            "login": "sebmarkbage",
            "id": 63648,
            "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sebmarkbage",
            "html_url": "https://github.com/sebmarkbage",
            "followers_url": "https://api.github.com/users/sebmarkbage/followers",
            "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
            "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
            "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
            "repos_url": "https://api.github.com/users/sebmarkbage/repos",
            "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 121709921,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 7,
        "created_at": "2018-02-15T23:59:23Z",
        "updated_at": "2018-02-17T19:27:58Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "With the new context API it is really bulky to create a middle man that consumes one context value, transforms it and provides another one. You have to create many components and store an intermediate state to avoid rerendering the provider if the input is unchanged.\r\n\r\nWe could have a convenience API for this use case.\r\n\r\n```js\r\nfunction transform(inputValue) {\r\n  return [...inputValue, extraData];\r\n}\r\n\r\n<Context.Middleware transform={transform}>{children}</Context.Middleware>\r\n```\r\n\r\ncc @acdlite ",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/12235",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/12235/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/12235/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/12235/events",
        "html_url": "https://github.com/facebook/react/issues/12235",
        "id": 297641027,
        "number": 12235,
        "title": "Extracting a Context Stack",
        "user": {
            "login": "sebmarkbage",
            "id": 63648,
            "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sebmarkbage",
            "html_url": "https://github.com/sebmarkbage",
            "followers_url": "https://api.github.com/users/sebmarkbage/followers",
            "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
            "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
            "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
            "repos_url": "https://api.github.com/users/sebmarkbage/repos",
            "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 121709921,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 6,
        "created_at": "2018-02-16T00:04:58Z",
        "updated_at": "2018-03-09T17:53:27Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "A useful feature of context is creating a custom stack of things to see what your component is embedded in side.\r\n\r\nI think the primary use case is logging explicitly.\r\n\r\nCurrently that is pretty expensive to maintain just *in case* you need it. See #12234 as an example.\r\n\r\nWe could provide an API that lazily extracts a whole path of contexts from the tree.\r\n\r\n```js\r\n<FooContext.Provider value={\"foo\"}>\r\n  <FooContext.Provider value={\"bar\"}>\r\n    <FooContext.Provider value={\"baz\"}>\r\n      <App />\r\n    </FooContext.Provider>\r\n  </FooContext.Provider>\r\n</FooContext.Provider>\r\n```\r\n\r\n```js\r\nclass App extends React.Component {\r\n  log() {\r\n    var stack = this.getContextStack(FooContext);\r\n    logToServer(stack); // [\"foo\", \"bar\", \"baz\"]\r\n  }\r\n  render() {\r\n    return <div onClick={this.log} />;\r\n  }\r\n}\r\n```\r\n\r\nIt would basically synchronously rerender the shortest path to recreate the context at the time of the call to create the stack lazily.\r\n\r\ncc @acdlite ",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/12247",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/12247/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/12247/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/12247/events",
        "html_url": "https://github.com/facebook/react/issues/12247",
        "id": 298217188,
        "number": 12247,
        "title": "Support for changing a Portal's container without remounting children?",
        "user": {
            "login": "danielran",
            "id": 8035790,
            "avatar_url": "https://avatars1.githubusercontent.com/u/8035790?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/danielran",
            "html_url": "https://github.com/danielran",
            "followers_url": "https://api.github.com/users/danielran/followers",
            "following_url": "https://api.github.com/users/danielran/following{/other_user}",
            "gists_url": "https://api.github.com/users/danielran/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/danielran/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/danielran/subscriptions",
            "organizations_url": "https://api.github.com/users/danielran/orgs",
            "repos_url": "https://api.github.com/users/danielran/repos",
            "events_url": "https://api.github.com/users/danielran/events{/privacy}",
            "received_events_url": "https://api.github.com/users/danielran/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 8,
        "created_at": "2018-02-19T09:59:43Z",
        "updated_at": "2018-03-28T11:49:50Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "(This is related to https://github.com/facebook/react/issues/3965.)\r\n\r\nI'm working on a project with a lot of globally unique component instances. (In other words, their `key`s are essentially database IDs.) It also has DnD functionality. For reordering, everything is fine, but moving an instance from one parent to another causes a complete re-render of the instance.\r\n\r\nInstead of moving the nodes around myself, I was thinking of using Portals. Each instance has a prop for which element ID they should render inside. Then, to reparent them, it'd be a simple case of passing a different element ID. (I'm using Redux, so it'd just be a `string` in the state.)\r\n\r\nHowever, changing a Portal's container node also causes a complete re-render of everything passed to `ReactDOM.createPortal`. (See this [CodePen](https://codepen.io/anon/pen/PQQKRP).)\r\n\r\nWould it be possible to skip this re-rendering and effectively move the Portal contents instead?",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/12251",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/12251/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/12251/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/12251/events",
        "html_url": "https://github.com/facebook/react/issues/12251",
        "id": 298473452,
        "number": 12251,
        "title": "Does react still require non-toplevel submit handler?",
        "user": {
            "login": "Ailrun",
            "id": 12473268,
            "avatar_url": "https://avatars3.githubusercontent.com/u/12473268?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Ailrun",
            "html_url": "https://github.com/Ailrun",
            "followers_url": "https://api.github.com/users/Ailrun/followers",
            "following_url": "https://api.github.com/users/Ailrun/following{/other_user}",
            "gists_url": "https://api.github.com/users/Ailrun/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Ailrun/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Ailrun/subscriptions",
            "organizations_url": "https://api.github.com/users/Ailrun/orgs",
            "repos_url": "https://api.github.com/users/Ailrun/repos",
            "events_url": "https://api.github.com/users/Ailrun/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Ailrun/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 620368407,
                "url": "https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information",
                "name": "Resolution: Needs More Information",
                "color": "fffde7",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 3,
        "created_at": "2018-02-20T05:09:50Z",
        "updated_at": "2018-02-24T04:01:29Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nbug? Maybe.\r\n\r\n**What is the current behavior?**\r\n\r\nUsing non-delegated handler for submit event.\r\n\r\n**What is the expected behavior?**\r\n\r\nAfter IE9, at least I know, submit event bubbled up.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n16.2.0",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/12268",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/12268/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/12268/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/12268/events",
        "html_url": "https://github.com/facebook/react/issues/12268",
        "id": 299498173,
        "number": 12268,
        "title": "Checkboxes handling going wrong",
        "user": {
            "login": "varunrajasekhar",
            "id": 18426078,
            "avatar_url": "https://avatars0.githubusercontent.com/u/18426078?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/varunrajasekhar",
            "html_url": "https://github.com/varunrajasekhar",
            "followers_url": "https://api.github.com/users/varunrajasekhar/followers",
            "following_url": "https://api.github.com/users/varunrajasekhar/following{/other_user}",
            "gists_url": "https://api.github.com/users/varunrajasekhar/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/varunrajasekhar/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/varunrajasekhar/subscriptions",
            "organizations_url": "https://api.github.com/users/varunrajasekhar/orgs",
            "repos_url": "https://api.github.com/users/varunrajasekhar/repos",
            "events_url": "https://api.github.com/users/varunrajasekhar/events{/privacy}",
            "received_events_url": "https://api.github.com/users/varunrajasekhar/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2018-02-22T20:32:49Z",
        "updated_at": "2018-02-22T20:32:49Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "I am having a weird issue:\r\nI have a button called assign and when I click on it, a modal with userslist(checkboxes) opens\r\nThis modal has a confirm and cancel button. THe buttons functionality should be such as\r\nWhen I click on confirm, the checked or unchecked data(no matter what selection is made) should save and when I click on cancel any data should revert back to confirmed(saved) data.\r\nI have built my component such that when loading initially, I am copying the state and then the 'copystate' changes are saved to original state when confirmed and when cancelled, original state changes are copied to 'copystate'.\r\nBut what is happening is the state is getting updated no matter what change I make in the copystate. and the copystate and original state are having the same data.\r\n\r\nCan somebody help me with this:\r\nBelow is my render method:\r\n\r\n```\r\nrender() {\r\n    const ready = this.state.ready;\r\n    return (\r\n      <div>\r\n        {ready &&\r\n          this.state.data.addOnProducts.map((val, idx) => {\r\n            const userListIndex = val.indexOf()\r\n            return (\r\n              <div key={idx}>\r\n                <button className={`btn btn--rounded btn--assign`} onClick={() => this.openModal(idx)}>\r\n                  {'assign'}\r\n                </button>\r\n                {this.state.showModal && (\r\n                  <CheckboxList\r\n                    key={idx}\r\n                    list={this.state.newData.addOnProducts[this.state.currentAddOnIndex].usersData.usersList}\r\n                    selectHandler={this.assignHandler}\r\n                    //label={this.state.newData.addOnProducts[this.state.currentAddOnIndex].usersData.usersList}\r\n                  />\r\n                )}\r\n              </div>\r\n            );\r\n          })}\r\n      </div>\r\n    );\r\n  }\r\n```\r\n\r\nBelow is my assign handler:\r\n\r\n```\r\nassignHandler(idx) {\r\n    const newData = Object.assign({}, this.state.newData);\r\n    console.log('state list',this.state.newData.addOnProducts[this.state.currentAddOnIndex].usersData.usersList);\r\n    console.log('newData list',this.state.newData.addOnProducts[this.state.currentAddOnIndex].usersData.usersList);\r\n    newData.addOnProducts[this.state.currentAddOnIndex].usersData.usersList.map((user, index) => {\r\n      if (index === idx) {\r\n        user.selected = !user.selected;\r\n      }\r\n     return user;\r\n    });\r\n    this.setState(\r\n    {\r\n      newData: Object.assign({}, newData)\r\n    }, function() {\r\n      console.log('state list',this.state.data.addOnProducts[this.state.currentAddOnIndex].usersData.usersList);\r\n      console.log('newData list',this.state.newData.addOnProducts[this.state.currentAddOnIndex].usersData.usersList);\r\n    });\r\n  };\r\n```\r\nThis is Cancel Method:\r\n\r\n```\r\n cancelAssignUsers() {\r\n        const stateUsersList = Object.assign({}, this.state.data.addOnProducts[this.state.currentAddOnIndex].usersData);\r\n        const newDataCopy = Object.assign({}, this.state.newData);\r\n    console.log(stateUsersList.usersList);\r\n        newDataCopy.addOnProducts[this.state.currentAddOnIndex].usersData.usersList = stateUsersList.usersList;\r\n    console.log(newDataCopy.addOnProducts[this.state.currentAddOnIndex].usersData.usersList);\r\n        this.setState({\r\n          showModal: false,\r\n          newData: Object.assign({}, newDataCopy)\r\n        });\r\n  }\r\n```\r\n\r\nthis is my confirm method:\r\n```\r\nconfirmAssignUsers() {\r\n    const newDataUsersList = Object.assign(\r\n      {},\r\n      this.state.newData.addOnProducts[this.state.currentAddOnIndex].usersData\r\n    );\r\n    const stateCopy = Object.assign({}, this.state.data);\r\n    stateCopy.addOnProducts[this.state.currentAddOnIndex].usersData.usersList = newDataUsersList.usersList;\r\nconsole.log(stateCopy.addOnProducts[this.state.currentAddOnIndex].usersData.usersList);\r\n    this.setState({\r\n      showModal: false,\r\n      data: Object.assign({}, stateCopy)\r\n    });\r\n  }\r\n```",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/12284",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/12284/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/12284/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/12284/events",
        "html_url": "https://github.com/facebook/react/issues/12284",
        "id": 299992422,
        "number": 12284,
        "title": "scripts/jest/matchers/toWarnDev: \"Unexpected warning recorded: null\" when there's no null, caused by jest-diff returning null",
        "user": {
            "login": "sompylasar",
            "id": 498274,
            "avatar_url": "https://avatars2.githubusercontent.com/u/498274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sompylasar",
            "html_url": "https://github.com/sompylasar",
            "followers_url": "https://api.github.com/users/sompylasar/followers",
            "following_url": "https://api.github.com/users/sompylasar/following{/other_user}",
            "gists_url": "https://api.github.com/users/sompylasar/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sompylasar/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sompylasar/subscriptions",
            "organizations_url": "https://api.github.com/users/sompylasar/orgs",
            "repos_url": "https://api.github.com/users/sompylasar/repos",
            "events_url": "https://api.github.com/users/sompylasar/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sompylasar/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2018-02-25T02:55:02Z",
        "updated_at": "2018-02-25T02:55:02Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nbug\r\n\r\n**What is the current behavior?**\r\n\r\nExample:\r\n```js\r\n      // getTestDocument() has an extra <meta> that we didn't render.\r\n      expect(() =>\r\n        ReactDOM.hydrate(<Component text=\"Hello world\" />, testDocument),\r\n      ).toWarnDev('Did not expect server HTML to contain a <meta> in <head>.');\r\n```\r\n\r\nIf the actual warning is multiline:\r\n```\r\n\"Warning: Did not expect server HTML to contain a <meta charset=\"utf-8\"> in <head>.\r\n    in title (at **)\r\n    in head (at **)\r\n    in html (at **)\r\n    in Component (at **)\"\r\n```\r\n\r\nThe output message received from the `toWarnDev` matcher is confusing:\r\n```\r\n  \u25cf rendering React components at document \u203a with new explicit hydration API \u203a should render w/ no markup to full document\r\n\r\n    Error: Unexpected warning recorded: null\r\n\r\n      60 |         // We don't throw an Error here though,\r\n      61 |         // Because it might be suppressed by ReactFiberScheduler.\r\n    > 62 |         unexpectedWarnings.push(new Error(errorMessage));\r\n      63 |       };\r\n      64 | \r\n      65 |       // TODO Decide whether we need to support nested toWarn* expectations.\r\n      \r\n      at CustomConsole.consoleSpy (scripts/jest/matchers/toWarnDev.js:62:35)\r\n      at printWarning (node_modules/fbjs/lib/warning.js:33:15)\r\n      at warning (node_modules/fbjs/lib/warning.js:57:20)\r\n      at warnForDeletedHydratableElement (packages/react-dom/src/client/ReactDOMFiberComponent.js:1424:473)\r\n      at didNotHydrateInstance (packages/react-dom/src/client/ReactDOM.js:938:11)\r\n      at deleteHydratableInstance (packages/react-reconciler/src/ReactFiberHydrationContext.js:106:11)\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\nExpected `toWarnDev` to at least show the original and the expected messages without a fancy `jest-diff`, but not `null`.\r\n\r\nUpstream bug in `jest-diff`: https://github.com/facebook/jest/issues/5657\r\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/12285",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/12285/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/12285/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/12285/events",
        "html_url": "https://github.com/facebook/react/issues/12285",
        "id": 300000088,
        "number": 12285,
        "title": "scripts/jest/matchers/toWarnDev: Expected and actual arguments to `jest-diff` are mixed up.",
        "user": {
            "login": "sompylasar",
            "id": 498274,
            "avatar_url": "https://avatars2.githubusercontent.com/u/498274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sompylasar",
            "html_url": "https://github.com/sompylasar",
            "followers_url": "https://api.github.com/users/sompylasar/followers",
            "following_url": "https://api.github.com/users/sompylasar/following{/other_user}",
            "gists_url": "https://api.github.com/users/sompylasar/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sompylasar/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sompylasar/subscriptions",
            "organizations_url": "https://api.github.com/users/sompylasar/orgs",
            "repos_url": "https://api.github.com/users/sompylasar/repos",
            "events_url": "https://api.github.com/users/sompylasar/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sompylasar/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2018-02-25T05:29:36Z",
        "updated_at": "2018-02-25T05:29:36Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nbug\r\n\r\n**What is the current behavior?**\r\n\r\n`toWarnDev` calls `jestDiff(a, b)` as `jestDiff(normalizedMessage, expectedMessages[0])` and `jestDiff([normalizedMessage], expectedMessages)`:\r\nhttps://github.com/facebook/react/blob/94518b068bf52196abea0c83f4c9926bfe2065c6/scripts/jest/matchers/toWarnDev.js#L49-L57\r\n\r\n[`jestDiff(a, b)`](https://github.com/facebook/jest/blob/457776b2889a9be1ce8a2c636a23417264a98d99/packages/jest-diff/src/index.js#L54) [calls](https://github.com/facebook/jest/blob/457776b2889a9be1ce8a2c636a23417264a98d99/packages/jest-diff/src/index.js#L93) [`diffStrings(a, b)`](https://github.com/facebook/jest/blob/457776b2889a9be1ce8a2c636a23417264a98d99/packages/jest-diff/src/diff_strings.js#L249-L251) where by default `a` is annotated as `'Expected'` (green), `b` as `'Received'` (red).\r\n\r\nhttps://github.com/facebook/jest/blob/457776b2889a9be1ce8a2c636a23417264a98d99/packages/jest-diff/src/diff_strings.js#L86-L90\r\n```js\r\nconst getAnnotation = (options: ?DiffOptions): string =>\r\n  chalk.green('- ' + ((options && options.aAnnotation) || 'Expected')) +\r\n  '\\n' +\r\n  chalk.red('+ ' + ((options && options.bAnnotation) || 'Received')) +\r\n  '\\n\\n';\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\n`toWarnDev` should pass the expected values into `a`, the actual (received) values into `b` of `jestDiff`:\r\n```js\r\njestDiff(expectedMessages[0], normalizedMessage)\r\n```\r\n```js\r\njestDiff(expectedMessages, [normalizedMessage])\r\n```",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/12297",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/12297/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/12297/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/12297/events",
        "html_url": "https://github.com/facebook/react/issues/12297",
        "id": 300466987,
        "number": 12297,
        "title": "Errors thrown at componentUnmount aren't reported at proper timings.",
        "user": {
            "login": "karak",
            "id": 156341,
            "avatar_url": "https://avatars2.githubusercontent.com/u/156341?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/karak",
            "html_url": "https://github.com/karak",
            "followers_url": "https://api.github.com/users/karak/followers",
            "following_url": "https://api.github.com/users/karak/following{/other_user}",
            "gists_url": "https://api.github.com/users/karak/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/karak/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/karak/subscriptions",
            "organizations_url": "https://api.github.com/users/karak/orgs",
            "repos_url": "https://api.github.com/users/karak/repos",
            "events_url": "https://api.github.com/users/karak/events{/privacy}",
            "received_events_url": "https://api.github.com/users/karak/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2018-02-27T02:06:06Z",
        "updated_at": "2018-03-05T00:13:22Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug, at least in QA respect.\r\n\r\n**What is the current behavior?**\r\n\r\nI'm creating a test-case to handle an error thrown at `componentUnmount`, which is reported  asynchronously since react v16.\r\nBut such errors are reported _only_ at the last test cases in a bunch, which virtually lacks reproducibility to rely on.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nPlease clone [this repository](https://github.com/karak/react-unmount-issue) and execute `yarn test`.\r\n\r\n**What is the expected behavior?**\r\n\r\n1. To report those errors at every test case.\r\n1. To provide a proper way to handle them, especially for testing (already exists?).\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact 16.2.0\r\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/12309",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/12309/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/12309/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/12309/events",
        "html_url": "https://github.com/facebook/react/issues/12309",
        "id": 301085867,
        "number": 12309,
        "title": "Expose the `onSelect` event for any focusable element?",
        "user": {
            "login": "danburzo",
            "id": 205375,
            "avatar_url": "https://avatars3.githubusercontent.com/u/205375?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/danburzo",
            "html_url": "https://github.com/danburzo",
            "followers_url": "https://api.github.com/users/danburzo/followers",
            "following_url": "https://api.github.com/users/danburzo/following{/other_user}",
            "gists_url": "https://api.github.com/users/danburzo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/danburzo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/danburzo/subscriptions",
            "organizations_url": "https://api.github.com/users/danburzo/orgs",
            "repos_url": "https://api.github.com/users/danburzo/repos",
            "events_url": "https://api.github.com/users/danburzo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/danburzo/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2018-02-28T16:13:56Z",
        "updated_at": "2018-02-28T16:13:56Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "I was curious earlier if the `onSelect` event works on things other than form elements and `contentEditable` elements, and by disabling a couple of conditions in the code, it seems \u2014 at first brush, at least \u2014 that `onSelect` works splendidly on any element that is focusable (via the `tabIndex` attribute), to obtain things like:\r\n\r\n![ezgif-2-326cf42421](https://user-images.githubusercontent.com/205375/36798178-8aa7fdda-1cb2-11e8-8838-46e04300a09a.gif)\r\n\r\nWould there be any problem with relaxing the conditions for allowing `onSelect` to include elements that have a `tabIndex` attribute? (Other than the case where existing implementations in userland rely on the event being disabled when `contenteditable = true` is removed from an element).",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/12310",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/12310/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/12310/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/12310/events",
        "html_url": "https://github.com/facebook/react/issues/12310",
        "id": 301109892,
        "number": 12310,
        "title": "getDerivedStateFromProps and MobX",
        "user": {
            "login": "bradenhs",
            "id": 22484684,
            "avatar_url": "https://avatars1.githubusercontent.com/u/22484684?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bradenhs",
            "html_url": "https://github.com/bradenhs",
            "followers_url": "https://api.github.com/users/bradenhs/followers",
            "following_url": "https://api.github.com/users/bradenhs/following{/other_user}",
            "gists_url": "https://api.github.com/users/bradenhs/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bradenhs/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bradenhs/subscriptions",
            "organizations_url": "https://api.github.com/users/bradenhs/orgs",
            "repos_url": "https://api.github.com/users/bradenhs/repos",
            "events_url": "https://api.github.com/users/bradenhs/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bradenhs/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 19,
        "created_at": "2018-02-28T17:17:48Z",
        "updated_at": "2018-03-23T12:17:06Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "I use MobX to manage the application state of react apps I build and ever since I read this [post](https://blog.cloudboost.io/3-reasons-why-i-stopped-using-react-setstate-ab73fc67a42e) I've been using MobX to manage local component state as well. I recently read that React 16.3 will introduce a new static method called `getDerivedStateFromProps` and that some future release will deprecate `componentWillReceiveProps`. I'm worried that deprecating `componentWillReceiveProps` will break some of my components which need to update their state in response to a change in props. **This, of course, wouldn't be an issue except for the fact that `getDerivedStateFromProps` appears to be incompatible with local component state managed by MobX.** One of the things I love about React is that it is so easy to integrate with other tools. The new `getDerivedStateFromProps` static method will reduce some of this flexibility.\r\n\r\nFor those of you who haven't used MobX before the issue here may be a little hard to grasp at first. I've built an example [repo](https://github.com/bradenhs/getDerivedStateFromProps-mobx) where you can see both a MobX and React setState implementation of a component which needs to update it's local state in response to a props change. Take a look at the example, but in brief the core of the issue is that `getDerivedStateFromProps` is a static method and mobx state on the component _instance_ can't be accessed and updated in a static method. `componentWillReceiveProps` is generic enough that updating mobx component state in there is possible in a semantically sound manner. Once it's deprecated, however, I don't know how this will be possible in a non-hacky way.\r\n\r\nI realize I may be a little late with this concern since it appears React 16.3 will be released anytime now. I do, however, think the concern is worth raising since this new change in React will break what is in my view a valid use of React. I'd prefer if another solution was devised which was more flexible for people using React with other tools.\r\n\r\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/12331",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/12331/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/12331/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/12331/events",
        "html_url": "https://github.com/facebook/react/issues/12331",
        "id": 302508499,
        "number": 12331,
        "title": "Production reconciler Instrumentation",
        "user": {
            "login": "nevir",
            "id": 41373,
            "avatar_url": "https://avatars1.githubusercontent.com/u/41373?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nevir",
            "html_url": "https://github.com/nevir",
            "followers_url": "https://api.github.com/users/nevir/followers",
            "following_url": "https://api.github.com/users/nevir/following{/other_user}",
            "gists_url": "https://api.github.com/users/nevir/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nevir/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nevir/subscriptions",
            "organizations_url": "https://api.github.com/users/nevir/orgs",
            "repos_url": "https://api.github.com/users/nevir/repos",
            "events_url": "https://api.github.com/users/nevir/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nevir/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 710573595,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
                "name": "Component: Developer Tools",
                "color": "fbca04",
                "default": false
            },
            {
                "id": 121709921,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2018-03-05T23:44:49Z",
        "updated_at": "2018-03-27T22:36:40Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "_Apologies if this is documented somewhere, but I was unable to find anything related after a pretty exhaustive search of docs + code._\r\n\r\nAre there any production instrumentation hooks for the reconciler?  Specifically, I'm looking for callbacks/events that would allow me to track overall reconciliation time spans (nothing more granular).  E.g. equivalent to the `(React Tree Reconciliation)` span.\r\n\r\nAs best I can tell, there are `performance.timings` spans reported as of Fiber (and `ReactPerf` prior), but those are only enabled in development mode.",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/12334",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/12334/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/12334/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/12334/events",
        "html_url": "https://github.com/facebook/react/issues/12334",
        "id": 302645565,
        "number": 12334,
        "title": "For Controlled Input, step does not work as expected unless initialized with null or \"\".",
        "user": {
            "login": "andyboyne",
            "id": 3295544,
            "avatar_url": "https://avatars1.githubusercontent.com/u/3295544?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/andyboyne",
            "html_url": "https://github.com/andyboyne",
            "followers_url": "https://api.github.com/users/andyboyne/followers",
            "following_url": "https://api.github.com/users/andyboyne/following{/other_user}",
            "gists_url": "https://api.github.com/users/andyboyne/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/andyboyne/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/andyboyne/subscriptions",
            "organizations_url": "https://api.github.com/users/andyboyne/orgs",
            "repos_url": "https://api.github.com/users/andyboyne/repos",
            "events_url": "https://api.github.com/users/andyboyne/events{/privacy}",
            "received_events_url": "https://api.github.com/users/andyboyne/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 40929151,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
                "name": "Type: Bug",
                "color": "b60205",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 4,
        "created_at": "2018-03-06T10:30:40Z",
        "updated_at": "2018-03-27T23:17:24Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "*BUG*\r\n\r\n**What is the current behavior?**\r\nFor input type=\"number\", step does not work as expected if there is an initial value set. Step only seems to get honored if the initial value is \"\" or null.\r\n\r\nExample:\r\nhttps://codepen.io/anon/pen/MQMBmX\r\n\r\nThe example uses a controlled input binding value and step. Step is 1/10th of the value. If you edit the value in the textbox to 50000 and increment using the stepper, it will increment to 50100 (i.e. by the initial value and not by the current step).\r\n\r\nEdit the code so initial value is \"\" or null. Edit textbox to 50000 and step up - value goes to 55000 as expected.\r\n\r\n**What is the expected behavior?**\r\nIt should be possible to render a number input that honors step without having to initialize the input component value to null or \"\" first.\r\n\r\nIt seems when there is an initial value provided, it will write a value attribute into the DOM (e.g. value=\"100\").  When initial value is \"\" or null then just the value attribute is written to DOM with no assignment. e.g. (value).\r\n\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n16.3.0-alpha.1  (ported to this version to confirm if still an issue)\r\n0.14.7 (originally found in this version)\r\n\r\nSeems to affect Chrome only (confirmed windows and mac, versions 59 and 64). Bug does not appear in Safari (on a mac at least).",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/12355",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/12355/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/12355/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/12355/events",
        "html_url": "https://github.com/facebook/react/issues/12355",
        "id": 304428409,
        "number": 12355,
        "title": "Possible bug in ReactDOM.createPortal when used in a new window",
        "user": {
            "login": "Drarok",
            "id": 55830,
            "avatar_url": "https://avatars0.githubusercontent.com/u/55830?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Drarok",
            "html_url": "https://github.com/Drarok",
            "followers_url": "https://api.github.com/users/Drarok/followers",
            "following_url": "https://api.github.com/users/Drarok/following{/other_user}",
            "gists_url": "https://api.github.com/users/Drarok/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Drarok/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Drarok/subscriptions",
            "organizations_url": "https://api.github.com/users/Drarok/orgs",
            "repos_url": "https://api.github.com/users/Drarok/repos",
            "events_url": "https://api.github.com/users/Drarok/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Drarok/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2018-03-12T15:48:05Z",
        "updated_at": "2018-03-13T16:17:26Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nA bug.\r\n\r\n**What is the current behavior?**\r\n\r\nWhen a `ReactDOM.createPortal` is used in conjunction with a container in another window, the components do not respond to user input until after `setState` or `forceUpdate` are called on the _parent_ component of the portal.\r\n\r\nI've produced a [CodePen demonstrating the issue](https://codepen.io/anon/pen/yKYYzB).\r\n\r\n1. Click \"Open a Portal\" \u2013 a new window appears with a pair of buttons.\r\n2. Click either button in the new window \u2013 nothing happens.\r\n3. Click the \"Hack\" button in the parent window (which simply calls `setState({})` on the parent).\r\n4. Note that the buttons in the new window now work as expected.\r\n\r\n**What is the expected behavior?**\r\n\r\nI expect the components in the new window to be interactive.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact 16.2.0\r\nReactDOM 16.2.0\r\n\r\nI've tested this in Safari and Chrome on Mac.",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/12360",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/12360/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/12360/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/12360/events",
        "html_url": "https://github.com/facebook/react/issues/12360",
        "id": 304624078,
        "number": 12360,
        "title": "addEventListener not working properly in componentDidUpdate",
        "user": {
            "login": "benwiley4000",
            "id": 13558253,
            "avatar_url": "https://avatars2.githubusercontent.com/u/13558253?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benwiley4000",
            "html_url": "https://github.com/benwiley4000",
            "followers_url": "https://api.github.com/users/benwiley4000/followers",
            "following_url": "https://api.github.com/users/benwiley4000/following{/other_user}",
            "gists_url": "https://api.github.com/users/benwiley4000/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benwiley4000/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benwiley4000/subscriptions",
            "organizations_url": "https://api.github.com/users/benwiley4000/orgs",
            "repos_url": "https://api.github.com/users/benwiley4000/repos",
            "events_url": "https://api.github.com/users/benwiley4000/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benwiley4000/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 620368407,
                "url": "https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information",
                "name": "Resolution: Needs More Information",
                "color": "fffde7",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 5,
        "created_at": "2018-03-13T04:27:21Z",
        "updated_at": "2018-04-04T18:33:17Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug!\r\n\r\n**What is the current behavior?**\r\nWhen I update event listeners by removing old listeners and adding new ones on an element obtained by React ref in `componentDidUpdate` (React 16.3 alpha), my handlers don't register properly. If I take out the part where I remove listeners, or put the whole thing inside a `setTimeout`, it works fine. **This worked fine when I was doing it in componentWillReceiveProps but I moved this part to componentDidUpdate for React 16.3.**\r\n\r\nMy code is kind of like:\r\n```jsx\r\n// does NOT work\r\ncomponentDidUpdate(prevProps) {\r\n  for (const eventType in prevProps.eventHandlers) {\r\n    this.audio.removeEventListener(eventType, prevProps.eventHandlers[eventType]);\r\n  }\r\n  for (const eventType in this.props.eventHandlers) {\r\n    this.audio.addEventListener(eventType, this.props.eventHandlers[eventType]);\r\n  }\r\n  // ...\r\n}\r\n\r\n// DOES work!\r\ncomponentDidUpdate(prevProps) {\r\n  // for (const eventType in prevProps.eventHandlers) {\r\n  //   this.audio.removeEventListener(eventType, prevProps.eventHandlers[eventType]);\r\n  // }\r\n  for (const eventType in this.props.eventHandlers) {\r\n    this.audio.addEventListener(eventType, this.props.eventHandlers[eventType]);\r\n  }\r\n  // ...\r\n}\r\n\r\n// DOES work!\r\ncomponentDidUpdate(prevProps) {\r\n  setTimeout(() => {\r\n    for (const eventType in prevProps.eventHandlers) {\r\n      this.audio.removeEventListener(eventType, prevProps.eventHandlers[eventType]);\r\n    }\r\n    for (const eventType in this.props.eventHandlers) {\r\n      this.audio.addEventListener(eventType, this.props.eventHandlers[eventType]);\r\n    }\r\n  });\r\n  // ...\r\n}\r\n\r\nrender() {\r\n  return <audio ref={a => this.audio = a} />;\r\n}\r\n```\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nUnfortunately I can't reproduce in a simple example but you can check out and build the [`next`](https://github.com/benwiley4000/react-responsive-audio-player/tree/7235ba9908bbd493e431d123406fcee063a1eefc) branch of react-responsive-audio-player and run `npm run dev` to see the behavior (example.html adds a listener which should run when volume toggles from muted to unmuted). [`componentDidUpdate`](https://github.com/benwiley4000/react-responsive-audio-player/blob/next/src/AudioPlayer.js#L245) \r\n\r\n**What is the expected behavior?**\r\n\r\nListener adding should work fine\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nI tested React 16.3-alpha.1. I think the issue also exists in React 15 - I was able to reproduce the problem locally with React 15 but I had to make some manual tweaks to create-react-context to make it backward compatible (I've now [published a polyfill](https://github.com/benwiley4000/react-dot-fragment) to make this sort of thing easier).",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/12362",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/12362/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/12362/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/12362/events",
        "html_url": "https://github.com/facebook/react/issues/12362",
        "id": 304863935,
        "number": 12362,
        "title": "ReactDOM minified development build error misleadingly says there's a development build of React, rather than ReactDOM",
        "user": {
            "login": "dtaub",
            "id": 2524663,
            "avatar_url": "https://avatars1.githubusercontent.com/u/2524663?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dtaub",
            "html_url": "https://github.com/dtaub",
            "followers_url": "https://api.github.com/users/dtaub/followers",
            "following_url": "https://api.github.com/users/dtaub/following{/other_user}",
            "gists_url": "https://api.github.com/users/dtaub/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dtaub/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dtaub/subscriptions",
            "organizations_url": "https://api.github.com/users/dtaub/orgs",
            "repos_url": "https://api.github.com/users/dtaub/repos",
            "events_url": "https://api.github.com/users/dtaub/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dtaub/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 139653724,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Core%20Utilities",
                "name": "Component: Core Utilities",
                "color": "c5def5",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2018-03-13T17:31:57Z",
        "updated_at": "2018-03-27T22:22:32Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nBug-ish (error clarification)\r\n\r\n**What is the current behavior?**\r\nWhen including a minified development build of ReactDOM the error reads: `It looks like you're using a minified copy of the development build of React.`\r\n\r\n**What is the expected behavior?**\r\nThe error correctly notified me that I was using a minfied development copy, but it took me a while to realize it meant ReactDOM and not core React.\r\nI feel it should more accurately read: `It looks like you're using a minified copy of the development build of ReactDOM.`\r\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/12363",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/12363/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/12363/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/12363/events",
        "html_url": "https://github.com/facebook/react/issues/12363",
        "id": 304866202,
        "number": 12363,
        "title": "React onBlur events not firing during unmount",
        "user": {
            "login": "timjim-kr",
            "id": 13425297,
            "avatar_url": "https://avatars3.githubusercontent.com/u/13425297?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/timjim-kr",
            "html_url": "https://github.com/timjim-kr",
            "followers_url": "https://api.github.com/users/timjim-kr/followers",
            "following_url": "https://api.github.com/users/timjim-kr/following{/other_user}",
            "gists_url": "https://api.github.com/users/timjim-kr/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/timjim-kr/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/timjim-kr/subscriptions",
            "organizations_url": "https://api.github.com/users/timjim-kr/orgs",
            "repos_url": "https://api.github.com/users/timjim-kr/repos",
            "events_url": "https://api.github.com/users/timjim-kr/events{/privacy}",
            "received_events_url": "https://api.github.com/users/timjim-kr/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 3,
        "created_at": "2018-03-13T17:38:08Z",
        "updated_at": "2018-04-26T08:52:49Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nbug\r\n\r\n**What is the current behavior?**\r\n\r\nIf a DOM element rendered by a React component has focus, and the React component unmounts, the React `onBlur` event does not fire on parent DOM elements.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nhttps://codesandbox.io/s/134wrzy6q7\r\n\r\n**What is the expected behavior?**\r\n\r\nI would expect that, just like the browser fires a `focusout` event when removing a DOM node, React would fire an `onBlur` events up to parent nodes when the focused node is removed / unmounted.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact: 16.2\r\nMac OS X: 10.13.2\r\nBrowser: Chrome 67.0.3366.0, Chrome 64.0.3282.186\r\n\r\nNo idea if this worked in earlier versions of React.",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/12393",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/12393/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/12393/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/12393/events",
        "html_url": "https://github.com/facebook/react/issues/12393",
        "id": 306067450,
        "number": 12393,
        "title": "Keep the children mounted but replace the parent",
        "user": {
            "login": "Orelc",
            "id": 32314413,
            "avatar_url": "https://avatars1.githubusercontent.com/u/32314413?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Orelc",
            "html_url": "https://github.com/Orelc",
            "followers_url": "https://api.github.com/users/Orelc/followers",
            "following_url": "https://api.github.com/users/Orelc/following{/other_user}",
            "gists_url": "https://api.github.com/users/Orelc/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Orelc/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Orelc/subscriptions",
            "organizations_url": "https://api.github.com/users/Orelc/orgs",
            "repos_url": "https://api.github.com/users/Orelc/repos",
            "events_url": "https://api.github.com/users/Orelc/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Orelc/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 40929155,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Question",
                "name": "Type: Question",
                "color": "cc317c",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2018-03-16T20:31:44Z",
        "updated_at": "2018-03-27T21:57:14Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "Hi,\r\n\r\nI'm trying to do something like this:\r\n\r\n```\r\nconst Container = (props) => props.someCondition? (\r\n    <ContainerType1>\r\n        {props.children}\r\n    </ContainerType1>\r\n) : (\r\n    <ContainerType2>\r\n        {props.children}\r\n    </ContainerType2>\r\n);\r\n\r\nconst App = (props) => (\r\n    <Container someCondition={props.someCondition} >\r\n        <ComponentThatDoesAsyncFetches1 />\r\n        <ComponentThatDoesAsyncFetches2 />\r\n        <ComponentThatDoesAsyncFetches3 />\r\n    </Container>\r\n);\r\n```\r\n\r\nBasically what I want is a situation where App is rerendering on a changing boolean prop (Imagine someCondition has an actual changing value), and a different container will render depending on its value, while maintaining the same children inside. Problem is, that those children are doing async fetches (on DidMount), but they re-mount and lose their state while the containers change. \r\n\r\nAny idea how can I achieve this with the children still mounted even if their parent changed?\r\n\r\nThanks in advance!\r\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/12415",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/12415/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/12415/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/12415/events",
        "html_url": "https://github.com/facebook/react/issues/12415",
        "id": 307272934,
        "number": 12415,
        "title": "dangerouslySetInnerHTML will wrap on SSR but not client and both are editing invalid HTML",
        "user": {
            "login": "TimoRuetten",
            "id": 7010059,
            "avatar_url": "https://avatars1.githubusercontent.com/u/7010059?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/TimoRuetten",
            "html_url": "https://github.com/TimoRuetten",
            "followers_url": "https://api.github.com/users/TimoRuetten/followers",
            "following_url": "https://api.github.com/users/TimoRuetten/following{/other_user}",
            "gists_url": "https://api.github.com/users/TimoRuetten/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/TimoRuetten/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/TimoRuetten/subscriptions",
            "organizations_url": "https://api.github.com/users/TimoRuetten/orgs",
            "repos_url": "https://api.github.com/users/TimoRuetten/repos",
            "events_url": "https://api.github.com/users/TimoRuetten/events{/privacy}",
            "received_events_url": "https://api.github.com/users/TimoRuetten/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 710332294,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Server%20Rendering",
                "name": "Component: Server Rendering",
                "color": "d4c5f9",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 4,
        "created_at": "2018-03-21T14:39:36Z",
        "updated_at": "2018-03-28T07:49:27Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "Currently we need to use the dangerouslySetInnerHTML tag in a special case. In this case we need to split our string into several and then we need to render them. This could look like this:\r\n\r\n```javascript\r\n[\r\n      <div\r\n        key=\"markup-1\"\r\n        dangerouslySetInnerHTML={{ __html: '<div><h1>InnerHtml Test</h1>' }}\r\n      />,\r\n      <div\r\n        key=\"markup-2\"\r\n        dangerouslySetInnerHTML={{ __html: '</div>' }}\r\n      />\r\n    ]\r\n```\r\n\r\nThis looks dirty - and yes, it is - but in our case we need to do smth like this until we've found a better solution. The Problem is that the SSR does not match with the client. This is the error:\r\n\r\n\r\n```javascript\r\nWarning: Prop `dangerouslySetInnerHTML` did not match. Server: \"<div><h1>InnerHtml Test</h1></div><div></div>\" Client: \"<div><h1>InnerHtml Test</h1></div>\"\r\n```\r\n\r\n**Problem 1**\r\nIt seems that on SSR react is wrapping the dangerouslyInnerHtml - the client does not. In general its a problem that React is wrapping it and we are wondering if we could avoid this somehow. Because our first HTML part is not valid and will just be valid with the second part.\r\n\r\n**Problem 2**\r\nThe second Problem is that it seems that react is making the part valid. On Server and on Client react is closing the first part with the </div>.\r\n\r\n\r\nMaybe you are wondering why we are doing this. The Problem is that we load HTML data from a database and we need to replace some special words with real React Components. So our  plan was something like this:\r\n\r\n```html\r\n<div>\r\n<h1>Markup</h1>\r\n<p>Some text...</p>\r\n<RenderAComponentHere />\r\n<p>More text ..</p>\r\n</div>\r\n```\r\nNow we split the HTML so we will get an Array with 2 Items.\r\n\r\n```javascript\r\n[\r\n'\r\n     <div>\r\n     <h1>Markup</h1>\r\n     <p>Some text...</p>\r\n',\r\n'\r\n     <p>More text ..</p>\r\n    </div>\r\n'\r\n]\r\n```\r\n\r\nNow we want to render the first Part with dangerouslySetInnerHTML, then we will render our real React-Component and then again the last part with dangerouslySetInnerHTML.\r\n\r\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/12420",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/12420/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/12420/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/12420/events",
        "html_url": "https://github.com/facebook/react/issues/12420",
        "id": 307420197,
        "number": 12420,
        "title": "Password field causes memory leak in production builds",
        "user": {
            "login": "dcodus",
            "id": 12925816,
            "avatar_url": "https://avatars0.githubusercontent.com/u/12925816?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dcodus",
            "html_url": "https://github.com/dcodus",
            "followers_url": "https://api.github.com/users/dcodus/followers",
            "following_url": "https://api.github.com/users/dcodus/following{/other_user}",
            "gists_url": "https://api.github.com/users/dcodus/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dcodus/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dcodus/subscriptions",
            "organizations_url": "https://api.github.com/users/dcodus/orgs",
            "repos_url": "https://api.github.com/users/dcodus/repos",
            "events_url": "https://api.github.com/users/dcodus/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dcodus/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 710722093,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
                "name": "Type: Needs Investigation",
                "color": "fbca04",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 10,
        "created_at": "2018-03-21T21:13:31Z",
        "updated_at": "2018-05-02T18:59:11Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n*Bug*\r\n\r\n**What is the current behavior?**\r\nWe're noticing that password-type input fields  (as well as their wrapping parents) remain as detached DOM elements when conditionally being rendered and removed from the DOM.\r\n\r\nThis issue seems to be occurring across several applications using React 16, include a newly created app from `Create React App`, and we're able to produce Chrome memory heap snapshots in all of these environments to demonstrate this issue.\r\n\r\nObserve in the following example, the button adds/removes the input field to the DOM. To reproduce the problem stated in this issue, repeatedly click this button (say 20-30 times), then take a memory heap snapshot. You will *see multiple detached DOM elements, the password `input` field and its wrapping div.* Note that this issue does not happen for other types of input fields.\r\n\r\n```\r\nclass App extends Component {\r\n  state = { show: false };\r\n\r\n  toggle = () => this.setState({show: !this.state.show})\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <button onClick={this.toggle}>Toggle password field</button>\r\n        {this.state.show && (\r\n          <div>\r\n            <input type=\"password\"/>\r\n          </div>\r\n       )}\r\n       </div>\r\n    );\r\n  }\r\n}\r\n```\r\n\r\n![image](https://user-images.githubusercontent.com/12925816/37737606-989d51be-2d2a-11e8-8650-ac4237c1ab7f.png)\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nWe have tried this issue in React 16.2, 16.1 and React 15.6. Chrome and Canary were the browsers tested in particular.",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/12428",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/12428/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/12428/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/12428/events",
        "html_url": "https://github.com/facebook/react/issues/12428",
        "id": 307730984,
        "number": 12428,
        "title": "We don't assert on warnings for tests that throw",
        "user": {
            "login": "gaearon",
            "id": 810438,
            "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gaearon",
            "html_url": "https://github.com/gaearon",
            "followers_url": "https://api.github.com/users/gaearon/followers",
            "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
            "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
            "organizations_url": "https://api.github.com/users/gaearon/orgs",
            "repos_url": "https://api.github.com/users/gaearon/repos",
            "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gaearon/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 71502270,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Build%20Infrastructure",
                "name": "Component: Build Infrastructure",
                "color": "f9d0c4",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2018-03-22T16:57:57Z",
        "updated_at": "2018-03-26T20:11:08Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "I think this shouldn't pass:\r\n\r\n```js\r\n    expect(() => {\r\n      expect(() => {\r\n        throw new Error('haha') // no warning\r\n      }).toWarnDev(\r\n        'nope',\r\n      );\r\n    }).toThrow('haha');\r\n```\r\n\r\nbut it does.",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/12434",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/12434/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/12434/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/12434/events",
        "html_url": "https://github.com/facebook/react/issues/12434",
        "id": 307788448,
        "number": 12434,
        "title": "Minified React error #[object Object]",
        "user": {
            "login": "PhilNorfleet",
            "id": 8272837,
            "avatar_url": "https://avatars2.githubusercontent.com/u/8272837?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/PhilNorfleet",
            "html_url": "https://github.com/PhilNorfleet",
            "followers_url": "https://api.github.com/users/PhilNorfleet/followers",
            "following_url": "https://api.github.com/users/PhilNorfleet/following{/other_user}",
            "gists_url": "https://api.github.com/users/PhilNorfleet/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/PhilNorfleet/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/PhilNorfleet/subscriptions",
            "organizations_url": "https://api.github.com/users/PhilNorfleet/orgs",
            "repos_url": "https://api.github.com/users/PhilNorfleet/repos",
            "events_url": "https://api.github.com/users/PhilNorfleet/events{/privacy}",
            "received_events_url": "https://api.github.com/users/PhilNorfleet/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 620368407,
                "url": "https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information",
                "name": "Resolution: Needs More Information",
                "color": "fffde7",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 18,
        "created_at": "2018-03-22T19:43:34Z",
        "updated_at": "2018-05-08T23:27:16Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "Building locally produces no errors, whereas our production build serves the following:\r\n\r\n```\r\napp-public.js:formatted:23111 Error: Minified React error #[object Object]; visit http://facebook.github.io/react/docs/error-decoder.html?invariant=[object Object] for the full message or use the non-minified dev environment for full errors and additional helpful warnings.\r\nat n (app-public.js:formatted:21146)\r\nat a (app-public.js:formatted:23584)\r\nat s (app-public.js:formatted:23649)\r\nat commitDeletion (app-public.js:formatted:23754)\r\nat t (app-public.js:formatted:22850)\r\nat E (app-public.js:formatted:23249)\r\nat b (app-public.js:formatted:23228)\r\nat h (app-public.js:formatted:23158)\r\nat m (app-public.js:formatted:23135)\r\nat Object.updateContainer (app-public.js:formatted:24015)\r\nat app-public.js:formatted:24572\r\nat Object.unbatchedUpdates (app-public.js:formatted:23901)\r\nat Qt (app-public.js:formatted:24571)\r\nat Object.render (app-public.js:formatted:26071)\r\nat Object.<anonymous> (app-public.js:formatted:56736)\r\nat Object.<anonymous> (app-public.js:formatted:56741)\r\n```\r\n\r\nI am unsure how to debug this, as there does not seem to be precedent for receiving an error code that is an object. Any ideas on how to proceed?",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/12441",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/12441/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/12441/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/12441/events",
        "html_url": "https://github.com/facebook/react/issues/12441",
        "id": 308069851,
        "number": 12441,
        "title": "Dangerous strings can reach browser builtins",
        "user": {
            "login": "mikesamuel",
            "id": 368886,
            "avatar_url": "https://avatars1.githubusercontent.com/u/368886?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mikesamuel",
            "html_url": "https://github.com/mikesamuel",
            "followers_url": "https://api.github.com/users/mikesamuel/followers",
            "following_url": "https://api.github.com/users/mikesamuel/following{/other_user}",
            "gists_url": "https://api.github.com/users/mikesamuel/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mikesamuel/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mikesamuel/subscriptions",
            "organizations_url": "https://api.github.com/users/mikesamuel/orgs",
            "repos_url": "https://api.github.com/users/mikesamuel/repos",
            "events_url": "https://api.github.com/users/mikesamuel/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mikesamuel/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 710375792,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
                "name": "Type: Discussion",
                "color": "fef2c0",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 6,
        "created_at": "2018-03-23T15:16:28Z",
        "updated_at": "2018-04-01T01:13:30Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nA bug, but a well known and worked-around one.\r\n\r\n**What is the current behavior?**\r\n\r\n```jsx\r\nvar x = 'javascript:alert(1)';\r\nReactDOM.render(\r\n  (<a href={x}>Link</a>),\r\n  document.getElementById('container')\r\n);\r\n```\r\n\r\nproduces a link that alerts.\r\n\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\n* [Load the code above in the codepen REPL](https://jsfiddle.net/Luktwrdm/202/)\r\n* After the REPL loads, click the \"Run\" button at the top left.\r\n* You should see a blue \"link\" in the bottom-right pane.\r\n* Click it.  An alert will popup.\r\n\r\nThe alert should not pop up.\r\n\r\nA simple string that reaches an `href` attribute should not cause arbitrary code execution even with user interaction.\r\n\r\n\r\n**What is the expected behavior?**\r\nA string that reaches a browser builtin like the `HTMLAElement.prototype.href` setter should not cause code execution.\r\n\r\n**Discussion**\r\n\r\n[Polymer Resin](https://docs.google.com/presentation/d/1hepAXMroHSNTM0NV1aGlntjHrw0a0QOM5X5JvfXv_N0/edit#slide=id.g227691820f_0_198) uses hooks in another webcomponents framework to intercept value before they reach browser builtins where they can be vetted.  A similar approach could work for React.\r\n\r\nIt allows values to reach browser builtins when they are innocuous or have a runtime type that indicates that the author intentionally marked them as safe for that kind of browser builtin.\r\n\r\nFor example, an `instanceof SafeURL` would be allowed to reach `HTMLAElement.prototype.href` as would any string that is a relative URL, or one with a whitelisted protocol in (`http`, `https`, `mailto`, `tel`) but not `javascript:...`.\r\n\r\nMany developers know that `<a href={...}>` is risky, but if the link is an implementation detail of a custom React element, then developers don't have the context to know which attributes they need to be careful with.  They shouldn't have to either since it is an implementation detail.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nI believe this is widespread across versions.\r\n\r\nAn earlier REPL I tried showed that it worked on version 16.2.0 from https://unpkg.com/react-dom/umd/react-dom.development.js but I don't know what version the jsfiddle above uses.\r\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/12454",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/12454/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/12454/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/12454/events",
        "html_url": "https://github.com/facebook/react/issues/12454",
        "id": 308436717,
        "number": 12454,
        "title": "Elements loose focus when moving to or from a portal",
        "user": {
            "login": "alexreardon",
            "id": 2182637,
            "avatar_url": "https://avatars1.githubusercontent.com/u/2182637?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/alexreardon",
            "html_url": "https://github.com/alexreardon",
            "followers_url": "https://api.github.com/users/alexreardon/followers",
            "following_url": "https://api.github.com/users/alexreardon/following{/other_user}",
            "gists_url": "https://api.github.com/users/alexreardon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/alexreardon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/alexreardon/subscriptions",
            "organizations_url": "https://api.github.com/users/alexreardon/orgs",
            "repos_url": "https://api.github.com/users/alexreardon/repos",
            "events_url": "https://api.github.com/users/alexreardon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/alexreardon/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 121709921,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 3,
        "created_at": "2018-03-26T05:23:57Z",
        "updated_at": "2018-04-01T01:13:13Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nPerhaps a bug, but could also be seen as a feature\r\n\r\n**What is the current behavior?**\r\n\r\nWhen you move an element to a portal through `ReactDOM.createPortal` the element looses focus if it had focus. If the element gains focus while in a portal, when moving out of the portal it looses focus.\r\n\r\n**What is the expected behavior?**\r\n\r\nI would have expected React to maintain focus of the element when moving in or out of a portal\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nTested with\r\n\r\nReact version: 16.2\r\nBrowsers: Latest chrome and firefox. I did not test others but expect the behaviour to be the same\r\nOS: Tested on Mac High Sierra\r\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/12476",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/12476/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/12476/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/12476/events",
        "html_url": "https://github.com/facebook/react/issues/12476",
        "id": 309518807,
        "number": 12476,
        "title": "event.button sent by TestUtils.Simulate.click() is undefined by default",
        "user": {
            "login": "silvenon",
            "id": 471278,
            "avatar_url": "https://avatars2.githubusercontent.com/u/471278?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/silvenon",
            "html_url": "https://github.com/silvenon",
            "followers_url": "https://api.github.com/users/silvenon/followers",
            "following_url": "https://api.github.com/users/silvenon/following{/other_user}",
            "gists_url": "https://api.github.com/users/silvenon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/silvenon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/silvenon/subscriptions",
            "organizations_url": "https://api.github.com/users/silvenon/orgs",
            "repos_url": "https://api.github.com/users/silvenon/repos",
            "events_url": "https://api.github.com/users/silvenon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/silvenon/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2018-03-28T20:26:24Z",
        "updated_at": "2018-03-28T20:26:24Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nReport a bug.\r\n\r\n**What is the current behavior?**\r\n\r\nBy default `Simulate.click()` sends an event with an undefined `event.button`.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nhttps://codesandbox.io/s/00lm97zrjn\r\n\r\n**What is the expected behavior?**\r\n\r\nI think `event.button` should default to `0` because that means \"left click\". Some libraries like react-router [rely on this](https://github.com/ReactTraining/react-router/blob/5342c9fd58c85fd0b6272a5f12dcedab7416c0fe/packages/react-router-dom/modules/Link.js#L40). Maybe _they_ should default to `0`, not React? ReactTraining/react-router#1534\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nI'm not sure about earlier versions, but I'm getting this behavior in `react-dom@16.2.0`.",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/12477",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/12477/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/12477/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/12477/events",
        "html_url": "https://github.com/facebook/react/issues/12477",
        "id": 309527937,
        "number": 12477,
        "title": "Issues with ReactControlledValuePropTypes",
        "user": {
            "login": "lukescott",
            "id": 486224,
            "avatar_url": "https://avatars0.githubusercontent.com/u/486224?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/lukescott",
            "html_url": "https://github.com/lukescott",
            "followers_url": "https://api.github.com/users/lukescott/followers",
            "following_url": "https://api.github.com/users/lukescott/following{/other_user}",
            "gists_url": "https://api.github.com/users/lukescott/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/lukescott/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/lukescott/subscriptions",
            "organizations_url": "https://api.github.com/users/lukescott/orgs",
            "repos_url": "https://api.github.com/users/lukescott/repos",
            "events_url": "https://api.github.com/users/lukescott/events{/privacy}",
            "received_events_url": "https://api.github.com/users/lukescott/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 121709921,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 9,
        "created_at": "2018-03-28T20:54:22Z",
        "updated_at": "2018-04-11T21:58:20Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nSee below.\r\n\r\n**What is the current behavior?**\r\n\r\n1. (Bug / Inconsistency)\r\n```jsx\r\n<input type=\"radio\" checked={false} />\r\n```\r\nNo Warning.\r\n\r\n2. (Feature Request)\r\n```jsx\r\n<input type=\"radio\" checked={true} onChange={undefined} />\r\n```\r\n`Warning: Failed prop type: You provided a 'checked' prop to a form field without an 'onChange' handler. This will render a read-only field. If the field should be mutable use 'defaultChecked'. Otherwise, set either 'onChange' or 'readOnly'.'`\r\n\r\n3. (Bug?)\r\n```jsx\r\n<select value=\"foo\" readOnly={true}>...</select>\r\n```\r\nNo warning.\r\n\r\n**What is the expected behavior?**\r\n\r\n1. Passing a falsy `value` or `checked` attribute will not trigger a warning, but a truthy value does.\r\n\r\n2. If onChange is passed as undefined (or null?) this should be considered as an acknowledgement and silence the warning. I have a case where I split the render method from the component and use it as a preview. When the component is interactive I use the component. When doing a preview I pass undefined as my change handler. A warning is shown to tell me I \"forgot\" it, but I intended it to be this way.\r\n\r\n3. Going along with 2, I can pass `readOnly={!handleChange}`, but according to DefinitelyTyped this isn't a valid attribute for select. I can't use disabled because it changes the appearance of the field.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n16.2.0\r\nChrome 65\r\n\r\n**Other**\r\n\r\nA proposed \"fix\" would be to change:\r\n\r\nhttps://github.com/facebook/react/blob/37e4329bc81def4695211d6e3795a654ef4d84f5/packages/react-dom/src/shared/ReactControlledValuePropTypes.js#L27-L33\r\n\r\nto:\r\n\r\n```js\r\nif ( \r\n    !(propName in props) || // Fixes 1\r\n    hasReadOnlyValue[props.type] || \r\n    \"onChange\" in props ||  // Fixes 2\r\n    props.readOnly || \r\n    props.disabled \r\n ) { \r\n```\r\n\r\nAnd:\r\n\r\nhttps://github.com/facebook/react/blob/37e4329bc81def4695211d6e3795a654ef4d84f5/packages/react-dom/src/shared/ReactControlledValuePropTypes.js#L44-L49\r\n\r\nto:\r\n\r\n```js\r\nif (\r\n    !(propName in props[propName]) || // Fixes 1\r\n    \"onChange\" in props || // Fixes 2\r\n    props.readOnly ||\r\n    props.disabled\r\n) {\r\n```",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/12481",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/12481/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/12481/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/12481/events",
        "html_url": "https://github.com/facebook/react/issues/12481",
        "id": 309665864,
        "number": 12481,
        "title": "[SVG] Enable focusable to accept boolean values",
        "user": {
            "login": "HugoGiraudel",
            "id": 1889710,
            "avatar_url": "https://avatars3.githubusercontent.com/u/1889710?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/HugoGiraudel",
            "html_url": "https://github.com/HugoGiraudel",
            "followers_url": "https://api.github.com/users/HugoGiraudel/followers",
            "following_url": "https://api.github.com/users/HugoGiraudel/following{/other_user}",
            "gists_url": "https://api.github.com/users/HugoGiraudel/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/HugoGiraudel/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/HugoGiraudel/subscriptions",
            "organizations_url": "https://api.github.com/users/HugoGiraudel/orgs",
            "repos_url": "https://api.github.com/users/HugoGiraudel/repos",
            "events_url": "https://api.github.com/users/HugoGiraudel/events{/privacy}",
            "received_events_url": "https://api.github.com/users/HugoGiraudel/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 121709921,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2018-03-29T08:35:33Z",
        "updated_at": "2018-04-01T01:12:26Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "Moved discussion from https://github.com/facebook/react/issues/6212.\r\n\r\n## Situation\r\n\r\nThe [`focusable` attribute](https://www.w3.org/TR/SVGTiny12/interact.html#focusable-attr) from the SVG specifications is an [enumerated attribute](https://html.spec.whatwg.org/#keywords-and-enumerated-attributes) accepting values `\"true\"`, `\"false\"` and `\"auto\"`. Because it is technically not a boolean attribute (although it certainly somehow looks like it), React expects the value to be passed as a string. See the following example:\r\n\r\n```diff\r\n-<svg focusable>I should be focusable</svg>\r\n-<svg focusable={true}>I should be focusable</svg>\r\n+<svg focusable='true'>I should be focusable</svg>\r\n```\r\n\r\nThe thing is, the `focusable` attribute is often used in conjunction with elements from the ARIA specification, in which attributes are booleans and not enumerated attributes with `\"true\"` and `\"false\"` values. The [`aria-hidden` attribute](https://www.w3.org/TR/wai-aria-1.1/#aria-hidden) is a good example of that.\r\n\r\nFor instance, [following a good practice for icon-buttons](https://fvsch.com/code/svg-icons/#section-html):\r\n\r\n```html\r\n<button type=\"button\">\r\n  <svg aria-hidden=\"true\" focusable=\"false\">\r\n    <use xlink:href=\"#icon-play\"></use>\r\n  </svg>\r\n  <span class=\"access-label\">Start playback</span>\r\n</button>\r\n```\r\n\r\nFrom an authoring perspective, the above snippet would likely be written like this in JSX:\r\n\r\n```jsx\r\n<button type='button'>\r\n  <Icon icon='play' aria-hidden={true} focusable={false} />\r\n  <span class='access-label'>Start playback</span>\r\n</button>\r\n```\r\n\r\nThe problem is that `focusable` **cannot** be authored as a boolean, otherwise it will **not** be printed out in the DOM. On the other hand, `aria-hidden` is perfectly fine being written as a boolean at it gets coerced by React.\r\n\r\n## Proposal\r\n\r\nGiven the default value for the `focusable` attribute is `\"auto\"`, this is very likely this attribute gets authored to change its value to `true` or `false`. In that regard, it is confusing that it has to be specified as a string, when other attributes accepting booleans can be authored as such.\r\n\r\nThe suggestion would be to make it possible for `focusable` to be specified as either a boolean or a string, like other similar attributes. In other words, all the following should work:\r\n\r\n```jsx\r\n<svg focusable>I should be focusable</svg>\r\n<svg focusable={true}>I should be focusable</svg>\r\n<svg focusable='true'>I should be focusable</svg>\r\n<svg focusable={false}>I should not be focusable</svg>\r\n<svg focusable='false'>I should not be focusable</svg>\r\n<svg focusable='auto'>I should be focusable</svg>\r\n```\r\n\r\nFrom an authoring perspective, I believe this would be the most straightforward and less confusing.",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/12506",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/12506/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/12506/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/12506/events",
        "html_url": "https://github.com/facebook/react/issues/12506",
        "id": 310245773,
        "number": 12506,
        "title": "Possible incorrect event.target on number inputs in IE9?",
        "user": {
            "login": "nhunzaker",
            "id": 590904,
            "avatar_url": "https://avatars3.githubusercontent.com/u/590904?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nhunzaker",
            "html_url": "https://github.com/nhunzaker",
            "followers_url": "https://api.github.com/users/nhunzaker/followers",
            "following_url": "https://api.github.com/users/nhunzaker/following{/other_user}",
            "gists_url": "https://api.github.com/users/nhunzaker/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nhunzaker/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nhunzaker/subscriptions",
            "organizations_url": "https://api.github.com/users/nhunzaker/orgs",
            "repos_url": "https://api.github.com/users/nhunzaker/repos",
            "events_url": "https://api.github.com/users/nhunzaker/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nhunzaker/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 69105383,
                "url": "https://api.github.com/repos/facebook/react/labels/Browser:%20IE",
                "name": "Browser: IE",
                "color": "c7def8",
                "default": false
            },
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 40929151,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
                "name": "Type: Bug",
                "color": "b60205",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 7,
        "created_at": "2018-03-31T14:45:51Z",
        "updated_at": "2018-05-22T14:55:43Z",
        "closed_at": null,
        "author_association": "COLLABORATOR",
        "body": "Since React 16.0.0, it looks like there might be a case where `event.target` on a change event in IE0 reports as the window, but I can't reproduce it outside of the DOM test fixtures.\r\n\r\n*Steps to reproduce*\r\n\r\n1. Open this build of the fixtures: http://react-ie-9-target-issues.surge.sh in IE9\r\n2. Enter text into an input\r\n3. Observe that the `event.target.value` is the window, as recorded by the fixture\r\n\r\nI can not reproduce this using the following CodePen:\r\n\r\nhttps://codepen.io/nhunzaker/pen/dmeoxJ?editors=1010\r\nViewable in IE9 here: https://s.codepen.io/nhunzaker/debug/dmeoxJ/PNrvYLevqQbM\r\n\r\nHere's a diff of my changes with master:\r\nhttps://github.com/facebook/react/compare/master...nhunzaker:ie9-target-issue\r\n\r\nAny idea what's going on? Here's what I think I need to check next:\r\n\r\n- [ ] Differences in rAF polyfill\r\n- [ ] Differences in map/set polyfill\r\n\r\n_This list will probably grow_",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/12525",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/12525/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/12525/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/12525/events",
        "html_url": "https://github.com/facebook/react/issues/12525",
        "id": 310899571,
        "number": 12525,
        "title": "Provide a way to detect infinite component rendering recursion in development",
        "user": {
            "login": "josh-degraw",
            "id": 18509575,
            "avatar_url": "https://avatars2.githubusercontent.com/u/18509575?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/josh-degraw",
            "html_url": "https://github.com/josh-degraw",
            "followers_url": "https://api.github.com/users/josh-degraw/followers",
            "following_url": "https://api.github.com/users/josh-degraw/following{/other_user}",
            "gists_url": "https://api.github.com/users/josh-degraw/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/josh-degraw/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/josh-degraw/subscriptions",
            "organizations_url": "https://api.github.com/users/josh-degraw/orgs",
            "repos_url": "https://api.github.com/users/josh-degraw/repos",
            "events_url": "https://api.github.com/users/josh-degraw/events{/privacy}",
            "received_events_url": "https://api.github.com/users/josh-degraw/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 121709921,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 9,
        "created_at": "2018-04-03T16:04:05Z",
        "updated_at": "2018-04-26T20:02:01Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n- Feature (possibly bug?)\r\n\r\n**What is the current behavior?**\r\n\r\nI've been trying out the new Context API in my project and it's awesome. However, in my haste to start using it, I managed to stumble into a situation where every time I would try and render a certain component which was making use of a few different contexts, the app would completely freeze, and the only thing that would let me get out of this error state was to forcefully kill the process via the chrome task manager.\r\n\r\nNothing would be logged to the console, the app would just completely freeze, and when I opened up the task manager and saw the CPU spiked up every time i would go to this component, and the only way I could stop it was to crash the tab. \r\n\r\nI finally threw some `console` statements in and saw that it had just entered into an infinite loop between these providers. I managed to get the app to stop crashing, but I'm still unsure as to why exactly this was happening. I'm sure I was just using this API incorrectly somehow, but this was a very confusing problem to diagnose, and some error checking here would be incredibly useful\r\n\r\n**What is the expected behavior?**\r\n\r\nIt would be very beneficial to have some sort of checks in place, similar to what happens with too many `setState` calls happening too closely when you call it from `componentDidUpdate`, for example. That way, instead of freezing everything up permanently, the app could at least crash and report some sort of information and help me realize where I'd gone wrong.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n- React `16.3.0`\r\n- Chrome `65.0.3325.181`\r\n\r\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/12536",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/12536/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/12536/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/12536/events",
        "html_url": "https://github.com/facebook/react/issues/12536",
        "id": 311248128,
        "number": 12536,
        "title": "SSR hydration changes links' href",
        "user": {
            "login": "EnoahNetzach",
            "id": 663755,
            "avatar_url": "https://avatars0.githubusercontent.com/u/663755?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/EnoahNetzach",
            "html_url": "https://github.com/EnoahNetzach",
            "followers_url": "https://api.github.com/users/EnoahNetzach/followers",
            "following_url": "https://api.github.com/users/EnoahNetzach/following{/other_user}",
            "gists_url": "https://api.github.com/users/EnoahNetzach/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/EnoahNetzach/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/EnoahNetzach/subscriptions",
            "organizations_url": "https://api.github.com/users/EnoahNetzach/orgs",
            "repos_url": "https://api.github.com/users/EnoahNetzach/repos",
            "events_url": "https://api.github.com/users/EnoahNetzach/events{/privacy}",
            "received_events_url": "https://api.github.com/users/EnoahNetzach/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 710332294,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Server%20Rendering",
                "name": "Component: Server Rendering",
                "color": "d4c5f9",
                "default": false
            },
            {
                "id": 710722093,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
                "name": "Type: Needs Investigation",
                "color": "fbca04",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 3,
        "created_at": "2018-04-04T14:13:55Z",
        "updated_at": "2018-04-05T09:44:50Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nReport a bug\r\n\r\n**What is the current behavior?**\r\n`React.hydrate` replaces the DOM after a SSR page is served, and two sibling links in the page have the `href` attributes wrongly set.\r\n\r\nI did a little repl to replicate this behaviour [here](https://repl.it/@EnoahNetzach/SSR-whitespace-mismatch).\r\n\r\nWhen the server responds, the HTML is correct:\r\n\r\n![screen shot 2018-04-04 at 16 08 06](https://user-images.githubusercontent.com/663755/38312693-b1167650-3822-11e8-85f3-0f100caf8a50.png)\r\n\r\nbut right after hydration, the first `href` is changed: \r\n\r\n![screen shot 2018-04-04 at 16 08 20](https://user-images.githubusercontent.com/663755/38312738-c96e1b4a-3822-11e8-9e7e-0d6a9fa24ed2.png)\r\nand whitespace artifacts are added.\r\n\r\n**What is the expected behavior?**\r\nThe first `href` should not be changed.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact v16.2\r\nChrome 65.0\r\nmacOS\r\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/12548",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/12548/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/12548/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/12548/events",
        "html_url": "https://github.com/facebook/react/issues/12548",
        "id": 311424796,
        "number": 12548,
        "title": "Upgrade to Babel 7",
        "user": {
            "login": "acdlite",
            "id": 3624098,
            "avatar_url": "https://avatars0.githubusercontent.com/u/3624098?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/acdlite",
            "html_url": "https://github.com/acdlite",
            "followers_url": "https://api.github.com/users/acdlite/followers",
            "following_url": "https://api.github.com/users/acdlite/following{/other_user}",
            "gists_url": "https://api.github.com/users/acdlite/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/acdlite/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/acdlite/subscriptions",
            "organizations_url": "https://api.github.com/users/acdlite/orgs",
            "repos_url": "https://api.github.com/users/acdlite/repos",
            "events_url": "https://api.github.com/users/acdlite/events{/privacy}",
            "received_events_url": "https://api.github.com/users/acdlite/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 71502270,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Build%20Infrastructure",
                "name": "Component: Build Infrastructure",
                "color": "f9d0c4",
                "default": false
            },
            {
                "id": 725156255,
                "url": "https://api.github.com/repos/facebook/react/labels/good%20first%20issue%20(taken)",
                "name": "good first issue (taken)",
                "color": "b60205",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 6,
        "created_at": "2018-04-04T23:26:20Z",
        "updated_at": "2018-05-15T11:03:34Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "Babel 7 is still in beta, but presumably it will be released soon. We should get a head start on upgrading. Perhaps it's stable enough for us to upgrade even before the final release.\r\n\r\nOne benefit is we could use JSX fragment syntax in tests. Yay!\r\n\r\n@reznord has volunteered to pick this up.",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/12553",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/12553/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/12553/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/12553/events",
        "html_url": "https://github.com/facebook/react/issues/12553",
        "id": 311732588,
        "number": 12553,
        "title": "[meta] Bringing Flow types in line with 16.3 APIs",
        "user": {
            "login": "billyjanitsch",
            "id": 1158733,
            "avatar_url": "https://avatars3.githubusercontent.com/u/1158733?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/billyjanitsch",
            "html_url": "https://github.com/billyjanitsch",
            "followers_url": "https://api.github.com/users/billyjanitsch/followers",
            "following_url": "https://api.github.com/users/billyjanitsch/following{/other_user}",
            "gists_url": "https://api.github.com/users/billyjanitsch/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/billyjanitsch/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/billyjanitsch/subscriptions",
            "organizations_url": "https://api.github.com/users/billyjanitsch/orgs",
            "repos_url": "https://api.github.com/users/billyjanitsch/repos",
            "events_url": "https://api.github.com/users/billyjanitsch/events{/privacy}",
            "received_events_url": "https://api.github.com/users/billyjanitsch/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 3,
        "created_at": "2018-04-05T19:06:51Z",
        "updated_at": "2018-05-11T17:17:27Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "Hi!\r\n\r\nI realize that the React team doesn't work on Flow directly, and that the React typings live there. However, there are currently some large gaps in Flow support for the new 16.2/16.3 APIs, and I thought it might be good to raise/track them here, for the benefit of people searching the React tracker.\r\n\r\nI filed issues in the Flow repo for missing typings that didn't have outstanding PRs.\r\n\r\n- [x] `UNSAFE_`-prefixed lifecycles (commit: https://github.com/facebook/flow/commit/cd8fdcdd8719ca0138fb71d30a786d70e98f136c)\r\n- [x] `createContext` (commit: https://github.com/facebook/flow/commit/dd27ebbd14782cc103632e5459e106559d8b5511)\r\n- [x] `createRef` (commits: https://github.com/facebook/flow/commit/dd27ebbd14782cc103632e5459e106559d8b5511, https://github.com/facebook/flow/commit/d74ab13a8dfc5395ec5883aa2fa56be0a03a3a3f)\r\n- [ ] `forwardRef` (issue: https://github.com/facebook/flow/issues/6103)\r\n- [ ] `getDerivedStateFromProps` (issue: https://github.com/facebook/flow/issues/6101)\r\n- [ ] `getSnapshotBeforeUpdate` (issue: https://github.com/facebook/flow/issues/6104)\r\n- [ ] `StrictMode` (PR: https://github.com/facebook/flow/pull/6078)\r\n- [ ] `componentDidCatch` (PR: https://github.com/facebook/flow/pull/6044)\r\n\r\nFeel free to close this issue if you don't think it's useful. But maybe the React team knows someone on the Flow team who can help give priority to these libdef updates (especially those with PRs)?\r\n\r\n\u2764\ufe0f",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/12560",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/12560/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/12560/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/12560/events",
        "html_url": "https://github.com/facebook/react/issues/12560",
        "id": 311920425,
        "number": 12560,
        "title": "react onClick event is not firing in Samsung Native Browser",
        "user": {
            "login": "NithishReddy",
            "id": 13183639,
            "avatar_url": "https://avatars2.githubusercontent.com/u/13183639?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/NithishReddy",
            "html_url": "https://github.com/NithishReddy",
            "followers_url": "https://api.github.com/users/NithishReddy/followers",
            "following_url": "https://api.github.com/users/NithishReddy/following{/other_user}",
            "gists_url": "https://api.github.com/users/NithishReddy/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/NithishReddy/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/NithishReddy/subscriptions",
            "organizations_url": "https://api.github.com/users/NithishReddy/orgs",
            "repos_url": "https://api.github.com/users/NithishReddy/repos",
            "events_url": "https://api.github.com/users/NithishReddy/events{/privacy}",
            "received_events_url": "https://api.github.com/users/NithishReddy/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 620368407,
                "url": "https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information",
                "name": "Resolution: Needs More Information",
                "color": "fffde7",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 5,
        "created_at": "2018-04-06T10:09:21Z",
        "updated_at": "2018-04-30T09:42:15Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "```\r\nclass Clicked extends React.Component{\r\n  mark(){\r\n   console.log('clicked');\r\n  }\r\n  render()\r\n  {\r\n    return (<a href=\"javascript:void(0)\" onClick={this.mark.bind(this)}>click</a>)\r\n  }\r\n}\r\n```\r\n\r\n\r\nAbove click is not firing in Samsung native browser ??\r\n\r\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/12570",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/12570/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/12570/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/12570/events",
        "html_url": "https://github.com/facebook/react/issues/12570",
        "id": 312254725,
        "number": 12570,
        "title": "ReactJS Logo License",
        "user": {
            "login": "rainwater11",
            "id": 6565133,
            "avatar_url": "https://avatars0.githubusercontent.com/u/6565133?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rainwater11",
            "html_url": "https://github.com/rainwater11",
            "followers_url": "https://api.github.com/users/rainwater11/followers",
            "following_url": "https://api.github.com/users/rainwater11/following{/other_user}",
            "gists_url": "https://api.github.com/users/rainwater11/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rainwater11/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rainwater11/subscriptions",
            "organizations_url": "https://api.github.com/users/rainwater11/orgs",
            "repos_url": "https://api.github.com/users/rainwater11/repos",
            "events_url": "https://api.github.com/users/rainwater11/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rainwater11/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 40929155,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Question",
                "name": "Type: Question",
                "color": "cc317c",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2018-04-08T00:00:41Z",
        "updated_at": "2018-04-09T15:24:55Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "I have been unable to find out what the license for the React logo is. Does anyone know under which license it is?",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/12584",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/12584/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/12584/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/12584/events",
        "html_url": "https://github.com/facebook/react/issues/12584",
        "id": 312567834,
        "number": 12584,
        "title": "Controlled <select> doesn't update in Firefox when also setting state in another event",
        "user": {
            "login": "benclive",
            "id": 36448794,
            "avatar_url": "https://avatars2.githubusercontent.com/u/36448794?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benclive",
            "html_url": "https://github.com/benclive",
            "followers_url": "https://api.github.com/users/benclive/followers",
            "following_url": "https://api.github.com/users/benclive/following{/other_user}",
            "gists_url": "https://api.github.com/users/benclive/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benclive/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benclive/subscriptions",
            "organizations_url": "https://api.github.com/users/benclive/orgs",
            "repos_url": "https://api.github.com/users/benclive/repos",
            "events_url": "https://api.github.com/users/benclive/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benclive/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 40929151,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
                "name": "Type: Bug",
                "color": "b60205",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 4,
        "created_at": "2018-04-09T15:02:53Z",
        "updated_at": "2018-04-20T22:01:18Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "Reporting a Bug\r\n\r\n**What is the current behavior?**\r\nWhen selecting a value in a React controlled select box in Firefox, the selection doesn't change. This occurs when a MouseDown handler also generates a state change.\r\n\r\nIt seems to occur when the MouseDown handler sets the state and re-renders the dropdown before the onChange event handler fires. The onChange is then triggered with the old select value because React provided the old state during the re-render.\r\n\r\nCodePen (modified example from the Docs): https://codepen.io/anon/pen/zWyJqg?editors=0010\r\nSteps to reproduce:\r\n1. Run example on Firefox\r\n2. Open the dropdown and select a different value (e.g. Grapefruit)\r\n3. Observe that the new value is not selected.\r\n\r\n**What is the expected behavior?**\r\nSelect dropdown is updated and the value is available in React.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nTested on Firefox v59.0.2 (Development Edition and Normal) on OSX using React v16.3.1 and v16.1.1\r\nAlso encountered on Windows but I'm not sure of the exact versions.\r\nTested on Chrome and everything works as intended on OSX and Windows.\r\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/12589",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/12589/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/12589/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/12589/events",
        "html_url": "https://github.com/facebook/react/issues/12589",
        "id": 312786441,
        "number": 12589,
        "title": "Multiple Renderers Should Allow Context",
        "user": {
            "login": "sebmarkbage",
            "id": 63648,
            "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sebmarkbage",
            "html_url": "https://github.com/sebmarkbage",
            "followers_url": "https://api.github.com/users/sebmarkbage/followers",
            "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
            "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
            "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
            "repos_url": "https://api.github.com/users/sebmarkbage/repos",
            "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 739761016,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Reconciler",
                "name": "Component: Reconciler",
                "color": "f9a798",
                "default": false
            },
            {
                "id": 40929153,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement",
                "name": "Type: Enhancement",
                "color": "84b6eb",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": {
            "login": "acdlite",
            "id": 3624098,
            "avatar_url": "https://avatars0.githubusercontent.com/u/3624098?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/acdlite",
            "html_url": "https://github.com/acdlite",
            "followers_url": "https://api.github.com/users/acdlite/followers",
            "following_url": "https://api.github.com/users/acdlite/following{/other_user}",
            "gists_url": "https://api.github.com/users/acdlite/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/acdlite/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/acdlite/subscriptions",
            "organizations_url": "https://api.github.com/users/acdlite/orgs",
            "repos_url": "https://api.github.com/users/acdlite/repos",
            "events_url": "https://api.github.com/users/acdlite/events{/privacy}",
            "received_events_url": "https://api.github.com/users/acdlite/received_events",
            "type": "User",
            "site_admin": false
        },
        "assignees": [
            {
                "login": "acdlite",
                "id": 3624098,
                "avatar_url": "https://avatars0.githubusercontent.com/u/3624098?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/acdlite",
                "html_url": "https://github.com/acdlite",
                "followers_url": "https://api.github.com/users/acdlite/followers",
                "following_url": "https://api.github.com/users/acdlite/following{/other_user}",
                "gists_url": "https://api.github.com/users/acdlite/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/acdlite/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/acdlite/subscriptions",
                "organizations_url": "https://api.github.com/users/acdlite/orgs",
                "repos_url": "https://api.github.com/users/acdlite/repos",
                "events_url": "https://api.github.com/users/acdlite/events{/privacy}",
                "received_events_url": "https://api.github.com/users/acdlite/received_events",
                "type": "User",
                "site_admin": false
            }
        ],
        "milestone": null,
        "comments": 0,
        "created_at": "2018-04-10T06:17:43Z",
        "updated_at": "2018-04-10T14:15:01Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "https://github.com/facebook/react/blob/ba245f6f9b0bf31c2ebff5c087c21bcae111e6c3/packages/react-reconciler/src/ReactFiberNewContext.js#L51\r\n\r\nWe currently don't allow multiple renderers share the same context.\r\n\r\nHowever, we should relax that constraint. They should be allowed, as long as rendering isn't interleaved. So when we pop the provider, we should also pop the sigil.\r\n\r\nWe need this to run Fabric and RN at the same time.",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/12596",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/12596/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/12596/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/12596/events",
        "html_url": "https://github.com/facebook/react/issues/12596",
        "id": 312980151,
        "number": 12596,
        "title": "[Question] Context provider state initialisation.",
        "user": {
            "login": "leonaves",
            "id": 1926652,
            "avatar_url": "https://avatars1.githubusercontent.com/u/1926652?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/leonaves",
            "html_url": "https://github.com/leonaves",
            "followers_url": "https://api.github.com/users/leonaves/followers",
            "following_url": "https://api.github.com/users/leonaves/following{/other_user}",
            "gists_url": "https://api.github.com/users/leonaves/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/leonaves/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/leonaves/subscriptions",
            "organizations_url": "https://api.github.com/users/leonaves/orgs",
            "repos_url": "https://api.github.com/users/leonaves/repos",
            "events_url": "https://api.github.com/users/leonaves/events{/privacy}",
            "received_events_url": "https://api.github.com/users/leonaves/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 40929155,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Question",
                "name": "Type: Question",
                "color": "cc317c",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 13,
        "created_at": "2018-04-10T15:40:31Z",
        "updated_at": "2018-04-23T15:36:33Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "Consider a component wrapping a context provider:\r\n\r\n```js\r\nclass ValueWrapper extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      value: null,\r\n      setValue: this.setValue,\r\n    };\r\n  }\r\n\r\n  setValue = (value) => {\r\n    this.setState({ value });\r\n  };\r\n\r\n  render = () => (\r\n    <Context.Provider value={this.state}>\r\n      {this.props.children}\r\n    </Context.Provider>\r\n  );\r\n}\r\n```\r\n\r\nA consumer then might want to set a default value when it is first mounted. The only way I can see to do this using the new API is to check for an existing value on first render:\r\n\r\n```js\r\nclass ValueUpdater extends React.Component {\r\n  state = {\r\n    inputValue: 0,\r\n  };\r\n\r\n  handleInputChange = e => {\r\n    this.setState({ inputValue: e.target.value });\r\n  };\r\n\r\n  render = () => (\r\n    <Context.Consumer>\r\n      {({ value, setValue }) => {\r\n        if (!value) {\r\n          setValue(this.state.inputValue);\r\n        }\r\n\r\n        return (\r\n          <div>\r\n            <input type=\"text\" value={value} onChange={handleInputChange}/>\r\n            <button onClick={() => setValue(this.state.inputValue)}>Update value</button>\r\n          </div>\r\n        );\r\n      }}\r\n    </Context.Consumer>\r\n  )\r\n};\r\n```\r\n\r\nBut this seems to break the golden rule of updating state in the render method (`setValue(this.state.inputValue)`), as this would immediately cause a re-render. Ideally I would be able to call the `setValue` from the context in the `componentDidMount` method of the `ValueUpdater` component, but with context as a render prop, that's not possible, as far as I can tell. The docs suggest passing props down to another component:\r\n\r\n```js\r\n  render = () => (\r\n    <Context.Consumer>\r\n      {({ value, setValue }) => (\r\n          <ValueUpdaterInput setValue={ setValue } value={ value } />\r\n      )}\r\n    </Context.Consumer>\r\n  )\r\n```\r\n\r\nBut if I tried to do the initialisation in the `ValueUpdaterInput` component's `componentDidMount` method, it would be called on every render, surely, as `ValueUpdaterInput` would be re-rendered each time?\r\n\r\nIs there a better pattern than this, or am I trying to use context inappropriately?",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/12608",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/12608/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/12608/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/12608/events",
        "html_url": "https://github.com/facebook/react/issues/12608",
        "id": 313769925,
        "number": 12608,
        "title": "[Question]: intentional rendering of attribute with undefined value in react-test-renderer HTML",
        "user": {
            "login": "icfantv",
            "id": 370054,
            "avatar_url": "https://avatars2.githubusercontent.com/u/370054?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/icfantv",
            "html_url": "https://github.com/icfantv",
            "followers_url": "https://api.github.com/users/icfantv/followers",
            "following_url": "https://api.github.com/users/icfantv/following{/other_user}",
            "gists_url": "https://api.github.com/users/icfantv/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/icfantv/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/icfantv/subscriptions",
            "organizations_url": "https://api.github.com/users/icfantv/orgs",
            "repos_url": "https://api.github.com/users/icfantv/repos",
            "events_url": "https://api.github.com/users/icfantv/events{/privacy}",
            "received_events_url": "https://api.github.com/users/icfantv/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2018-04-12T15:10:11Z",
        "updated_at": "2018-04-12T15:10:11Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nNeither, it is a question.\r\n\r\n**What is the current behavior?**\r\n\r\nI was unable to locate where in the react-test-renderer source the tree is created.  The tree created by `create(...).toJSON()` will contain `attributeName={undefined}` on the generated HTML if an optional component property is omitted.  This was confusing to me since React will omit entirely (in the generated HTML), JSX Element attributes whose value is `undefined`.  I wanted to confirm that this was both expected behavior (I assume it is) and to understand why this was the case.  E.g., is it because it's an explicit test that the property is `undefined`?\r\n\r\n**What is the expected behavior?**\r\n\r\nN/A\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact: 16.2\r\nReact Test Renderer: 16.2\r\nBrowser/OS:  N/A\r\nWorked Previously:  N/A",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/12615",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/12615/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/12615/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/12615/events",
        "html_url": "https://github.com/facebook/react/issues/12615",
        "id": 314394404,
        "number": 12615,
        "title": "Unexpected error when hydrating with portal and SSR",
        "user": {
            "login": "majelbstoat",
            "id": 425787,
            "avatar_url": "https://avatars0.githubusercontent.com/u/425787?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/majelbstoat",
            "html_url": "https://github.com/majelbstoat",
            "followers_url": "https://api.github.com/users/majelbstoat/followers",
            "following_url": "https://api.github.com/users/majelbstoat/following{/other_user}",
            "gists_url": "https://api.github.com/users/majelbstoat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/majelbstoat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/majelbstoat/subscriptions",
            "organizations_url": "https://api.github.com/users/majelbstoat/orgs",
            "repos_url": "https://api.github.com/users/majelbstoat/repos",
            "events_url": "https://api.github.com/users/majelbstoat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/majelbstoat/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2018-04-15T07:50:53Z",
        "updated_at": "2018-04-16T13:43:52Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\n*bug*\r\n\r\n**What is the current behavior?**\r\n\r\nGiven the following (simplified) snippet:\r\n\r\n```jsx\r\nclass HoverMenu extends React.Component {\r\n  render() {\r\n    if (typeof document === 'undefined') return null\r\n    const root = document.getElementById('root')\r\n    return ReactDOM.createPortal(<div>Hello World</div>, root)\r\n  }\r\n}\r\n\r\nclass Para extends React.Component {\r\n  render() {\r\n    return (\r\n      <span>\r\n        Some Text\r\n        <HoverMenu />\r\n      </span>\r\n    )\r\n  }\r\n} \r\n```\r\n\r\nwhere `div#root` is a valid `div` that exists, the following error is shown when hydrating after SSR:\r\n\r\n`Warning: Expected server HTML to contain a matching <div> in <span>`\r\n\r\nThe warning goes away if I update the definition of `HoverMenu` to:\r\n\r\n```jsx\r\nclass HoverMenu extends React.Component {\r\n  componentDidMount() {\r\n    this.setState({ isActive: true })\r\n  }\r\n  render() {\r\n    const { isActive} = this.state\r\n    if (!isActive) return null\r\n    const root = document.getElementById('root')\r\n    return ReactDOM.createPortal(<div>Hello World</div>, root)\r\n  }\r\n}\r\n```\r\n\r\nI'd prefer not to do that because of the double rendering caused by `setState` in `componentDidMount`.\r\n\r\nI don't quite understand what that error is telling me. No `<div />` is rendered server-side in either case. The error is particularly confusing, as the `HoverMenu` DOM `div` is not even rendered inside a DOM `span`. (I wonder if this is happening because `HoverMenu` is nested inside a React `span`.)\r\n\r\n**What is the expected behavior?**\r\n\r\nNo error is thrown. Or, at least that the error message is clearer.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nChrome 65\r\nReact 16.2\r\n(SSR through Next 5.1)\r\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/12617",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/12617/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/12617/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/12617/events",
        "html_url": "https://github.com/facebook/react/issues/12617",
        "id": 314464476,
        "number": 12617,
        "title": "Need support for automatic hydration of static server-rendered content.",
        "user": {
            "login": "alexmog2",
            "id": 37539247,
            "avatar_url": "https://avatars2.githubusercontent.com/u/37539247?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/alexmog2",
            "html_url": "https://github.com/alexmog2",
            "followers_url": "https://api.github.com/users/alexmog2/followers",
            "following_url": "https://api.github.com/users/alexmog2/following{/other_user}",
            "gists_url": "https://api.github.com/users/alexmog2/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/alexmog2/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/alexmog2/subscriptions",
            "organizations_url": "https://api.github.com/users/alexmog2/orgs",
            "repos_url": "https://api.github.com/users/alexmog2/repos",
            "events_url": "https://api.github.com/users/alexmog2/events{/privacy}",
            "received_events_url": "https://api.github.com/users/alexmog2/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2018-04-15T23:54:01Z",
        "updated_at": "2018-04-16T04:08:45Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nFeature\r\n\r\n**What is the current behavior?**\r\n\r\nHydrating some server-rendered content can be difficult, inefficient or impossible. For example, in the process of rendering on the server, significant work or additional data may be required for data processing and conversion, such as custom templating or localization. The content can be large too, such as product information or a news article.\r\n \r\nWhen the resulting content is highly dynamic and changes with state, there is no choice but recreate it within React paradigm and recreate it on client. However, complicated server-generated content is often (if not typically) static. Delivering a redundant copy of static content to client just to compare and ignore it during hydration seems a waste of resources and can be prohibitively expensive. \r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nhttps://codesandbox.io/s/zx38ow3z8x\r\n\r\n**What is the expected behavior?**\r\n\r\nInstead of additional complications of recreating it on the client with hydration, wouldn\u2019t it be much easier to just accept the content from server as-is and tell hydrate() to leave it alone?\r\n\r\nThere may be a few options for non-hydrating SSR:\r\n\r\n1. Add a new callback `shouldComponentHydrate()` to disable hydration of component content\r\n```javascript\r\nexport default class NoHydrate extends Component {\r\n    // return false to avoid re-rendering of this component in hydrate()\r\n    shouldComponentHydrate() {\r\n        return false;\r\n    }\r\n    render() {\r\n        // on server, simply render content\r\n        // on client, this is never called and server content is accepted as-is\r\n        return (\r\n            <div>\r\n                {this.props.children}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n```\r\n\r\n2. Access SSR content from DOM in `render()`\r\n_This is probably the worst option, though it is the only one that definitely works currently._\r\n```javascript\r\nexport default class AutoHydrate extends Component {\r\n    render() {\r\n        // on server, simply render content\r\n        // on client, find SSR in dom and re-render using dangerouslySetInnerHTML\r\n        // ** requires a unique id, generated before or during server rendering **\r\n        return (typeof window === 'undefined') ? (\r\n            <div id={this.props.id}>\r\n                {this.props.children}\r\n            </div\r\n        ) : (\r\n            <div id={this.props.id}\r\n                dangerouslySetInnerHTML={{\r\n                    __html: document.getElementById(this.props.id).innerHTML\r\n                }}\r\n            />\r\n        );\r\n    }\r\n}\r\n```\r\n\r\n3. Use `dangerouslySetInnerHTML` with empty content\r\n_It actually works now, but it is not documented that it is supposed to._\r\n```javascript\r\nexport default class Ssr extends Component {\r\n    render() {\r\n        // on server, simply render content\r\n        // on client, render empty content using dangerouslySetInnerHTML,\r\n        // which normally causes a warning of content mismatch and keeps the existing content\r\n        // also add suppressHydrationWarning to turn off the warning.\r\n        return (typeof window === 'undefined') ? (\r\n            <div>\r\n                {this.props.children}\r\n            </div>\r\n        ) : (\r\n            <div\r\n                dangerouslySetInnerHTML={{\r\n                    __html: ''\r\n                }}\r\n                suppressHydrationWarning\r\n            />\r\n        );\r\n    }\r\n}\r\n```\r\n\r\nConsidering that there is a way to make it work now, documenting (3) may be all that needs to happen. However if (1) could be added with same behavior, it would look cleaner.\r\n\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nVersion 16.2. Not sure if the working option 3 has worked before or is supposed to work in future versions.",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/12634",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/12634/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/12634/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/12634/events",
        "html_url": "https://github.com/facebook/react/issues/12634",
        "id": 315263040,
        "number": 12634,
        "title": "Support performance measures in production",
        "user": {
            "login": "stephen",
            "id": 2320890,
            "avatar_url": "https://avatars0.githubusercontent.com/u/2320890?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/stephen",
            "html_url": "https://github.com/stephen",
            "followers_url": "https://api.github.com/users/stephen/followers",
            "following_url": "https://api.github.com/users/stephen/following{/other_user}",
            "gists_url": "https://api.github.com/users/stephen/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/stephen/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/stephen/subscriptions",
            "organizations_url": "https://api.github.com/users/stephen/orgs",
            "repos_url": "https://api.github.com/users/stephen/repos",
            "events_url": "https://api.github.com/users/stephen/events{/privacy}",
            "received_events_url": "https://api.github.com/users/stephen/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2018-04-17T22:22:40Z",
        "updated_at": "2018-04-17T22:38:11Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nRequest a feature.\r\n\r\nI'd like to have access to an API for `performance.mark` / `performance.measure` in a production build of react, so that we can collect timing measurements for real users in the field.\r\n\r\nI suspect performance timing can get expensive, so I am open to suggestions for how to make that nicer/possible.\r\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/12643",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/12643/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/12643/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/12643/events",
        "html_url": "https://github.com/facebook/react/issues/12643",
        "id": 315570142,
        "number": 12643,
        "title": "16 version breaks checkbox onChange",
        "user": {
            "login": "Reaverart",
            "id": 1614962,
            "avatar_url": "https://avatars3.githubusercontent.com/u/1614962?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Reaverart",
            "html_url": "https://github.com/Reaverart",
            "followers_url": "https://api.github.com/users/Reaverart/followers",
            "following_url": "https://api.github.com/users/Reaverart/following{/other_user}",
            "gists_url": "https://api.github.com/users/Reaverart/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Reaverart/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Reaverart/subscriptions",
            "organizations_url": "https://api.github.com/users/Reaverart/orgs",
            "repos_url": "https://api.github.com/users/Reaverart/repos",
            "events_url": "https://api.github.com/users/Reaverart/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Reaverart/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 40929151,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
                "name": "Type: Bug",
                "color": "b60205",
                "default": false
            },
            {
                "id": 710722093,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
                "name": "Type: Needs Investigation",
                "color": "fbca04",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 6,
        "created_at": "2018-04-18T17:20:25Z",
        "updated_at": "2018-05-10T08:33:36Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nA bug\r\n\r\n**What is the current behavior?**\r\nCheckbox not fires onChange for controlled component, it somehow related to global event listeners with setState, see sandbox example.\r\n\r\n**What is the expected behavior?**\r\nCheckbox should fire onChange handler\r\n\r\n**Broken example with REACT 16:**\r\nhttps://codesandbox.io/s/8y6jv95k18\r\n\r\n**Working example with REACT 15 version:**\r\nhttps://codesandbox.io/s/rl3w4nqqzm",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/12670",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/12670/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/12670/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/12670/events",
        "html_url": "https://github.com/facebook/react/issues/12670",
        "id": 316864395,
        "number": 12670,
        "title": "Improve warning message for failure to initialize `state` when using `getDerivedStateFromProps`",
        "user": {
            "login": "yourcelf",
            "id": 21318,
            "avatar_url": "https://avatars3.githubusercontent.com/u/21318?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/yourcelf",
            "html_url": "https://github.com/yourcelf",
            "followers_url": "https://api.github.com/users/yourcelf/followers",
            "following_url": "https://api.github.com/users/yourcelf/following{/other_user}",
            "gists_url": "https://api.github.com/users/yourcelf/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/yourcelf/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/yourcelf/subscriptions",
            "organizations_url": "https://api.github.com/users/yourcelf/orgs",
            "repos_url": "https://api.github.com/users/yourcelf/repos",
            "events_url": "https://api.github.com/users/yourcelf/events{/privacy}",
            "received_events_url": "https://api.github.com/users/yourcelf/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2018-04-23T15:29:28Z",
        "updated_at": "2018-05-04T13:24:25Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nbug\r\n\r\n**What is the current behavior?**\r\n\r\nThe warning for a failure to initialize state when using `getDerivedStateFromProps` is not as clear as it could be.\r\n\r\nThis component produces the warning:\r\n> MyComponent: Did not properly initialize state during construction. Expected state to be an object, but it was undefined.`\r\n\r\n```js\r\nclass MyComponent extends React.Component {\r\n  static getDerivedStateFromProps(nextProps, prevState) {\r\n    return null;\r\n  }\r\n  render() {\r\n    return <span>Foo</span>\r\n  }\r\n}\r\n```\r\n\r\nThe warning can be resolved by adding `state = {}` either in the class definition or the constructor, or by not using `getDerivedStateFromProps`.\r\n\r\nSee https://github.com/reactjs/reactjs.org/issues/796 for more detail on why this warning message can be counter-intuitive.\r\n\r\nSince the [warning is specific](https://github.com/facebook/react/blob/b548b3cd640dbd515f5d67dafc0216bb7ee0d796/packages/react-reconciler/src/ReactFiberClassComponent.js#L509-L510) to the use of `getDerivedStateFromProps` and not triggered by any other state or lifecycle methods, and state initialization isn't required for other state methods like `this.setState`, it would make sense to me to mention `getDerivedStateFromProps` explicitly in the warning.\r\n\r\nHere's a proposal for a new warning message:\r\n> MyComponent: Component state must be initialized when using getDerivedStateFromProps. Expected state to be an object, but it was undefined.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact >= 16.3.0\r\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/12683",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/12683/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/12683/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/12683/events",
        "html_url": "https://github.com/facebook/react/issues/12683",
        "id": 317434558,
        "number": 12683,
        "title": "When unmounting a Fragment node, it's children are removed from the DOM one at a time instead of all at once",
        "user": {
            "login": "madou",
            "id": 6801309,
            "avatar_url": "https://avatars2.githubusercontent.com/u/6801309?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/madou",
            "html_url": "https://github.com/madou",
            "followers_url": "https://api.github.com/users/madou/followers",
            "following_url": "https://api.github.com/users/madou/following{/other_user}",
            "gists_url": "https://api.github.com/users/madou/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/madou/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/madou/subscriptions",
            "organizations_url": "https://api.github.com/users/madou/orgs",
            "repos_url": "https://api.github.com/users/madou/repos",
            "events_url": "https://api.github.com/users/madou/events{/privacy}",
            "received_events_url": "https://api.github.com/users/madou/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 710375792,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
                "name": "Type: Discussion",
                "color": "fef2c0",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2018-04-24T23:54:56Z",
        "updated_at": "2018-04-25T22:01:35Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug (maybe! - or perhaps it's just a limitation of Fragments - let me know!)\r\n\r\n**What is the current behavior?**\r\n\r\nWhen unmounting a Fragment, it's children are removed from the DOM one at time top to bottom.\r\n\r\nThis means if during the unmounting step if I'm quickly calculating where it is in the DOM, its position can change before I can save that data. I also imagine it's less performant.\r\n\r\nLook in your console for the outputs for these.\r\n\r\n**1a) Using Fragment - Element can be found:**\r\nhttps://codesandbox.io/s/k9jl6vo8yv\r\n\r\n**1b) Using Fragment - Element can't be found:**\r\nhttps://codesandbox.io/s/1omjz1m8l\r\n\r\n**2a) Using div - Element can be found (expected behaviour for Fragment):**\r\nhttps://codesandbox.io/s/l34o1kw8m\r\n\r\n**2b) Using div - Element can't be found (when switching out parent with children, with parent with no children):**\r\nhttps://codesandbox.io/s/w02yv3o4zw\r\n\r\n**What is the expected behavior?**\r\n\r\n1) That both the Fragments children would be removed from the DOM at the same time, instead of one after the other.\r\n\r\n2) That both children of the div would be removed from the DOM at the same time when essentially removing the children.\r\n\r\nThese both look like they're part of the same problem.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n16.3, unsure if it worked in previous versions.\r\n\r\n----\r\n\r\nLet me know if I can help with anything :).\r\n\r\nCheers",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/12687",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/12687/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/12687/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/12687/events",
        "html_url": "https://github.com/facebook/react/issues/12687",
        "id": 317585510,
        "number": 12687,
        "title": "Show culprit in `Cannot update during an existing state transition...` ?",
        "user": {
            "login": "lmenus",
            "id": 12529395,
            "avatar_url": "https://avatars2.githubusercontent.com/u/12529395?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/lmenus",
            "html_url": "https://github.com/lmenus",
            "followers_url": "https://api.github.com/users/lmenus/followers",
            "following_url": "https://api.github.com/users/lmenus/following{/other_user}",
            "gists_url": "https://api.github.com/users/lmenus/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/lmenus/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/lmenus/subscriptions",
            "organizations_url": "https://api.github.com/users/lmenus/orgs",
            "repos_url": "https://api.github.com/users/lmenus/repos",
            "events_url": "https://api.github.com/users/lmenus/events{/privacy}",
            "received_events_url": "https://api.github.com/users/lmenus/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 121709921,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2018-04-25T11:23:02Z",
        "updated_at": "2018-04-25T16:02:27Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n*Feature.*\r\n\r\n**What is the current behavior?**\r\nWe are probably all familiar with the following message.\r\n\r\n```\r\nbundle.js:1\r\n\r\nWarning: Cannot update during an existing state transition (such as within `render`\r\nor another component's constructor). Render methods should be a pure function\r\nof props and state; constructor side-effects are an anti-pattern, but can be moved\r\nto `componentWillMount`.\r\n```\r\n\r\nFor those who never came across this message, it can be created simply by mounting the following component.\r\n\r\n```js\r\nclass UpdateDuringRender extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      text: 'initial',\r\n    };\r\n  }\r\n\r\n  updateState(text) {\r\n    this.setState({ text });\r\n  }\r\n\r\n  render() {\r\n    this.updateState('updated!');\r\n\r\n    return (\r\n      <div>\r\n        {this.state.text}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n```\r\n\r\n**What is the expected behavior?**\r\nCan we be more specific which component triggers this warning (I think it could be even treated as an optional error)? When this suddenly appears in the app, sometimes it's tough to find the culprit. Some stack trace or at least the offending component would be helpful in the warning message. Not sure how it's solved internally, but yeah, would be a nice hint to help remove anti-patterns.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n`\"react\": \"^16.3.1\"`",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/12689",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/12689/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/12689/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/12689/events",
        "html_url": "https://github.com/facebook/react/issues/12689",
        "id": 317723596,
        "number": 12689,
        "title": "Cloning the child of a context Consumer produces confusing warning and error",
        "user": {
            "login": "cristianbogdan",
            "id": 6556008,
            "avatar_url": "https://avatars1.githubusercontent.com/u/6556008?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cristianbogdan",
            "html_url": "https://github.com/cristianbogdan",
            "followers_url": "https://api.github.com/users/cristianbogdan/followers",
            "following_url": "https://api.github.com/users/cristianbogdan/following{/other_user}",
            "gists_url": "https://api.github.com/users/cristianbogdan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cristianbogdan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cristianbogdan/subscriptions",
            "organizations_url": "https://api.github.com/users/cristianbogdan/orgs",
            "repos_url": "https://api.github.com/users/cristianbogdan/repos",
            "events_url": "https://api.github.com/users/cristianbogdan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cristianbogdan/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 40929155,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Question",
                "name": "Type: Question",
                "color": "cc317c",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 3,
        "created_at": "2018-04-25T17:30:19Z",
        "updated_at": "2018-04-26T19:07:02Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nthis is a bug, or at least a request for more precise warnings and error messages.\r\n\r\n**What is the current behavior?**\r\n\r\nI was cloning children to add some properties and I overlooked that the context Consumer subtree should  not be cloned...\r\n\r\n```\r\nimport React from 'react';\r\nimport {render} from 'react-dom';\r\n\r\nconst { Provider, Consumer} = React.createContext();\r\n\r\nconst Comp = ({children})=> <Provider>{cloneKids(children)}</Provider>;\r\n\r\nconst cloneKids=(children)=>React.Children.map(children, child =>\r\n\t\t\t\t\t       React.cloneElement(child, child.props,\r\n\t\t\t\t\t\t\t\t  child.props.children&&\r\n\t\t\t\t\t\t\t\t  cloneKids(child.props.children)));\r\nrender(\r\n\t<Comp><Consumer>{console.log}</Consumer></Comp>,\r\n    document.getElementById('root')\r\n);\r\n```\r\n\r\nThe code produces the warning and error introduced with #12241\r\n\r\n> Warning: A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.\r\n\r\nand (even more confusing)\r\n\r\n> TypeError: render is not a function\r\n\r\n**What is the expected behavior?**\r\n\r\nMaybe React.cloneElement should not attempt to clone functions? Whatever it does, the result is not a function.\r\n\r\nThe warning part \"a child that isn't a function\" should be separated from the other warnings. There can't be multiple children and one child that is not a function at the same time, so a more precise warning can be issued.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nTested with react 16.3.0 in Stackblitz/Chrome 65 and react 16.3.2 in Chrome 65 and Firefox 59",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/12695",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/12695/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/12695/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/12695/events",
        "html_url": "https://github.com/facebook/react/issues/12695",
        "id": 317956260,
        "number": 12695,
        "title": "Allow to specify displayName for createContext() providers and consumers",
        "user": {
            "login": "budarin",
            "id": 8055157,
            "avatar_url": "https://avatars2.githubusercontent.com/u/8055157?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/budarin",
            "html_url": "https://github.com/budarin",
            "followers_url": "https://api.github.com/users/budarin/followers",
            "following_url": "https://api.github.com/users/budarin/following{/other_user}",
            "gists_url": "https://api.github.com/users/budarin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/budarin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/budarin/subscriptions",
            "organizations_url": "https://api.github.com/users/budarin/orgs",
            "repos_url": "https://api.github.com/users/budarin/repos",
            "events_url": "https://api.github.com/users/budarin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/budarin/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 121709921,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 3,
        "created_at": "2018-04-26T09:52:26Z",
        "updated_at": "2018-05-15T05:41:54Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nbug\r\n\r\n**What is the current behavior?**\r\nin React tree name of a Context must be like its name in code\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n```js\r\nconst MyContext = React.createContext(null);\r\n```\r\n```js\r\n   <MyContext.Consumer>\r\n   { data => ... }\r\n   </MyContext.Consumer>\r\n```\r\nlet's have a look at React tree in Chrome extention's page\r\n\r\nhere is Context - not MyContext\r\n\r\n**What is the expected behavior?**\r\n\r\nexpexted to see MyContext\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n16.3.2",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/12699",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/12699/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/12699/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/12699/events",
        "html_url": "https://github.com/facebook/react/issues/12699",
        "id": 318080578,
        "number": 12699,
        "title": "Styles via className not reflected in print",
        "user": {
            "login": "ishraqiyun77",
            "id": 33135849,
            "avatar_url": "https://avatars2.githubusercontent.com/u/33135849?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ishraqiyun77",
            "html_url": "https://github.com/ishraqiyun77",
            "followers_url": "https://api.github.com/users/ishraqiyun77/followers",
            "following_url": "https://api.github.com/users/ishraqiyun77/following{/other_user}",
            "gists_url": "https://api.github.com/users/ishraqiyun77/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ishraqiyun77/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ishraqiyun77/subscriptions",
            "organizations_url": "https://api.github.com/users/ishraqiyun77/orgs",
            "repos_url": "https://api.github.com/users/ishraqiyun77/repos",
            "events_url": "https://api.github.com/users/ishraqiyun77/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ishraqiyun77/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 710722093,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
                "name": "Type: Needs Investigation",
                "color": "fbca04",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2018-04-26T15:25:04Z",
        "updated_at": "2018-05-01T17:42:32Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nNot 100% sure, but might be a bug (or just something I'm not doing right). Everything seems to indicate this should work, so that is why I'm thinking a potential bug possibly...?\r\n\r\nBeen trying to get assistance from Stack Overflow, but not getting anywhere:\r\n\r\nhttps://stackoverflow.com/questions/50032041/react-component-loses-formatting-related-to-classname-when-printing-triggered-fr\r\n\r\nhttps://stackoverflow.com/questions/30135387/how-to-print-react-component-on-click-of-a-button/?utm_medium=organic&utm_source=google_rich_qa&utm_campaign=google_rich_qa\r\n\r\n**What is the current behavior?**\r\n\r\nTrying to print content that is in a modal, but external styles (via `className`) are not being passed to it when the print dialog preview is up. However, when done in line (e.g., `style={{ color: 'red' }}`) the styles are reflected.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nI have a repo of use case with directions. I'll work on migrating it to JSFiddle or CodeSandbox if that is better.\r\n\r\nhttps://github.com/ishraqiyun77/react-print-iframe-issue\r\n\r\n**What is the expected behavior?**\r\n\r\nI should still see the styles being applied when using external CSS via `className` when going to print.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact 16.2.0, using Chrome 65.0.3325.181 on Windows 10.0.16299.371 and WSL. Not sure if it worked in previous versions as I have just started on this feature of the web app.",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/12700",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/12700/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/12700/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/12700/events",
        "html_url": "https://github.com/facebook/react/issues/12700",
        "id": 318151699,
        "number": 12700,
        "title": "Calling ReactDOM.render() many many times is slow",
        "user": {
            "login": "walkerburgin",
            "id": 1189357,
            "avatar_url": "https://avatars0.githubusercontent.com/u/1189357?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/walkerburgin",
            "html_url": "https://github.com/walkerburgin",
            "followers_url": "https://api.github.com/users/walkerburgin/followers",
            "following_url": "https://api.github.com/users/walkerburgin/following{/other_user}",
            "gists_url": "https://api.github.com/users/walkerburgin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/walkerburgin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/walkerburgin/subscriptions",
            "organizations_url": "https://api.github.com/users/walkerburgin/orgs",
            "repos_url": "https://api.github.com/users/walkerburgin/repos",
            "events_url": "https://api.github.com/users/walkerburgin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/walkerburgin/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 710722093,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
                "name": "Type: Needs Investigation",
                "color": "fbca04",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 5,
        "created_at": "2018-04-26T18:42:43Z",
        "updated_at": "2018-04-27T18:04:28Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug (?)\r\n\r\n**What is the current behavior?**\r\n\r\nCalling `ReactDOM.render()` many many times seems to have meaningfully worse performance than rendering many elements within a single React root.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\n// Edited to add dev/production builds\r\n+ React 16 (development): https://jsfiddle.net/Luktwrdm/431/\r\n+ React 16 (production): https://jsfiddle.net/Luktwrdm/433/\r\n+ React 15 (development): https://jsfiddle.net/Luktwrdm/432/\r\n\r\n(These examples are obviously pretty contrived)\r\n\r\n**What is the expected behavior?**\r\n\r\nIn a perfect world there wouldn't be such a large performance discrepancy between these two approaches.\r\n\r\nFor context, I'm working with a frontend plugin framework and trying not to expose React (which should ideally be an implementation detail) as part of the plugin interface. \r\n\r\nAn interface like this requires both the host and the plugin to be implemented with React and to share the same instance of React... but is fast and convenient when they do:\r\n\r\n```\r\nrender(props: T): JSX.Element;\r\n```\r\n\r\nAn interface like this treats React as an implementation detail, but is less convenient and (more importantly) incurs the above performance problem:\r\n\r\n```\r\nrender(props:T, element: HTMLElement): void; \r\nunmount(element: HTMLElement): void;\r\n```\r\n\r\nI imagine this use case isn't a high priority for React/ReactDOM, but I'd love to understand a bit better what it is that really causes the performance difference and whether it's likely to ever change. \r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n+ Seems to impact both React 15 & 16 similarly\r\n+ I don't think it's browser dependent\r\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/12712",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/12712/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/12712/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/12712/events",
        "html_url": "https://github.com/facebook/react/issues/12712",
        "id": 318642274,
        "number": 12712,
        "title": "encoded character in table td tags showing as string incorrectly",
        "user": {
            "login": "chen0802",
            "id": 10175710,
            "avatar_url": "https://avatars3.githubusercontent.com/u/10175710?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/chen0802",
            "html_url": "https://github.com/chen0802",
            "followers_url": "https://api.github.com/users/chen0802/followers",
            "following_url": "https://api.github.com/users/chen0802/following{/other_user}",
            "gists_url": "https://api.github.com/users/chen0802/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/chen0802/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/chen0802/subscriptions",
            "organizations_url": "https://api.github.com/users/chen0802/orgs",
            "repos_url": "https://api.github.com/users/chen0802/repos",
            "events_url": "https://api.github.com/users/chen0802/events{/privacy}",
            "received_events_url": "https://api.github.com/users/chen0802/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 620368407,
                "url": "https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information",
                "name": "Resolution: Needs More Information",
                "color": "fffde7",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 3,
        "created_at": "2018-04-28T14:45:37Z",
        "updated_at": "2018-05-02T23:17:02Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "Encoded characters for example `&pound;`, `&#36;` can not show as \u00a3, $ if adding it into `<td>`. These characters are fine if put it into h1 tag for example as long as outside of table.\r\n\r\n```js\r\n<tr>\r\n   <th scope=\"row\">1</th>\r\n   <td>USD</td>\r\n   <td>&#36;</td>\r\n   <td>United States Dollar</td>\r\n   <td>9,120.6025</td>\r\n   <td>9120.6025</td>\r\n</tr>\r\n```",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/12713",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/12713/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/12713/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/12713/events",
        "html_url": "https://github.com/facebook/react/issues/12713",
        "id": 318652532,
        "number": 12713,
        "title": "Reconciliation has bug that is occured when client starts hydration",
        "user": {
            "login": "cheolheon",
            "id": 38815423,
            "avatar_url": "https://avatars2.githubusercontent.com/u/38815423?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cheolheon",
            "html_url": "https://github.com/cheolheon",
            "followers_url": "https://api.github.com/users/cheolheon/followers",
            "following_url": "https://api.github.com/users/cheolheon/following{/other_user}",
            "gists_url": "https://api.github.com/users/cheolheon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cheolheon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cheolheon/subscriptions",
            "organizations_url": "https://api.github.com/users/cheolheon/orgs",
            "repos_url": "https://api.github.com/users/cheolheon/repos",
            "events_url": "https://api.github.com/users/cheolheon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cheolheon/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 710722093,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
                "name": "Type: Needs Investigation",
                "color": "fbca04",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2018-04-28T17:02:34Z",
        "updated_at": "2018-05-02T13:01:08Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nbug\r\n\r\n**What is the current behavior?**\r\n```jsx\r\n// Static.js\r\nimport React from 'react'\r\n\r\nfunction Static() {\r\n  return (\r\n    <div className=\"i am static\" style={{ backgroundColor: 'red', width: '100%', height: '300px' }}>\r\n      Static\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Static\r\n```\r\n\r\n```jsx\r\n// Dynamic.js\r\nimport React from 'react'\r\n\r\nfunction Dynamic() {\r\n  return (\r\n    <div className=\"i am dynamic\" style={{ backgroundColor: 'blue', width: '100%', height: '300px' }}>\r\n      Dynamic\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Dynamic\r\n```\r\n\r\n```jsx\r\n// App.js\r\nimport React from 'react'\r\nimport Static from './Static'\r\nimport Dynamic from './Dynamic'\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    \r\n    this.mounted = false\r\n    this.state = {\r\n      loaded: !isBrowser\r\n    }\r\n\r\n    if (isBrowser) {\r\n      new Promise((resolve) => {\r\n        setTimeout(() => {\r\n          const nextState = {\r\n            loaded: true\r\n          }\r\n          if (this.mounted) {\r\n            this.setState(nextState)\r\n          } else {\r\n            this.state = nextState\r\n          }\r\n        }, 200)\r\n      })\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.mounted = true\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.state.loaded ? <Dynamic /> : null}\r\n        <Static />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App\r\n```\r\nFirst, Server sends React App without any asynchronous component loading.\r\n\r\nSecond, Client starts hydration with loading `<Dynamic />` component asynchronously.\r\n(In our real production, We used code splitting with webpack and loaded it with `import()`. In this example, I just controlled `loaded` state for making app simple.)\r\nDuring `<Dynamic />` is being loaded, App renders `null` instead.\r\n\r\nFinally, Let's see the result.\r\n\r\n<img width=\"345\" alt=\"screen shot 2018-04-29 at 1 43 47 am\" src=\"https://user-images.githubusercontent.com/38815423/39398838-f0960c84-4b4e-11e8-90f5-1b6c3a48bb08.png\">\r\n\r\nWhy `background-color` of `<Static />` component is changed to **blue**?\r\n\r\n<img width=\"581\" alt=\"screen shot 2018-04-29 at 1 47 50 am\" src=\"https://user-images.githubusercontent.com/38815423/39398898-ac9d4726-4b4f-11e8-84d4-3cb131d978f4.png\">\r\n\r\n`<Dynamic />` took `<Static />` for dinner.\r\n\r\nAFAIK, React don't touch the result of client rendering if it is different with server html.\r\nWhen I moved to another page through client-side routes I cannot find this situation.\r\n\r\nSo, I guess it occurs only when client hydrates the result of server-side rendering .\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nYou can check it easily with https://github.com/cheolheon/react-16-reconciliation-bug \r\nClone it, run `yarn`, `yarn start`, and open `http://localhost:3000`.\r\n\r\n**What is the expected behavior?**\r\n<img width=\"345\" alt=\"screen shot 2018-04-29 at 1 44 08 am\" src=\"https://user-images.githubusercontent.com/38815423/39398973-bd7690ba-4b50-11e8-88fa-523de54ce96e.png\">\r\n\r\n<img width=\"583\" alt=\"screen shot 2018-04-29 at 1 57 42 am\" src=\"https://user-images.githubusercontent.com/38815423/39398976-c334e678-4b50-11e8-9324-809b75f89329.png\">\r\n\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact 16.3.2\r\nBrowser: Chrome (Safari too.)\r\nOS: MacOS (Windows or Linux too.)\r\n\r\nReact 15 works well without any bug.\r\nCheck it at https://github.com/cheolheon/react-16-reconciliation-bug/tree/react-15/src\r\n(`react-15` branch)",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/12717",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/12717/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/12717/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/12717/events",
        "html_url": "https://github.com/facebook/react/issues/12717",
        "id": 318721365,
        "number": 12717,
        "title": "onMouseDown causes splash on real ios browsers",
        "user": {
            "login": "huhaixiao",
            "id": 11453698,
            "avatar_url": "https://avatars2.githubusercontent.com/u/11453698?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/huhaixiao",
            "html_url": "https://github.com/huhaixiao",
            "followers_url": "https://api.github.com/users/huhaixiao/followers",
            "following_url": "https://api.github.com/users/huhaixiao/following{/other_user}",
            "gists_url": "https://api.github.com/users/huhaixiao/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/huhaixiao/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/huhaixiao/subscriptions",
            "organizations_url": "https://api.github.com/users/huhaixiao/orgs",
            "repos_url": "https://api.github.com/users/huhaixiao/repos",
            "events_url": "https://api.github.com/users/huhaixiao/events{/privacy}",
            "received_events_url": "https://api.github.com/users/huhaixiao/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 710722093,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
                "name": "Type: Needs Investigation",
                "color": "fbca04",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2018-04-29T14:27:00Z",
        "updated_at": "2018-05-01T17:37:05Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\n*bug*\r\n\r\n**What is the current behavior?**\r\n\r\nunexpected **grey splash** caused by `onMouseDown` on real ios device's browsers, both safari and chrome.\r\n[Please checkout this **grey splash** issue first](https://github.com/mui-org/material-ui/issues/11154)\r\nI did some trial later, and find out that vanilla html `<button onmousedown=\"\">btn</button>` doesn't cause **grey splash**, but with React's jsx `<button onMouseDown={()=>{}}></button>`, there is a noticeable **grey splash**\r\n\r\n**What is the expected behavior?**\r\n\r\nwho wants a splash?\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n\"react\": \"^16.3.2\"\r\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/12735",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/12735/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/12735/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/12735/events",
        "html_url": "https://github.com/facebook/react/issues/12735",
        "id": 319695368,
        "number": 12735,
        "title": "Use and set a component's state within setInterval function",
        "user": {
            "login": "npasqua",
            "id": 4801537,
            "avatar_url": "https://avatars2.githubusercontent.com/u/4801537?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/npasqua",
            "html_url": "https://github.com/npasqua",
            "followers_url": "https://api.github.com/users/npasqua/followers",
            "following_url": "https://api.github.com/users/npasqua/following{/other_user}",
            "gists_url": "https://api.github.com/users/npasqua/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/npasqua/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/npasqua/subscriptions",
            "organizations_url": "https://api.github.com/users/npasqua/orgs",
            "repos_url": "https://api.github.com/users/npasqua/repos",
            "events_url": "https://api.github.com/users/npasqua/events{/privacy}",
            "received_events_url": "https://api.github.com/users/npasqua/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 40929155,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Question",
                "name": "Type: Question",
                "color": "cc317c",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 3,
        "created_at": "2018-05-02T20:12:18Z",
        "updated_at": "2018-05-19T14:57:24Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "This is a question, so I apologize if this isn't the best place to ask.\r\nI'm trying to work with a component's internal state within a setInterval function and I know there are some asynchronous problems I need to be aware of. I also know that I can pass setState a function which would help me protect against async problems... but I can't because I need to use the changed state within the setInterval function? Is what I'm doing safe or should I be working a different way around this problem.\r\n\r\nI've seen the following that nearly answers my question and am having trouble visualizing / adapting this (or maybe the behavior I have is fine?):\r\n[Stackoverflow Answer](https://stackoverflow.com/questions/43428456/do-i-need-to-use-setstatefunction-overload-in-this-case?utm_medium=organic&utm_source=google_rich_qa&utm_campaign=google_rich_qa)\r\n```\r\nsectionTimerHandler = () => {\r\n    const elapsedSectionTimeMs = this.state.elapsedSectionTimeMs + 1000;\r\n    // Do some stuff with elapsedSectionTimeMs\r\n    this.setState({elapsedSectionTimeMs});\r\n}\r\n\r\nrestartSectionTimer = () => {\r\n    if (this.sectionTimeIntervalId !== 0) {\r\n        window.clearInterval(this.sectionTimeIntervalId);\r\n    }\r\n    this.sectionTimeIntervalId = window.setInterval(this.sectionTimerHandler, 1000);\r\n    this.setState({ elapsedSectionTimeMs: 0 });\r\n}\r\n```\r\n\r\nor would something like the following be better/safer even though I'm using `this.state.elapsedSectionTimeMs + 1000` earlier in the function?\r\n\r\n```\r\n this.setState((prevState: AssessmentState) => {\r\n      return {\r\n          elapsedSectionTimeMs: prevState.elapsedSectionTimeMs + 1000\r\n      };\r\n});\r\n```",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/12737",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/12737/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/12737/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/12737/events",
        "html_url": "https://github.com/facebook/react/issues/12737",
        "id": 319831452,
        "number": 12737,
        "title": "[create-react-class] missing a interface that as constructor in es6 class",
        "user": {
            "login": "dexbol",
            "id": 44263,
            "avatar_url": "https://avatars0.githubusercontent.com/u/44263?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dexbol",
            "html_url": "https://github.com/dexbol",
            "followers_url": "https://api.github.com/users/dexbol/followers",
            "following_url": "https://api.github.com/users/dexbol/following{/other_user}",
            "gists_url": "https://api.github.com/users/dexbol/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dexbol/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dexbol/subscriptions",
            "organizations_url": "https://api.github.com/users/dexbol/orgs",
            "repos_url": "https://api.github.com/users/dexbol/repos",
            "events_url": "https://api.github.com/users/dexbol/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dexbol/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 4,
        "created_at": "2018-05-03T08:38:20Z",
        "updated_at": "2018-05-04T02:07:16Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nFeature.\r\n\r\n**What is the current behavior?**\r\n\r\nReact deprecated `compoentWillMount` liftcycle method from 16.3.0 released.\r\nBut I used to define compoent's properties like **`this._ref = React.createRef()`** in `componentWillMount` method.\r\n\r\nSo, where could I define the properties like above if I use create-react-class from now on?\r\n\r\n**What is the expected behavior?**\r\n\r\nWhat about add a interface named constructor for create-react-class ?",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/12748",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/12748/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/12748/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/12748/events",
        "html_url": "https://github.com/facebook/react/issues/12748",
        "id": 320497617,
        "number": 12748,
        "title": "warning message recommends using soon deprecated lifecycle methods",
        "user": {
            "login": "iliran11",
            "id": 24987188,
            "avatar_url": "https://avatars2.githubusercontent.com/u/24987188?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/iliran11",
            "html_url": "https://github.com/iliran11",
            "followers_url": "https://api.github.com/users/iliran11/followers",
            "following_url": "https://api.github.com/users/iliran11/following{/other_user}",
            "gists_url": "https://api.github.com/users/iliran11/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/iliran11/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/iliran11/subscriptions",
            "organizations_url": "https://api.github.com/users/iliran11/orgs",
            "repos_url": "https://api.github.com/users/iliran11/repos",
            "events_url": "https://api.github.com/users/iliran11/events{/privacy}",
            "received_events_url": "https://api.github.com/users/iliran11/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 40929151,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
                "name": "Type: Bug",
                "color": "b60205",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2018-05-05T10:16:23Z",
        "updated_at": "2018-05-06T10:24:36Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact 16.3.1\r\n\r\n**What is the current behavior?**\r\nWarning message recommends using  soon to-be deprecated lifecycle method - `componentWillMount`\r\n\r\n_Warning Content:_ \r\n`Warning: Cannot update during an existing state transition (such as within `render` or another component's constructor). Render methods should be a pure function of props and state; constructor side-effects are an anti-pattern, but can be moved to `componentWillMount`.\r\n`\r\n**What is the expected behavior?**\r\nwarning messages should be inline with deprecation plans.\r\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/12749",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/12749/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/12749/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/12749/events",
        "html_url": "https://github.com/facebook/react/issues/12749",
        "id": 320516537,
        "number": 12749,
        "title": "IE 11/Edge \"prompt to remember password\" regression bug since 15.2.0",
        "user": {
            "login": "luisrudge",
            "id": 941075,
            "avatar_url": "https://avatars3.githubusercontent.com/u/941075?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/luisrudge",
            "html_url": "https://github.com/luisrudge",
            "followers_url": "https://api.github.com/users/luisrudge/followers",
            "following_url": "https://api.github.com/users/luisrudge/following{/other_user}",
            "gists_url": "https://api.github.com/users/luisrudge/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/luisrudge/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/luisrudge/subscriptions",
            "organizations_url": "https://api.github.com/users/luisrudge/orgs",
            "repos_url": "https://api.github.com/users/luisrudge/repos",
            "events_url": "https://api.github.com/users/luisrudge/events{/privacy}",
            "received_events_url": "https://api.github.com/users/luisrudge/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 710722093,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
                "name": "Type: Needs Investigation",
                "color": "fbca04",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2018-05-05T15:09:17Z",
        "updated_at": "2018-05-15T12:16:40Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "This issue was [already raised](https://github.com/facebook/react/issues/7328), but since it was closed, I'm opening a new one so we can get more traction on this.\r\n\r\nI'm still having this issue with both IE and Edge:\r\n\r\nWorks with 15.1.0: https://codesandbox.io/s/lpvz0zy9wq\r\nDoesn't work with 15.2.0: https://codesandbox.io/s/o9kl2jzo1q\r\nDoesn't work with 15.6.2: https://codesandbox.io/s/38kp95wl96\r\nDoesn't work with 16.3.1: https://codesandbox.io/s/xjpk3wr55p\r\n\r\nIn order to test this effectively, you have to follow a few steps:\r\n\r\n### Using Edge, go to **Settings** >> **View Advanced Settings**, under **Privacy and Services**\r\n\r\n- make sure you have **Offer to save passwords** enabled:\r\n![image](https://user-images.githubusercontent.com/941075/38700796-9c04a542-3e72-11e8-9aa5-b7e068c300b3.png)\r\n\r\n- make sure you don't have any passwords saved in the codesandbox.io domain:\r\n![image](https://user-images.githubusercontent.com/941075/38700921-ee497666-3e72-11e8-8b27-8e64fb6a4e2e.png)\r\n\r\n\r\n## Steps to reproduce when IT WORKS (15.1.0)\r\n\r\n- go to the [15.1.0](https://codesandbox.io/s/lpvz0zy9wq) sandbox\r\n- type a username and a password and hit submit\r\n- you'll see a confirmation panel about saving passwords:\r\n![image](https://user-images.githubusercontent.com/941075/38701037-409fdc70-3e73-11e8-8997-ec8ecc082163.png)\r\n- refresh the page\r\n- type another username and a password and hit submit\r\n- you'll see another confirmation panel about saving passwords:\r\n![image](https://user-images.githubusercontent.com/941075/38701037-409fdc70-3e73-11e8-8997-ec8ecc082163.png)\r\n- refresh the page\r\n- click on the first input\r\n- you'll see a list of the previously used usernames: ![image](https://user-images.githubusercontent.com/941075/38701545-8b5e1e2e-3e74-11e8-932a-ccf18b6a07fc.png)\r\n\r\n## Steps to reproduce when IT DOESN'T WORK (15.2.0, 15.6.2, 16.3.1)\r\n\r\n- remove previously saved passwords from the codesandbox.io domain:\r\n![image](https://user-images.githubusercontent.com/941075/38700921-ee497666-3e72-11e8-8b27-8e64fb6a4e2e.png) \r\n- go to any of the non-working sandboxes ([15.2.0](https://codesandbox.io/s/o9kl2jzo1q), [15.6.2](https://codesandbox.io/s/38kp95wl96), [16.3.1](https://codesandbox.io/s/xjpk3wr55p)\r\n- type a username and a password and hit submit\r\n- there will be no password confirmation panel\r\n- refresh the page\r\n- click on the first input\r\n- there will be no list of previously used usernames",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/12753",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/12753/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/12753/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/12753/events",
        "html_url": "https://github.com/facebook/react/issues/12753",
        "id": 320676526,
        "number": 12753,
        "title": "Expose a way of creating a ReactTestInstance for React DOM nodes",
        "user": {
            "login": "petegleeson",
            "id": 1969329,
            "avatar_url": "https://avatars3.githubusercontent.com/u/1969329?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/petegleeson",
            "html_url": "https://github.com/petegleeson",
            "followers_url": "https://api.github.com/users/petegleeson/followers",
            "following_url": "https://api.github.com/users/petegleeson/following{/other_user}",
            "gists_url": "https://api.github.com/users/petegleeson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/petegleeson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/petegleeson/subscriptions",
            "organizations_url": "https://api.github.com/users/petegleeson/orgs",
            "repos_url": "https://api.github.com/users/petegleeson/repos",
            "events_url": "https://api.github.com/users/petegleeson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/petegleeson/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 121709921,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2018-05-07T05:18:39Z",
        "updated_at": "2018-05-07T13:00:19Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nI would like to request a new feature. \r\n\r\n**What is the current behavior?**\r\nAt the moment there is no way to create an instance of a `ReactTestInstance`. I would love to be able to do something like:\r\n\r\n```js\r\nconst div = document.createElement('div');\r\nconst componentRef = ReactDOM.render(<MyComponentUnderTest />, div); // or renderIntoDocument\r\nconst testInstance = new ReactTestInstance(componentRef);\r\n// now I can run queries using the API of ReactTestInstance\r\n// against a component tree that has been fully DOM rendered\r\ntestInstance.findAll(..)\r\ntestInstance.children.forEach(() => {});\r\ntestInstance.parent\r\n```\r\n\r\n**Why?**\r\nLibraries such as [Enzyme](https://github.com/airbnb/enzyme) can be used to test React components by [full DOM rendering](http://airbnb.io/enzyme/docs/api/mount.html) and providing an API to find components and get information about them.\r\n\r\nAs far as I know, there is no way of querying the component tree created by `ReactDOM.render` without relying on the internals of React nodes. This means that Enzyme, in order to support full DOM rendering and it's querying API, it has to interact with React nodes directly. This reliance causes problems in Enzyme whenever React adds a new node type (forwardRef, ContextProvider/Consumer for example).\r\n\r\nI have started [this RFC](https://github.com/airbnb/enzyme/issues/1648) that proposes that Enzyme uses `ReactTestWrapper` from `react-test-renderer` as a layer on top of React node objects. This allows the library to be decoupled from the internals of React. The solution proposed in the RFC relies on the being able to create a `ReactTestInstance` from a `ReactDOM.render` component tree.\r\n\r\nPlease let me know if this is something you would consider \ud83d\ude04 ",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/12762",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/12762/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/12762/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/12762/events",
        "html_url": "https://github.com/facebook/react/issues/12762",
        "id": 321098249,
        "number": 12762,
        "title": "Cursor jumps to end of input when onChange returns an unchanged value",
        "user": {
            "login": "danielrob",
            "id": 5865302,
            "avatar_url": "https://avatars2.githubusercontent.com/u/5865302?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/danielrob",
            "html_url": "https://github.com/danielrob",
            "followers_url": "https://api.github.com/users/danielrob/followers",
            "following_url": "https://api.github.com/users/danielrob/following{/other_user}",
            "gists_url": "https://api.github.com/users/danielrob/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/danielrob/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/danielrob/subscriptions",
            "organizations_url": "https://api.github.com/users/danielrob/orgs",
            "repos_url": "https://api.github.com/users/danielrob/repos",
            "events_url": "https://api.github.com/users/danielrob/events{/privacy}",
            "received_events_url": "https://api.github.com/users/danielrob/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 121709921,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2018-05-08T08:54:03Z",
        "updated_at": "2018-05-11T22:41:38Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "[Edit]: **I'm asking for a feature**.\r\n\r\n**Current Behaviour**\r\nAn input `onChange` function that returns a value equalling the prior value causes the cursor to jump to the end of the input. This is the same as [this comment from #995](https://github.com/facebook/react/issues/955#issuecomment-327069204) formally raised as a feature request. \r\n\r\nRepro sandbox: https://codesandbox.io/s/n4k3yx47j\r\nThat same code:  \r\n```javascript\r\nimport React from \"react\";\r\nimport { render } from \"react-dom\";\r\n\r\nclass Input extends React.Component {\r\n  state = { value: \"TypeANumber\" };\r\n\r\n  onChange = e => {\r\n    let nextValue = e.target.value;\r\n\r\n    if (/[0-9]/.test(nextValue)) {\r\n      nextValue = this.state.value;\r\n    }\r\n    this.setState({ value: nextValue });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <input\r\n        type=\"text\"\r\n        value={this.state.value}\r\n        onChange={this.onChange}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nrender(<Input />, document.getElementById(\"root\"));\r\n```\r\n\r\n**What is the expected behavior?**\r\nI'd like the cursor not to jump in the special case where the returned changed value is a rejected change i.e. the 'noop' change. \r\n\r\nI understand fully that react cannot predict cursor position if the value is _changed_ in `onChange`, ~however I cannot currently find an npm module that allows free-length regex filters (vs a fixed length mask)~ or a way to implement a filter myself, without the cursor jumping in this case. \r\n\r\n[Edit]: \r\nSince raising I now fully see this as a feature request for handling a special case of a behaviour that indeed is not a bug, differently. It would be a nice to have as it would allow very straightforward implementation of filters. \r\n\r\nRegarding the non-clarity of how to deal with the general case of non-jumping cursors I think a modernized best practice example would be ideal, but that discussion still lives at #955.  \r\n\r\nI'd be totally fine with this issue being closed by assisting instead with the education of handling the general case. Though, this would still be a nice to have for the API, if possible. \r\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/12763",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/12763/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/12763/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/12763/events",
        "html_url": "https://github.com/facebook/react/issues/12763",
        "id": 321131535,
        "number": 12763,
        "title": "`priorFocusedElem.focus()` throws in IE11",
        "user": {
            "login": "kristiandupont",
            "id": 847742,
            "avatar_url": "https://avatars2.githubusercontent.com/u/847742?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/kristiandupont",
            "html_url": "https://github.com/kristiandupont",
            "followers_url": "https://api.github.com/users/kristiandupont/followers",
            "following_url": "https://api.github.com/users/kristiandupont/following{/other_user}",
            "gists_url": "https://api.github.com/users/kristiandupont/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/kristiandupont/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/kristiandupont/subscriptions",
            "organizations_url": "https://api.github.com/users/kristiandupont/orgs",
            "repos_url": "https://api.github.com/users/kristiandupont/repos",
            "events_url": "https://api.github.com/users/kristiandupont/events{/privacy}",
            "received_events_url": "https://api.github.com/users/kristiandupont/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2018-05-08T10:34:22Z",
        "updated_at": "2018-05-08T13:09:48Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nWe have an `onClick` handler on an SVG element. The handler sets a state property that causes the element to be hidden (via CSS). This makes IE11 throw on this line: \r\nhttps://github.com/facebook/react/blob/52eb59dda2eb0d9afe3a18aacd6142c1d2f7ee25/packages/react-dom/src/client/ReactInputSelection.js#L72\r\n\r\nIt seems that #11800 removed a try/catch protection for this. \r\n\r\nI am working around the problem by stubbing focus like this:\r\n```javascript\r\nif (typeof SVGElement.prototype.focus === 'undefined') { SVGElement.prototype.focus = function () {}; }\r\n```\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nWorked in 16.2.2",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/12765",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/12765/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/12765/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/12765/events",
        "html_url": "https://github.com/facebook/react/issues/12765",
        "id": 321205235,
        "number": 12765,
        "title": "defaultChecked prop sets only checked attribute",
        "user": {
            "login": "klintmane",
            "id": 9338536,
            "avatar_url": "https://avatars0.githubusercontent.com/u/9338536?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/klintmane",
            "html_url": "https://github.com/klintmane",
            "followers_url": "https://api.github.com/users/klintmane/followers",
            "following_url": "https://api.github.com/users/klintmane/following{/other_user}",
            "gists_url": "https://api.github.com/users/klintmane/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/klintmane/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/klintmane/subscriptions",
            "organizations_url": "https://api.github.com/users/klintmane/orgs",
            "repos_url": "https://api.github.com/users/klintmane/repos",
            "events_url": "https://api.github.com/users/klintmane/events{/privacy}",
            "received_events_url": "https://api.github.com/users/klintmane/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2018-05-08T14:15:22Z",
        "updated_at": "2018-05-09T10:56:26Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "#### Type\r\n`inconsistency` for common use cases.\r\n`bug` for projects relying on correct DOM emissions.\r\n\r\n#### Description\r\nIt's unclear to me if the following is a known issue or not.\r\nTake in consideration the snippet below:\r\n```jsx\r\n<input type=\"checkbox\" defaultChecked={true} />\r\n```\r\n#### Current Behavior\r\nSetting the `defaultValue` prop on inputs of other types sets both the `value` and `defaultValue` attribute on the DOM element.\r\n\r\nWhen setting the `defaultChecked` prop on inputs of type `checkbox` only the `checked` attribute is correctly set, leaving the `defaultChecked` attribute unchanged.\r\n\r\n#### Expected Behaviour\r\nLike mentioned above, the expected behavior would be for the `defaultChecked` prop to set both the `checked` and `defaultChecked` attributes on the corresponding DOM node (like it's the case with the `defaultValue` prop).\r\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/12796",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/12796/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/12796/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/12796/events",
        "html_url": "https://github.com/facebook/react/issues/12796",
        "id": 322653441,
        "number": 12796,
        "title": "react-art + React Context API is not working correctly",
        "user": {
            "login": "lavrton",
            "id": 1443320,
            "avatar_url": "https://avatars0.githubusercontent.com/u/1443320?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/lavrton",
            "html_url": "https://github.com/lavrton",
            "followers_url": "https://api.github.com/users/lavrton/followers",
            "following_url": "https://api.github.com/users/lavrton/following{/other_user}",
            "gists_url": "https://api.github.com/users/lavrton/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/lavrton/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/lavrton/subscriptions",
            "organizations_url": "https://api.github.com/users/lavrton/orgs",
            "repos_url": "https://api.github.com/users/lavrton/repos",
            "events_url": "https://api.github.com/users/lavrton/events{/privacy}",
            "received_events_url": "https://api.github.com/users/lavrton/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 3,
        "created_at": "2018-05-14T02:27:42Z",
        "updated_at": "2018-05-24T13:14:48Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n**What is the current behavior?**\r\n\r\nWhen you use `react-art` rendrer, the `Consumer` is picking up the default value defined by the initial creation of the context rather than the values provided by Provider.\r\n\r\nActual behabiour: `Shape` has `y = 10` (initial value).\r\n\r\n```javascript\r\nimport React from \"react\";\r\nimport { render } from \"react-dom\";\r\nvar ReactART = require(\"react-art\");\r\nvar Group = ReactART.Group;\r\nvar Shape = ReactART.Shape;\r\nvar Surface = ReactART.Surface;\r\n\r\nvar RED_DOT_PATH =\r\n  \"M12.5,17 C16.0898511,17 19,14.0898511 19,10.5 C19,6.91014895 16.0898511,4 12.5,4 C8.91014895,4 6,6.91014895 6,10.5 C6,14.0898511 8.91014895,17 12.5,17 Z M12.5,17\";\r\n\r\nconst { Consumer, Provider } = React.createContext({ x: 0, y: 10 });\r\n\r\nconst App = () => (\r\n  <Provider value={{ x: 0, y: 100 }}>\r\n    <Surface width={700} height={700}>\r\n      <Consumer>\r\n        {({ x, y }) => {\r\n          return <Shape x={x} y={y} fill=\"#D97B76\" d={RED_DOT_PATH} />;\r\n        }}\r\n      </Consumer>\r\n    </Surface>\r\n  </Provider>\r\n);\r\n\r\nrender(<App />, document.getElementById(\"root\"));\r\n```\r\n\r\nDemo: https://codesandbox.io/s/llx6kv6527\r\n\r\n**What is the expected behavior?**\r\n\r\n`Shape` should have `y = 100` (provided value).\r\n\r\nv16.3.2 for `react`, `react-dom` and `react-art `\r\n\r\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/12803",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/12803/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/12803/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/12803/events",
        "html_url": "https://github.com/facebook/react/issues/12803",
        "id": 323001915,
        "number": 12803,
        "title": "Can the componentDidCatch method be called via react-test-renderer",
        "user": {
            "login": "davewthompson",
            "id": 8289099,
            "avatar_url": "https://avatars1.githubusercontent.com/u/8289099?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/davewthompson",
            "html_url": "https://github.com/davewthompson",
            "followers_url": "https://api.github.com/users/davewthompson/followers",
            "following_url": "https://api.github.com/users/davewthompson/following{/other_user}",
            "gists_url": "https://api.github.com/users/davewthompson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/davewthompson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/davewthompson/subscriptions",
            "organizations_url": "https://api.github.com/users/davewthompson/orgs",
            "repos_url": "https://api.github.com/users/davewthompson/repos",
            "events_url": "https://api.github.com/users/davewthompson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/davewthompson/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2018-05-14T22:19:25Z",
        "updated_at": "2018-05-14T22:19:25Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nMay I request a feature?\r\n\r\n**What is the current behavior?**\r\ncomponentDidCatch is not handled by the _react-test-renderer_\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\n**What is the expected behavior?**\r\nWe'd like to test our componentDidCatch handler inside Jest and Enzyme. Is there any way we could make the behaviour of the componentDidCatch handler configurable?\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nLatest version of both React and the Enzyme framework.",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/12811",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/12811/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/12811/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/12811/events",
        "html_url": "https://github.com/facebook/react/issues/12811",
        "id": 323077857,
        "number": 12811,
        "title": "Provide ways to do post-mortem analysis of \u201cMaximum update depth exceeded\u201d error in production.",
        "user": {
            "login": "dtinth",
            "id": 193136,
            "avatar_url": "https://avatars3.githubusercontent.com/u/193136?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dtinth",
            "html_url": "https://github.com/dtinth",
            "followers_url": "https://api.github.com/users/dtinth/followers",
            "following_url": "https://api.github.com/users/dtinth/following{/other_user}",
            "gists_url": "https://api.github.com/users/dtinth/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dtinth/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dtinth/subscriptions",
            "organizations_url": "https://api.github.com/users/dtinth/orgs",
            "repos_url": "https://api.github.com/users/dtinth/repos",
            "events_url": "https://api.github.com/users/dtinth/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dtinth/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2018-05-15T06:05:14Z",
        "updated_at": "2018-05-15T06:29:23Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nFeature\r\n\r\n**What is the current behavior?**\r\nOur error logging systems has been reporting this error in production: \u201cMaximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.\u201d\r\n\r\nHowever, we can\u2019t reliably reproduce this error and it only affects a small percentage of our users. Moreover, we have more than 1,000 in-house components and several third-party components. So, it\u2019s impractical to audit every single component to find out what caused it.\r\n\r\n**What is the expected behavior?**\r\nIt would be much easier for us to debug if, when the nested update count exceeds 1,000 (current NESTED_UPDATE_LIMIT), we could see what components are involved in this nested update chain.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nWe are using React 16.3.1.",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/12815",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/12815/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/12815/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/12815/events",
        "html_url": "https://github.com/facebook/react/issues/12815",
        "id": 323162667,
        "number": 12815,
        "title": "renderToStaticMarkup output has inconsistent attributes case",
        "user": {
            "login": "sergeybekrin",
            "id": 9248479,
            "avatar_url": "https://avatars0.githubusercontent.com/u/9248479?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sergeybekrin",
            "html_url": "https://github.com/sergeybekrin",
            "followers_url": "https://api.github.com/users/sergeybekrin/followers",
            "following_url": "https://api.github.com/users/sergeybekrin/following{/other_user}",
            "gists_url": "https://api.github.com/users/sergeybekrin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sergeybekrin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sergeybekrin/subscriptions",
            "organizations_url": "https://api.github.com/users/sergeybekrin/orgs",
            "repos_url": "https://api.github.com/users/sergeybekrin/repos",
            "events_url": "https://api.github.com/users/sergeybekrin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sergeybekrin/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2018-05-15T10:43:08Z",
        "updated_at": "2018-05-15T12:43:38Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\nHey there! It seems to be minor issue for web, since browsers normalises attribute cases on their end, but e.g. it is a major issue for email-targeted markup which results in buggy behaviour across some clients.\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nPotential Bug\r\n\r\n**What is the current behavior?**\r\n\r\nSome attribute names are converted to lowercase, and some are not:\r\n```js\r\nimport React from \"react\";\r\nimport { renderToStaticMarkup } from \"react-dom/server\";\r\n\r\n// Sample use-case, not an actual code\r\n// Notice that first 3 props are lowercased in result, but next 3 are not\r\nconsole.log(\r\n  renderToStaticMarkup(\r\n    <table\r\n      contentEditable\r\n      tabIndex=\"1\" \r\n      autoFocus\r\n      autoCapitalize=\"true\"\r\n      cellPadding={10}\r\n      cellSpacing={10}\r\n    />\r\n  )\r\n);\r\n```\r\n\r\nCode above outputs next result:\r\n\r\n```html\r\n<table contenteditable=\"true\" tabindex=\"1\" autofocus=\"\" autoCapitalize=\"true\" cellPadding=\"10\" cellSpacing=\"10\"></table> \r\n```\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\n[![Edit r4q3kkmq9p](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/r4q3kkmq9p)\r\n\r\n**What is the expected behavior?**\r\nAll attribute names are lowercased, e.g.:\r\n\r\n```html\r\n<table contenteditable=\"true\" tabindex=\"1\" autofocus=\"\" autocapitalize=\"true\" cellpadding=\"10\" cellspacing=\"10\"></table> \r\n```\r\n\r\nBased on [supported html attributes docs section](https://reactjs.org/docs/dom-elements.html#all-supported-html-attributes) I couldn't find a pattern on whenever React decides when to lowercase the name and when not. Both `tabIndex` and `cellPadding` are listed, but only first one outputted as expected.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n```\r\nreact-dom@16.3.2\r\nreact@16.3.2\r\n```\r\n\r\nHaven't tried with older React / ReactDOM versions.\r\n\r\n**Updated:** I found related issue https://github.com/facebook/react/issues/10863, but my argument would be more about compat issues with mails. It's definitely an edge case thought.",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/12827",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/12827/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/12827/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/12827/events",
        "html_url": "https://github.com/facebook/react/issues/12827",
        "id": 323459897,
        "number": 12827,
        "title": "Callback in react-test-renderer for component changes",
        "user": {
            "login": "StevePotter",
            "id": 271103,
            "avatar_url": "https://avatars1.githubusercontent.com/u/271103?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/StevePotter",
            "html_url": "https://github.com/StevePotter",
            "followers_url": "https://api.github.com/users/StevePotter/followers",
            "following_url": "https://api.github.com/users/StevePotter/following{/other_user}",
            "gists_url": "https://api.github.com/users/StevePotter/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/StevePotter/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/StevePotter/subscriptions",
            "organizations_url": "https://api.github.com/users/StevePotter/orgs",
            "repos_url": "https://api.github.com/users/StevePotter/repos",
            "events_url": "https://api.github.com/users/StevePotter/events{/privacy}",
            "received_events_url": "https://api.github.com/users/StevePotter/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2018-05-16T03:52:24Z",
        "updated_at": "2018-05-16T03:52:44Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nfeature\r\n\r\n**What is the current behavior?**\r\nMany react components render multiple times automatically.  Take a graphql component.  First it will render a loading spinner, then the data after it has been fetched.  In react-test-renderer, it's difficult to get a snapshot to consistently render for these types of components.\r\n\r\nCurrently, we set an interval timer and check the component tree to see if the data has loaded and thus rendered.  This approach results in a bunch of unnecessary checks and slows down tests because the interval timer will run after the component has been rendered.\r\n\r\n**What is the expected behavior?**\r\nI would expect react-test-render to allow a callback that will be invoked each time any component in the component tree changes, basically after any component's `componentDidUpdate` ran.  I would expect an API like:\r\n```\r\nimport TestRenderer from 'react-test-renderer';\r\nconst testRenderer = TestRenderer.create(\r\n  <Todos />\r\n);\r\ntestRenderer.onChange(() => {\r\n// check TODOS for whether the data has loaded and do the snapshot\r\n})\r\n```\r\n\r\nThis would be useful in react-dom and react-native.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nIt's a proposal for a new feature, doesn't affect any existing React versions\r\n\r\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/12859",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/12859/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/12859/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/12859/events",
        "html_url": "https://github.com/facebook/react/issues/12859",
        "id": 324507400,
        "number": 12859,
        "title": "Provide HOC for new context API",
        "user": {
            "login": "mjackson",
            "id": 92839,
            "avatar_url": "https://avatars0.githubusercontent.com/u/92839?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mjackson",
            "html_url": "https://github.com/mjackson",
            "followers_url": "https://api.github.com/users/mjackson/followers",
            "following_url": "https://api.github.com/users/mjackson/following{/other_user}",
            "gists_url": "https://api.github.com/users/mjackson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mjackson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mjackson/subscriptions",
            "organizations_url": "https://api.github.com/users/mjackson/orgs",
            "repos_url": "https://api.github.com/users/mjackson/repos",
            "events_url": "https://api.github.com/users/mjackson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mjackson/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 6,
        "created_at": "2018-05-18T18:21:52Z",
        "updated_at": "2018-05-23T17:07:15Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "body": "I find myself needing a higher-order component every once in a while when using render props, so I can get stuff from context in my lifecycle methods. It's pretty easy to create a HOC from a render prop, so I was wondering how open y'all would be to adding a HOC to the new context API?\r\n\r\nSomething like this:\r\n\r\n```js\r\nconst MyContext = React.createContext();\r\n\r\nclass App extends React.Component {\r\n  componentDidMount() {\r\n    const context = this.context;\r\n  }\r\n  render() { ... }\r\n}\r\n\r\n// Maybe MyContext.provide could magically add a this.context property??\r\nconst AppWithContext = MyContext.provide(App);\r\n\r\n// ... profit!\r\n```\r\n\r\nWe can already *kind of* do this in userland with a little `withContext` helper:\r\n\r\n```js\r\nfunction withContext(Context, Component) {\r\n  return props => {\r\n    return (\r\n      <Context.Consumer>\r\n        {context => <Component {...props} context={context} />}\r\n      </Context.Consumer>\r\n    );\r\n  }\r\n}\r\n\r\n// We can already provide this.props.context.\r\nconst AppWithContext = withContext(MyContext, App);\r\n\r\n// ... profit!\r\n```\r\n\r\nThe only difference is that the context comes in as a prop (i.e. `this.props.context` instead of `this.context`).\r\n\r\nAnyway, just thought I'd open this up for discussion before making an actual PR that adds this. Thanks for your consideration \ud83d\ude05",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/12860",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/12860/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/12860/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/12860/events",
        "html_url": "https://github.com/facebook/react/issues/12860",
        "id": 324512835,
        "number": 12860,
        "title": "Feature Request: Allow Fragments to accept the className prop",
        "user": {
            "login": "bruffstar",
            "id": 1890098,
            "avatar_url": "https://avatars1.githubusercontent.com/u/1890098?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bruffstar",
            "html_url": "https://github.com/bruffstar",
            "followers_url": "https://api.github.com/users/bruffstar/followers",
            "following_url": "https://api.github.com/users/bruffstar/following{/other_user}",
            "gists_url": "https://api.github.com/users/bruffstar/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bruffstar/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bruffstar/subscriptions",
            "organizations_url": "https://api.github.com/users/bruffstar/orgs",
            "repos_url": "https://api.github.com/users/bruffstar/repos",
            "events_url": "https://api.github.com/users/bruffstar/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bruffstar/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2018-05-18T18:40:38Z",
        "updated_at": "2018-05-19T08:38:07Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "**Use case:**\r\n\r\nA set of elements should be wrapped in a ``<div>`` (with a class), but only depending on certain scenarios. \r\n\r\n**Example:**\r\n\r\n###### Test Component \r\n\r\n```jsx\r\nimport * as React from 'react';\r\n\r\nclass Test extends React.Component {\r\n    render() {\r\n        const Wrapper = this.props.wrap ? 'div' : React.Fragment;\r\n\r\n        return (\r\n            <Wrapper className={'wrapper'}>\r\n               <div>Child 1</div>\r\n               <div>Child 2</div>\r\n            </Wrapper>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Test;\r\n``` \r\n\r\n###### Scenario 1\r\n```jsx\r\n<Test />\r\n``` \r\n\r\n```html\r\n<div>Child 1</div>\r\n<div>Child 2</div>\r\n``` \r\n\r\n###### Scenario 2\r\n```jsx\r\n<Test wrap={true} />\r\n``` \r\n\r\n```html\r\n<div class=\"wrapper\">\r\n    <div>Child 1</div>\r\n    <div>Child 2</div>\r\n</div>\r\n``` \r\n\r\nEven though the above examples will actually output the way they are intended, an error is still being thrown: \r\n\r\n![image](https://user-images.githubusercontent.com/1890098/40251615-19b9a8f6-5ada-11e8-856e-80c333026079.png)\r\n\r\n**Solution:**\r\n\r\nAllow the ``className`` prop on Fragments, but simply ignore it, don't do anything with it. \r\n\r\nOf course there are many other way this can be achieved without using Fragments, but I think this approach is really clean.\r\n\r\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/12872",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/12872/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/12872/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/12872/events",
        "html_url": "https://github.com/facebook/react/issues/12872",
        "id": 324761595,
        "number": 12872,
        "title": "Submit/Reset inputs lose text when value=undefined.",
        "user": {
            "login": "ellsclytn",
            "id": 8725013,
            "avatar_url": "https://avatars0.githubusercontent.com/u/8725013?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ellsclytn",
            "html_url": "https://github.com/ellsclytn",
            "followers_url": "https://api.github.com/users/ellsclytn/followers",
            "following_url": "https://api.github.com/users/ellsclytn/following{/other_user}",
            "gists_url": "https://api.github.com/users/ellsclytn/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ellsclytn/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ellsclytn/subscriptions",
            "organizations_url": "https://api.github.com/users/ellsclytn/orgs",
            "repos_url": "https://api.github.com/users/ellsclytn/repos",
            "events_url": "https://api.github.com/users/ellsclytn/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ellsclytn/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 40929151,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
                "name": "Type: Bug",
                "color": "b60205",
                "default": false
            },
            {
                "id": 178761159,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Regression",
                "name": "Type: Regression",
                "color": "e11d21",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 8,
        "created_at": "2018-05-21T01:28:08Z",
        "updated_at": "2018-05-21T23:11:01Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug.\r\n\r\n**What is the current behavior?**\r\n\r\nCreating an `<input type='submit'` with `value={undefined}` results in a button with no text. https://codesandbox.io/s/nn7p94y3rl\r\n\r\nThe same behaviour can be seen with `type='reset'`\r\n\r\nI have a PR open with a proposed fix. https://github.com/facebook/react/pull/12780\r\n\r\n**What is the expected behavior?**\r\n\r\nThe input should use the browser's default value for the input (Submit for en, etc.).\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact 16.3.2. Chrome 66.0.3359.139. macOS 10.13.4. Works in React 15 (unsure of earlier versions)\r\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/12876",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/12876/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/12876/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/12876/events",
        "html_url": "https://github.com/facebook/react/issues/12876",
        "id": 325100851,
        "number": 12876,
        "title": "Efficiently ignore irrelevant updates from context",
        "user": {
            "login": "aldendaniels",
            "id": 4658558,
            "avatar_url": "https://avatars1.githubusercontent.com/u/4658558?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/aldendaniels",
            "html_url": "https://github.com/aldendaniels",
            "followers_url": "https://api.github.com/users/aldendaniels/followers",
            "following_url": "https://api.github.com/users/aldendaniels/following{/other_user}",
            "gists_url": "https://api.github.com/users/aldendaniels/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/aldendaniels/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/aldendaniels/subscriptions",
            "organizations_url": "https://api.github.com/users/aldendaniels/orgs",
            "repos_url": "https://api.github.com/users/aldendaniels/repos",
            "events_url": "https://api.github.com/users/aldendaniels/events{/privacy}",
            "received_events_url": "https://api.github.com/users/aldendaniels/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2018-05-22T00:22:01Z",
        "updated_at": "2018-05-23T00:09:26Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "We're using context to represent where user focus is in a large app. In our app, we have many (hundreds) of \"Focus Routes\" that listen to the focus location in the app - much like routes in React Router.\r\n\r\nMost focus transitions are irrelevant to most routes - some routes lose focus and some gain it, but most are unaffected. Today we have a context consumer at each route component that computes some derived state (e.g. `isFocused`, etc.) and provides that derived state as props to a wrapped component. The wrapped component has an optimized `shouldComponentUpdate()`.\r\n\r\nThe problem we're hitting is that React appears to do a meaningful amount of work every time the context consumer is re-rendered, even though the wrapped component doesn't re-render. This  adds up quickly across all the focus routes. Our next step is to do better profiling on in production mode, but on dev it appears to be ~0.5ms per route, which is problematic.\r\n\r\nWhat we need is a way to efficiently prevent subscribers from re-rendering when the new value (focus location in our case) isn't relevant. The `unstable_observedBits` feature is _almost_ right for us, but the the 32bit limitation is unsuitable for our scenario. If this were an unbounded list of booleans, for example, we could use this to only update invalidated components. Alternatively, if a `ContextConsumder` took a `shouldComponentUpdate()` hook we could use that.\r\n\r\nConsider this a plug for a a non-32-bit restricted alternative to `unstable_observedBits` :)\r\n\r\nIf nothing like this is forthcoming, we'll likely revert to using an emitter/subscriber model in a batched update. This is non-ideal for us, however, because there's state that we need to propagate to new components in a single render pass and context is particularly good at this. ",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/12882",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/12882/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/12882/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/12882/events",
        "html_url": "https://github.com/facebook/react/issues/12882",
        "id": 325398911,
        "number": 12882,
        "title": "ReactIs.typeOf for non-elements",
        "user": {
            "login": "mridgway",
            "id": 191142,
            "avatar_url": "https://avatars2.githubusercontent.com/u/191142?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mridgway",
            "html_url": "https://github.com/mridgway",
            "followers_url": "https://api.github.com/users/mridgway/followers",
            "following_url": "https://api.github.com/users/mridgway/following{/other_user}",
            "gists_url": "https://api.github.com/users/mridgway/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mridgway/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mridgway/subscriptions",
            "organizations_url": "https://api.github.com/users/mridgway/orgs",
            "repos_url": "https://api.github.com/users/mridgway/repos",
            "events_url": "https://api.github.com/users/mridgway/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mridgway/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2018-05-22T17:47:53Z",
        "updated_at": "2018-05-22T20:18:20Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "body": "**What is the current behavior?**\r\n\r\n`ReactIs.typeOf` currently only works for element types, it does not allow you to pass a raw `Component` or `ForwardRef` to know the type.\r\n\r\nThe use case for this is in `hoist-non-react-statics` I now need a [special cases for `ForwardRefs`](https://github.com/mridgway/hoist-non-react-statics/issues/48). To do this, I will need to know the type of the source and target components, but currently I would need to turn them into elements first.\r\n\r\nAll of the `ReactIs.is*` functions also have this issue since they use the `typeOf` function internally.\r\n\r\n```js\r\nconst ForwardComponent = React.forwardRef(() => {});\r\n\r\nReactIs.typeOf(ForwardComponent); // undefined\r\nReactIs.typeOf(React.createElement(ForwardComponent)); // Symbol(react.forward_ref)\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\nIdeally I could pass in just the Component and get the type of it: \r\n```js\r\nReactIs.typeOf(ForwardComponent) // Symbol(react.forward_ref)\r\n```\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReactIs@16.3.2\r\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/12896",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/12896/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/12896/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/12896/events",
        "html_url": "https://github.com/facebook/react/issues/12896",
        "id": 325951347,
        "number": 12896,
        "title": "[PoC] Resolve minified react errors in Devtools using SVG images",
        "user": {
            "login": "samdenty99",
            "id": 13242392,
            "avatar_url": "https://avatars3.githubusercontent.com/u/13242392?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/samdenty99",
            "html_url": "https://github.com/samdenty99",
            "followers_url": "https://api.github.com/users/samdenty99/followers",
            "following_url": "https://api.github.com/users/samdenty99/following{/other_user}",
            "gists_url": "https://api.github.com/users/samdenty99/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/samdenty99/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/samdenty99/subscriptions",
            "organizations_url": "https://api.github.com/users/samdenty99/orgs",
            "repos_url": "https://api.github.com/users/samdenty99/repos",
            "events_url": "https://api.github.com/users/samdenty99/events{/privacy}",
            "received_events_url": "https://api.github.com/users/samdenty99/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2018-05-24T03:30:40Z",
        "updated_at": "2018-05-24T16:21:50Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?** Feature\r\n\r\n**What is the current behavior?** Currently when React is in production mode, all errors thrown display a link to view the \"unminified\" error.\r\n\r\n![image](https://user-images.githubusercontent.com/13242392/40462785-7091308a-5f09-11e8-8d0e-219edd7ece1e.png)\r\n\r\nBy utilizing Chrome's custom formatter, and the `background-image` attribute, it's possible to load an image from a custom URL.\r\n\r\nUsing an SVG and some `<text>` nodes, it's possible to re-create the full error message.\r\n\r\n![image](https://user-images.githubusercontent.com/13242392/40462887-eddc58ee-5f09-11e8-90a2-9dc18b0f0d65.png)\r\n\r\nProof of concept: https://codesandbox.io/embed/j5k3yo879?expanddevtools=1\r\n\r\n\r\nThis would require a server to parse the error messages and output an SVG, but would:\r\n\r\n- Provide concise error messages without having to leave DevTools \r\n- Wouldn't affect the existing bundle size\r\n- No side-effects, ie. the SVG's only load if DevTools is open\r\n- Retains the same behaviour for other browsers (such as Firefox Devtools), which doesn't support displaying images",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/12897",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/12897/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/12897/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/12897/events",
        "html_url": "https://github.com/facebook/react/issues/12897",
        "id": 326048819,
        "number": 12897,
        "title": "How does Error Boundary treat the thrown JS error?",
        "user": {
            "login": "claudiut",
            "id": 1755192,
            "avatar_url": "https://avatars1.githubusercontent.com/u/1755192?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/claudiut",
            "html_url": "https://github.com/claudiut",
            "followers_url": "https://api.github.com/users/claudiut/followers",
            "following_url": "https://api.github.com/users/claudiut/following{/other_user}",
            "gists_url": "https://api.github.com/users/claudiut/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/claudiut/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/claudiut/subscriptions",
            "organizations_url": "https://api.github.com/users/claudiut/orgs",
            "repos_url": "https://api.github.com/users/claudiut/repos",
            "events_url": "https://api.github.com/users/claudiut/events{/privacy}",
            "received_events_url": "https://api.github.com/users/claudiut/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2018-05-24T09:58:12Z",
        "updated_at": "2018-05-25T08:11:22Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nThis is a question.\r\n\r\n**What is the current behavior?**\r\nThe error boundary successfully intercepts the JavaScript errors and displays our fallback UI but it seems the JavaScript errors still gets thrown; they appear in red in the browser's console and they are caught in our Cypress tests, making them fail.\r\n\r\n**What is the expected behavior?**\r\nI don't know, that's what I'm asking. Does the Error Boundary throw the original JS error again? Or it lets JS throw it as it would normally do? Or does the Error Boundary catches the original thrown error and then prints it using `console.error`? _What is the designed behaviour for the Error Boundary regarding the original JavaScript thrown error?_\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nI use Google Chrome `Version 66.0.3359.181 (Official Build) (64-bit)` and React 16.3.2",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/12899",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/12899/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/12899/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/12899/events",
        "html_url": "https://github.com/facebook/react/issues/12899",
        "id": 326174367,
        "number": 12899,
        "title": "Elements inside a Fragment get added one at a time",
        "user": {
            "login": "city41",
            "id": 141159,
            "avatar_url": "https://avatars1.githubusercontent.com/u/141159?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/city41",
            "html_url": "https://github.com/city41",
            "followers_url": "https://api.github.com/users/city41/followers",
            "following_url": "https://api.github.com/users/city41/following{/other_user}",
            "gists_url": "https://api.github.com/users/city41/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/city41/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/city41/subscriptions",
            "organizations_url": "https://api.github.com/users/city41/orgs",
            "repos_url": "https://api.github.com/users/city41/repos",
            "events_url": "https://api.github.com/users/city41/events{/privacy}",
            "received_events_url": "https://api.github.com/users/city41/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2018-05-24T15:27:48Z",
        "updated_at": "2018-05-24T15:54:39Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nI believe this is a bug\r\n\r\n**What is the current behavior?**\r\nWhen adding multiple elements inside a Fragment, they get added one at a time.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nI setup a demo app here: https://city41.github.io/fragmenttest/\r\nhttps://github.com/city41/fragmenttest\r\n\r\nSteps to repro:\r\n1. click the \"edit\" button in the first card\r\n2. watch what happens both visually and in the DOM (break on subtree modifications is helpful)\r\n\r\nYou can see the cancel button very briefly has the hover state, and so its background is red. You can also see in the DOM using \"Break on subtree modifications\" on the parent div that the cancel button gets added, then the save button gets added on a second render.\r\n\r\nThe behavior depends on the browser:\r\n\r\n`Chrome (Windows 10, 66.0.3359.181 (Official Build) (64-bit)):` the cancel button briefly has the hover state and appears red.\r\n\r\n`Edge (Windows 10, 42.17134.1.0):` the cancel button gains the hover state and keeps it. It will be red until you move the mouse again\r\n\r\n`Firefox (Windows 10, 60.0.1):` Firefox visually behaves as expected. If I was only using Firefox as my browser I would not have detected this issue.\r\n\r\n**What is the expected behavior?**\r\nAfter clicking the edit button, the save and cancel buttons get added to the DOM at the same time, and so the hover state on the buttons is always properly applied. You can see this by clicking \"edit\" in the second card, which uses a span instead of a fragment.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact 16.3.2. Unsure if this worked in a previous version.\r\n\r\n\r\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/12901",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/12901/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/12901/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/12901/events",
        "html_url": "https://github.com/facebook/react/issues/12901",
        "id": 326281774,
        "number": 12901,
        "title": "Pointer Event's aren't registering touch on iOS while using Safari and Chrome ",
        "user": {
            "login": "tgrecojs",
            "id": 6646552,
            "avatar_url": "https://avatars0.githubusercontent.com/u/6646552?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/tgrecojs",
            "html_url": "https://github.com/tgrecojs",
            "followers_url": "https://api.github.com/users/tgrecojs/followers",
            "following_url": "https://api.github.com/users/tgrecojs/following{/other_user}",
            "gists_url": "https://api.github.com/users/tgrecojs/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/tgrecojs/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/tgrecojs/subscriptions",
            "organizations_url": "https://api.github.com/users/tgrecojs/orgs",
            "repos_url": "https://api.github.com/users/tgrecojs/repos",
            "events_url": "https://api.github.com/users/tgrecojs/events{/privacy}",
            "received_events_url": "https://api.github.com/users/tgrecojs/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2018-05-24T20:32:50Z",
        "updated_at": "2018-05-24T20:37:03Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nI believe it's a bug.\r\n\r\n**What is the current behavior?**\r\n`onPointerDown` isn't registering when using Chrome and Safari on mobile. When viewing it as mobile within chrome's dev tools it works fine and will log `touch` for `event.pointerType` but on mobile it's unresponsive. \r\n\r\n* [Codesandbox - logs out `pointerType`](https://codesandbox.io/s/8xr91vj4xl)\r\n* [http://vague-bird.surge.sh/](http://vague-bird.surge.sh/)\r\n\r\n\r\n**What is the expected behavior?**\r\n`this.onPointerDown` should register contact other than just `mouse` events while still covering mouse events. Below is a quick gif showing the correct behavior on the screen & in the console. \r\n\r\n*[url if below isn't running](http://g.recordit.co/pE4IM4t1xm.gif)*\r\n![onPointerDown demo](http://g.recordit.co/pE4IM4t1xm.gif)\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n* **Browsers/OS** : It's not working on iOS 11.3 for either Safari or Mobile. \r\n* **Prior Versions?**: No. Pointer Events are a new feature introduced in v16.4. \r\n\r\n\r\n[React 16.4 blog post](https://reactjs.org/blog/2018/05/23/react-v-16-4.html#pointer-events)\r\n\r\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/12902",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/12902/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/12902/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/12902/events",
        "html_url": "https://github.com/facebook/react/issues/12902",
        "id": 326281846,
        "number": 12902,
        "title": "Synthetic (keyboard) events don't implement the .code property",
        "user": {
            "login": "bsmith-cycorp",
            "id": 25161635,
            "avatar_url": "https://avatars3.githubusercontent.com/u/25161635?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bsmith-cycorp",
            "html_url": "https://github.com/bsmith-cycorp",
            "followers_url": "https://api.github.com/users/bsmith-cycorp/followers",
            "following_url": "https://api.github.com/users/bsmith-cycorp/following{/other_user}",
            "gists_url": "https://api.github.com/users/bsmith-cycorp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bsmith-cycorp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bsmith-cycorp/subscriptions",
            "organizations_url": "https://api.github.com/users/bsmith-cycorp/orgs",
            "repos_url": "https://api.github.com/users/bsmith-cycorp/repos",
            "events_url": "https://api.github.com/users/bsmith-cycorp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bsmith-cycorp/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2018-05-24T20:33:03Z",
        "updated_at": "2018-05-24T20:33:18Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nFeature\r\n\r\n**What is the current behavior?**\r\n`<event>.code` is undefined\r\n\r\n**What is the expected behavior?**\r\n`.code` is a very useful part of the KeyboardEvent spec: https://www.w3.org/TR/uievents/#dom-keyboardevent-code\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nI am on React 16.3, but I saw no mention of this in today's 16.4 changelog.\r\n",
        "score": 1.0
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/12907",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/12907/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/12907/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/12907/events",
        "html_url": "https://github.com/facebook/react/issues/12907",
        "id": 326553748,
        "number": 12907,
        "title": "Get the render function from the html. (Multi page - traditional website)",
        "user": {
            "login": "toberr",
            "id": 25332065,
            "avatar_url": "https://avatars3.githubusercontent.com/u/25332065?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/toberr",
            "html_url": "https://github.com/toberr",
            "followers_url": "https://api.github.com/users/toberr/followers",
            "following_url": "https://api.github.com/users/toberr/following{/other_user}",
            "gists_url": "https://api.github.com/users/toberr/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/toberr/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/toberr/subscriptions",
            "organizations_url": "https://api.github.com/users/toberr/orgs",
            "repos_url": "https://api.github.com/users/toberr/repos",
            "events_url": "https://api.github.com/users/toberr/events{/privacy}",
            "received_events_url": "https://api.github.com/users/toberr/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2018-05-25T14:47:13Z",
        "updated_at": "2018-05-25T15:45:21Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nI think it's a feature, but more like just a question.\r\n**What is the current behavior?**\r\n\r\nHello,\r\n\r\nIs it possible somehow to get the render function from a script tag in the html?\r\nIn a multi page site it would be useful:\r\nI'm asking this because if you want to edit the pages in an admin panel, with this method\r\ni could just insert them into the html and \r\nI wouldn't have to rebuild the whole project to get the new javascript chunks for the pages.\r\n\r\nNo rebuilds, no code splitting, the build.js file would just contain the components.\r\n\r\nIn Vue.js you can create a build which is get the content from the html like this:\r\n\r\n```javascript\r\n// main.js\r\nimport App from './App.js';\r\n\r\nnew Vue({\r\n  el: '#app',\r\n  render: h => h(App)\r\n});\r\n\r\n//App.js\r\nexport default Vue.component('App', {\r\n  template: '#page-template',\r\n  data() {\r\n    return { world: 'world' }\r\n  }\r\n  mounted () {\r\n    ...\r\n  },\r\n  components: {\r\n    ...\r\n  }\r\n}\r\n```\r\n```html\r\n<!-- html -->\r\n<div id=\"app\"></div>\r\n<script type=\"x-template\" id=\"page-template\">\r\nHello {{world}}\r\n</script>\r\n```\r\n",
        "score": 1.0
    }
]